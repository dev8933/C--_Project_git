
Interupt_LED_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006bec  08006bec  00016bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd8  08006cd8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ce0  08006ce0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ce4  08006ce4  00016ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00013494  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200134a8  200134a8  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000144b1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d1d  00000000  00000000  000344f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  00037218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001168  00000000  00000000  000384e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020fad  00000000  00000000  00039650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001411b  00000000  00000000  0005a5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7849  00000000  00000000  0006e718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00145f61  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f1c  00000000  00000000  00145fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bd4 	.word	0x08006bd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006bd4 	.word	0x08006bd4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e7c 	.word	0x20012e7c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f103 0208 	add.w	r2, r3, #8
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f04f 32ff 	mov.w	r2, #4294967295
 8000580:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f103 0208 	add.w	r2, r3, #8
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f103 0208 	add.w	r2, r3, #8
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005c2:	b480      	push	{r7}
 80005c4:	b085      	sub	sp, #20
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	689a      	ldr	r2, [r3, #8]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	601a      	str	r2, [r3, #0]
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800060a:	b480      	push	{r7}
 800060c:	b085      	sub	sp, #20
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000620:	d103      	bne.n	800062a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e00c      	b.n	8000644 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3308      	adds	r3, #8
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	e002      	b.n	8000638 <vListInsert+0x2e>
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	429a      	cmp	r2, r3
 8000642:	d2f6      	bcs.n	8000632 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	6892      	ldr	r2, [r2, #8]
 8000692:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	6852      	ldr	r2, [r2, #4]
 800069c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d103      	bne.n	80006b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	1e5a      	subs	r2, r3, #1
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d10a      	bne.n	80006fa <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006e8:	f383 8811 	msr	BASEPRI, r3
 80006ec:	f3bf 8f6f 	isb	sy
 80006f0:	f3bf 8f4f 	dsb	sy
 80006f4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006f6:	bf00      	nop
 80006f8:	e7fe      	b.n	80006f8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80006fa:	f002 fba5 	bl	8002e48 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000706:	68f9      	ldr	r1, [r7, #12]
 8000708:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800070a:	fb01 f303 	mul.w	r3, r1, r3
 800070e:	441a      	add	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800072a:	3b01      	subs	r3, #1
 800072c:	68f9      	ldr	r1, [r7, #12]
 800072e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000730:	fb01 f303 	mul.w	r3, r1, r3
 8000734:	441a      	add	r2, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	22ff      	movs	r2, #255	; 0xff
 800073e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	22ff      	movs	r2, #255	; 0xff
 8000746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d114      	bne.n	800077a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d01a      	beq.n	800078e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3310      	adds	r3, #16
 800075c:	4618      	mov	r0, r3
 800075e:	f001 f9ef 	bl	8001b40 <xTaskRemoveFromEventList>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d012      	beq.n	800078e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <xQueueGenericReset+0xcc>)
 800076a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	f3bf 8f4f 	dsb	sy
 8000774:	f3bf 8f6f 	isb	sy
 8000778:	e009      	b.n	800078e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3310      	adds	r3, #16
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fef2 	bl	8000568 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3324      	adds	r3, #36	; 0x24
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff feed 	bl	8000568 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800078e:	f002 fb8b 	bl	8002ea8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	e000ed04 	.word	0xe000ed04

080007a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	4613      	mov	r3, r2
 80007ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d10a      	bne.n	80007ca <xQueueGenericCreate+0x2a>
        __asm volatile
 80007b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007b8:	f383 8811 	msr	BASEPRI, r3
 80007bc:	f3bf 8f6f 	isb	sy
 80007c0:	f3bf 8f4f 	dsb	sy
 80007c4:	61bb      	str	r3, [r7, #24]
    }
 80007c6:	bf00      	nop
 80007c8:	e7fe      	b.n	80007c8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	fb02 f303 	mul.w	r3, r2, r3
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d006      	beq.n	80007e8 <xQueueGenericCreate+0x48>
 80007da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d101      	bne.n	80007ec <xQueueGenericCreate+0x4c>
 80007e8:	2301      	movs	r3, #1
 80007ea:	e000      	b.n	80007ee <xQueueGenericCreate+0x4e>
 80007ec:	2300      	movs	r3, #0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10a      	bne.n	8000808 <xQueueGenericCreate+0x68>
        __asm volatile
 80007f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007f6:	f383 8811 	msr	BASEPRI, r3
 80007fa:	f3bf 8f6f 	isb	sy
 80007fe:	f3bf 8f4f 	dsb	sy
 8000802:	617b      	str	r3, [r7, #20]
    }
 8000804:	bf00      	nop
 8000806:	e7fe      	b.n	8000806 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800080e:	d90a      	bls.n	8000826 <xQueueGenericCreate+0x86>
        __asm volatile
 8000810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000814:	f383 8811 	msr	BASEPRI, r3
 8000818:	f3bf 8f6f 	isb	sy
 800081c:	f3bf 8f4f 	dsb	sy
 8000820:	613b      	str	r3, [r7, #16]
    }
 8000822:	bf00      	nop
 8000824:	e7fe      	b.n	8000824 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000828:	3350      	adds	r3, #80	; 0x50
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fc36 	bl	800309c <pvPortMalloc>
 8000830:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00d      	beq.n	8000854 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000838:	6a3b      	ldr	r3, [r7, #32]
 800083a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	3350      	adds	r3, #80	; 0x50
 8000840:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	4613      	mov	r3, r2
 800084a:	69fa      	ldr	r2, [r7, #28]
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f000 f805 	bl	800085e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000854:	6a3b      	ldr	r3, [r7, #32]
    }
 8000856:	4618      	mov	r0, r3
 8000858:	3728      	adds	r7, #40	; 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b084      	sub	sp, #16
 8000862:	af00      	add	r7, sp, #0
 8000864:	60f8      	str	r0, [r7, #12]
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d103      	bne.n	800087a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	e002      	b.n	8000880 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800088c:	2101      	movs	r1, #1
 800088e:	69b8      	ldr	r0, [r7, #24]
 8000890:	f7ff ff1e 	bl	80006d0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	78fa      	ldrb	r2, [r7, #3]
 8000898:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	68f9      	ldr	r1, [r7, #12]
 80008a2:	2073      	movs	r0, #115	; 0x73
 80008a4:	f003 faf4 	bl	8003e90 <SEGGER_SYSVIEW_RecordU32x3>
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b090      	sub	sp, #64	; 0x40
 80008b4:	af02      	add	r7, sp, #8
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008be:	2300      	movs	r3, #0
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80008c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d10a      	bne.n	80008e2 <xQueueGenericSend+0x32>
        __asm volatile
 80008cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d0:	f383 8811 	msr	BASEPRI, r3
 80008d4:	f3bf 8f6f 	isb	sy
 80008d8:	f3bf 8f4f 	dsb	sy
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80008de:	bf00      	nop
 80008e0:	e7fe      	b.n	80008e0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d103      	bne.n	80008f0 <xQueueGenericSend+0x40>
 80008e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d101      	bne.n	80008f4 <xQueueGenericSend+0x44>
 80008f0:	2301      	movs	r3, #1
 80008f2:	e000      	b.n	80008f6 <xQueueGenericSend+0x46>
 80008f4:	2300      	movs	r3, #0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10a      	bne.n	8000910 <xQueueGenericSend+0x60>
        __asm volatile
 80008fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008fe:	f383 8811 	msr	BASEPRI, r3
 8000902:	f3bf 8f6f 	isb	sy
 8000906:	f3bf 8f4f 	dsb	sy
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800090c:	bf00      	nop
 800090e:	e7fe      	b.n	800090e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	2b02      	cmp	r3, #2
 8000914:	d103      	bne.n	800091e <xQueueGenericSend+0x6e>
 8000916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800091a:	2b01      	cmp	r3, #1
 800091c:	d101      	bne.n	8000922 <xQueueGenericSend+0x72>
 800091e:	2301      	movs	r3, #1
 8000920:	e000      	b.n	8000924 <xQueueGenericSend+0x74>
 8000922:	2300      	movs	r3, #0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d10a      	bne.n	800093e <xQueueGenericSend+0x8e>
        __asm volatile
 8000928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800092c:	f383 8811 	msr	BASEPRI, r3
 8000930:	f3bf 8f6f 	isb	sy
 8000934:	f3bf 8f4f 	dsb	sy
 8000938:	623b      	str	r3, [r7, #32]
    }
 800093a:	bf00      	nop
 800093c:	e7fe      	b.n	800093c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800093e:	f001 fa9f 	bl	8001e80 <xTaskGetSchedulerState>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <xQueueGenericSend+0x9e>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d101      	bne.n	8000952 <xQueueGenericSend+0xa2>
 800094e:	2301      	movs	r3, #1
 8000950:	e000      	b.n	8000954 <xQueueGenericSend+0xa4>
 8000952:	2300      	movs	r3, #0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10a      	bne.n	800096e <xQueueGenericSend+0xbe>
        __asm volatile
 8000958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800095c:	f383 8811 	msr	BASEPRI, r3
 8000960:	f3bf 8f6f 	isb	sy
 8000964:	f3bf 8f4f 	dsb	sy
 8000968:	61fb      	str	r3, [r7, #28]
    }
 800096a:	bf00      	nop
 800096c:	e7fe      	b.n	800096c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800096e:	f002 fa6b 	bl	8002e48 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800097a:	429a      	cmp	r2, r3
 800097c:	d302      	bcc.n	8000984 <xQueueGenericSend+0xd4>
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d136      	bne.n	80009f2 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8000984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000986:	4618      	mov	r0, r3
 8000988:	f004 f898 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	460b      	mov	r3, r1
 8000996:	4601      	mov	r1, r0
 8000998:	205a      	movs	r0, #90	; 0x5a
 800099a:	f003 faef 	bl	8003f7c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009a4:	f000 fa78 	bl	8000e98 <prvCopyDataToQueue>
 80009a8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d010      	beq.n	80009d4 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b4:	3324      	adds	r3, #36	; 0x24
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 f8c2 	bl	8001b40 <xTaskRemoveFromEventList>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d013      	beq.n	80009ea <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009c2:	4b4d      	ldr	r3, [pc, #308]	; (8000af8 <xQueueGenericSend+0x248>)
 80009c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	f3bf 8f4f 	dsb	sy
 80009ce:	f3bf 8f6f 	isb	sy
 80009d2:	e00a      	b.n	80009ea <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d007      	beq.n	80009ea <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009da:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <xQueueGenericSend+0x248>)
 80009dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	f3bf 8f4f 	dsb	sy
 80009e6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009ea:	f002 fa5d 	bl	8002ea8 <vPortExitCritical>
                return pdPASS;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e07d      	b.n	8000aee <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d110      	bne.n	8000a1a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80009f8:	f002 fa56 	bl	8002ea8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80009fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009fe:	4618      	mov	r0, r3
 8000a00:	f004 f85c 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	4601      	mov	r1, r0
 8000a10:	205a      	movs	r0, #90	; 0x5a
 8000a12:	f003 fab3 	bl	8003f7c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e069      	b.n	8000aee <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d106      	bne.n	8000a2e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 f8f1 	bl	8001c0c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a2e:	f002 fa3b 	bl	8002ea8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a32:	f000 fe4f 	bl	80016d4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a36:	f002 fa07 	bl	8002e48 <vPortEnterCritical>
 8000a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a40:	b25b      	sxtb	r3, r3
 8000a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a46:	d103      	bne.n	8000a50 <xQueueGenericSend+0x1a0>
 8000a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a56:	b25b      	sxtb	r3, r3
 8000a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a5c:	d103      	bne.n	8000a66 <xQueueGenericSend+0x1b6>
 8000a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a66:	f002 fa1f 	bl	8002ea8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a6a:	1d3a      	adds	r2, r7, #4
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 f8e0 	bl	8001c38 <xTaskCheckForTimeOut>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d124      	bne.n	8000ac8 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a80:	f000 fb02 	bl	8001088 <prvIsQueueFull>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d018      	beq.n	8000abc <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a8c:	3310      	adds	r3, #16
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f802 	bl	8001a9c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a9a:	f000 fa8d 	bl	8000fb8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a9e:	f000 fe27 	bl	80016f0 <xTaskResumeAll>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f47f af62 	bne.w	800096e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <xQueueGenericSend+0x248>)
 8000aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	f3bf 8f4f 	dsb	sy
 8000ab6:	f3bf 8f6f 	isb	sy
 8000aba:	e758      	b.n	800096e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000abe:	f000 fa7b 	bl	8000fb8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ac2:	f000 fe15 	bl	80016f0 <xTaskResumeAll>
 8000ac6:	e752      	b.n	800096e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aca:	f000 fa75 	bl	8000fb8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ace:	f000 fe0f 	bl	80016f0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 fff1 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	4601      	mov	r1, r0
 8000ae6:	205a      	movs	r0, #90	; 0x5a
 8000ae8:	f003 fa48 	bl	8003f7c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000aec:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3738      	adds	r7, #56	; 0x38
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	e000ed04 	.word	0xe000ed04

08000afc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b090      	sub	sp, #64	; 0x40
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
 8000b08:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10a      	bne.n	8000b2a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b18:	f383 8811 	msr	BASEPRI, r3
 8000b1c:	f3bf 8f6f 	isb	sy
 8000b20:	f3bf 8f4f 	dsb	sy
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000b26:	bf00      	nop
 8000b28:	e7fe      	b.n	8000b28 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <xQueueGenericSendFromISR+0x3c>
 8000b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d101      	bne.n	8000b3c <xQueueGenericSendFromISR+0x40>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <xQueueGenericSendFromISR+0x42>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d10a      	bne.n	8000b58 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b46:	f383 8811 	msr	BASEPRI, r3
 8000b4a:	f3bf 8f6f 	isb	sy
 8000b4e:	f3bf 8f4f 	dsb	sy
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000b54:	bf00      	nop
 8000b56:	e7fe      	b.n	8000b56 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d103      	bne.n	8000b66 <xQueueGenericSendFromISR+0x6a>
 8000b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d101      	bne.n	8000b6a <xQueueGenericSendFromISR+0x6e>
 8000b66:	2301      	movs	r3, #1
 8000b68:	e000      	b.n	8000b6c <xQueueGenericSendFromISR+0x70>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d10a      	bne.n	8000b86 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b74:	f383 8811 	msr	BASEPRI, r3
 8000b78:	f3bf 8f6f 	isb	sy
 8000b7c:	f3bf 8f4f 	dsb	sy
 8000b80:	623b      	str	r3, [r7, #32]
    }
 8000b82:	bf00      	nop
 8000b84:	e7fe      	b.n	8000b84 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b86:	f002 fa49 	bl	800301c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000b8a:	f3ef 8211 	mrs	r2, BASEPRI
 8000b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b92:	f383 8811 	msr	BASEPRI, r3
 8000b96:	f3bf 8f6f 	isb	sy
 8000b9a:	f3bf 8f4f 	dsb	sy
 8000b9e:	61fa      	str	r2, [r7, #28]
 8000ba0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000ba2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d302      	bcc.n	8000bb8 <xQueueGenericSendFromISR+0xbc>
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d148      	bne.n	8000c4a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f003 ff76 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 8000bd0:	4601      	mov	r1, r0
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	2060      	movs	r0, #96	; 0x60
 8000bd8:	f003 f900 	bl	8003ddc <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bdc:	683a      	ldr	r2, [r7, #0]
 8000bde:	68b9      	ldr	r1, [r7, #8]
 8000be0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000be2:	f000 f959 	bl	8000e98 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000be6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bee:	d112      	bne.n	8000c16 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d025      	beq.n	8000c44 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bfa:	3324      	adds	r3, #36	; 0x24
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 ff9f 	bl	8001b40 <xTaskRemoveFromEventList>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d01d      	beq.n	8000c44 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d01a      	beq.n	8000c44 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	e016      	b.n	8000c44 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000c16:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c1c:	d10a      	bne.n	8000c34 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c22:	f383 8811 	msr	BASEPRI, r3
 8000c26:	f3bf 8f6f 	isb	sy
 8000c2a:	f3bf 8f4f 	dsb	sy
 8000c2e:	617b      	str	r3, [r7, #20]
    }
 8000c30:	bf00      	nop
 8000c32:	e7fe      	b.n	8000c32 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	b25a      	sxtb	r2, r3
 8000c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000c44:	2301      	movs	r3, #1
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000c48:	e00b      	b.n	8000c62 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 ff35 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 8000c52:	4601      	mov	r1, r0
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	461a      	mov	r2, r3
 8000c58:	2060      	movs	r0, #96	; 0x60
 8000c5a:	f003 f8bf 	bl	8003ddc <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c64:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c6c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3740      	adds	r7, #64	; 0x40
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b08f      	sub	sp, #60	; 0x3c
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10a      	bne.n	8000ca8 <xQueueReceive+0x30>
        __asm volatile
 8000c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c96:	f383 8811 	msr	BASEPRI, r3
 8000c9a:	f3bf 8f6f 	isb	sy
 8000c9e:	f3bf 8f4f 	dsb	sy
 8000ca2:	623b      	str	r3, [r7, #32]
    }
 8000ca4:	bf00      	nop
 8000ca6:	e7fe      	b.n	8000ca6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d103      	bne.n	8000cb6 <xQueueReceive+0x3e>
 8000cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <xQueueReceive+0x42>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e000      	b.n	8000cbc <xQueueReceive+0x44>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10a      	bne.n	8000cd6 <xQueueReceive+0x5e>
        __asm volatile
 8000cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc4:	f383 8811 	msr	BASEPRI, r3
 8000cc8:	f3bf 8f6f 	isb	sy
 8000ccc:	f3bf 8f4f 	dsb	sy
 8000cd0:	61fb      	str	r3, [r7, #28]
    }
 8000cd2:	bf00      	nop
 8000cd4:	e7fe      	b.n	8000cd4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000cd6:	f001 f8d3 	bl	8001e80 <xTaskGetSchedulerState>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <xQueueReceive+0x6e>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <xQueueReceive+0x72>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <xQueueReceive+0x74>
 8000cea:	2300      	movs	r3, #0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10a      	bne.n	8000d06 <xQueueReceive+0x8e>
        __asm volatile
 8000cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf4:	f383 8811 	msr	BASEPRI, r3
 8000cf8:	f3bf 8f6f 	isb	sy
 8000cfc:	f3bf 8f4f 	dsb	sy
 8000d00:	61bb      	str	r3, [r7, #24]
    }
 8000d02:	bf00      	nop
 8000d04:	e7fe      	b.n	8000d04 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d06:	f002 f89f 	bl	8002e48 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d02f      	beq.n	8000d76 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d16:	68b9      	ldr	r1, [r7, #8]
 8000d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d1a:	f000 f927 	bl	8000f6c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d20:	4618      	mov	r0, r3
 8000d22:	f003 fecb 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 8000d26:	4604      	mov	r4, r0
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f003 fec7 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2101      	movs	r1, #1
 8000d34:	9100      	str	r1, [sp, #0]
 8000d36:	4621      	mov	r1, r4
 8000d38:	205c      	movs	r0, #92	; 0x5c
 8000d3a:	f003 f91f 	bl	8003f7c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	1e5a      	subs	r2, r3, #1
 8000d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d44:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00f      	beq.n	8000d6e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d50:	3310      	adds	r3, #16
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 fef4 	bl	8001b40 <xTaskRemoveFromEventList>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d007      	beq.n	8000d6e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d5e:	4b4d      	ldr	r3, [pc, #308]	; (8000e94 <xQueueReceive+0x21c>)
 8000d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	f3bf 8f4f 	dsb	sy
 8000d6a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d6e:	f002 f89b 	bl	8002ea8 <vPortExitCritical>
                return pdPASS;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e08a      	b.n	8000e8c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d113      	bne.n	8000da4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d7c:	f002 f894 	bl	8002ea8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 fe9a 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 8000d88:	4604      	mov	r4, r0
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f003 fe96 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 8000d90:	4602      	mov	r2, r0
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2101      	movs	r1, #1
 8000d96:	9100      	str	r1, [sp, #0]
 8000d98:	4621      	mov	r1, r4
 8000d9a:	205c      	movs	r0, #92	; 0x5c
 8000d9c:	f003 f8ee 	bl	8003f7c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000da0:	2300      	movs	r3, #0
 8000da2:	e073      	b.n	8000e8c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d106      	bne.n	8000db8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 ff2c 	bl	8001c0c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000db4:	2301      	movs	r3, #1
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000db8:	f002 f876 	bl	8002ea8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000dbc:	f000 fc8a 	bl	80016d4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000dc0:	f002 f842 	bl	8002e48 <vPortEnterCritical>
 8000dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d103      	bne.n	8000dda <xQueueReceive+0x162>
 8000dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de6:	d103      	bne.n	8000df0 <xQueueReceive+0x178>
 8000de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000df0:	f002 f85a 	bl	8002ea8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000df4:	1d3a      	adds	r2, r7, #4
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 ff1b 	bl	8001c38 <xTaskCheckForTimeOut>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d124      	bne.n	8000e52 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e0a:	f000 f927 	bl	800105c <prvIsQueueEmpty>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d018      	beq.n	8000e46 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e16:	3324      	adds	r3, #36	; 0x24
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fe3d 	bl	8001a9c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e24:	f000 f8c8 	bl	8000fb8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e28:	f000 fc62 	bl	80016f0 <xTaskResumeAll>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f47f af69 	bne.w	8000d06 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <xQueueReceive+0x21c>)
 8000e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	f3bf 8f4f 	dsb	sy
 8000e40:	f3bf 8f6f 	isb	sy
 8000e44:	e75f      	b.n	8000d06 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e48:	f000 f8b6 	bl	8000fb8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e4c:	f000 fc50 	bl	80016f0 <xTaskResumeAll>
 8000e50:	e759      	b.n	8000d06 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e54:	f000 f8b0 	bl	8000fb8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e58:	f000 fc4a 	bl	80016f0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e5e:	f000 f8fd 	bl	800105c <prvIsQueueEmpty>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f43f af4e 	beq.w	8000d06 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f003 fe25 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 8000e72:	4604      	mov	r4, r0
 8000e74:	2000      	movs	r0, #0
 8000e76:	f003 fe21 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2101      	movs	r1, #1
 8000e80:	9100      	str	r1, [sp, #0]
 8000e82:	4621      	mov	r1, r4
 8000e84:	205c      	movs	r0, #92	; 0x5c
 8000e86:	f003 f879 	bl	8003f7c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000e8a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3734      	adds	r7, #52	; 0x34
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	e000ed04 	.word	0xe000ed04

08000e98 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eac:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10d      	bne.n	8000ed2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d14d      	bne.n	8000f5a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fffa 	bl	8001ebc <xTaskPriorityDisinherit>
 8000ec8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	e043      	b.n	8000f5a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d119      	bne.n	8000f0c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6858      	ldr	r0, [r3, #4]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	f005 fe60 	bl	8006ba8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	441a      	add	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d32b      	bcc.n	8000f5a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	e026      	b.n	8000f5a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	68d8      	ldr	r0, [r3, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	461a      	mov	r2, r3
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	f005 fe46 	bl	8006ba8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	425b      	negs	r3, r3
 8000f26:	441a      	add	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	425b      	negs	r3, r3
 8000f42:	441a      	add	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d105      	bne.n	8000f5a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d002      	beq.n	8000f5a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000f62:	697b      	ldr	r3, [r7, #20]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d018      	beq.n	8000fb0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	441a      	add	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d303      	bcc.n	8000fa0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68d9      	ldr	r1, [r3, #12]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	461a      	mov	r2, r3
 8000faa:	6838      	ldr	r0, [r7, #0]
 8000fac:	f005 fdfc 	bl	8006ba8 <memcpy>
    }
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000fc0:	f001 ff42 	bl	8002e48 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fca:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fcc:	e011      	b.n	8000ff2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d012      	beq.n	8000ffc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3324      	adds	r3, #36	; 0x24
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fdb0 	bl	8001b40 <xTaskRemoveFromEventList>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000fe6:	f000 fe8d 	bl	8001d04 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	dce9      	bgt.n	8000fce <prvUnlockQueue+0x16>
 8000ffa:	e000      	b.n	8000ffe <prvUnlockQueue+0x46>
                        break;
 8000ffc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	22ff      	movs	r2, #255	; 0xff
 8001002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001006:	f001 ff4f 	bl	8002ea8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800100a:	f001 ff1d 	bl	8002e48 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001014:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001016:	e011      	b.n	800103c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d012      	beq.n	8001046 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3310      	adds	r3, #16
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fd8b 	bl	8001b40 <xTaskRemoveFromEventList>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001030:	f000 fe68 	bl	8001d04 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	3b01      	subs	r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800103c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001040:	2b00      	cmp	r3, #0
 8001042:	dce9      	bgt.n	8001018 <prvUnlockQueue+0x60>
 8001044:	e000      	b.n	8001048 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001046:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	22ff      	movs	r2, #255	; 0xff
 800104c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001050:	f001 ff2a 	bl	8002ea8 <vPortExitCritical>
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001064:	f001 fef0 	bl	8002e48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001070:	2301      	movs	r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	e001      	b.n	800107a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800107a:	f001 ff15 	bl	8002ea8 <vPortExitCritical>

    return xReturn;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001090:	f001 feda 	bl	8002e48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800109c:	429a      	cmp	r2, r3
 800109e:	d102      	bne.n	80010a6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	e001      	b.n	80010aa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010aa:	f001 fefd 	bl	8002ea8 <vPortExitCritical>

    return xReturn;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	e01e      	b.n	8001106 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80010c8:	4a13      	ldr	r2, [pc, #76]	; (8001118 <vQueueAddToRegistry+0x60>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d115      	bne.n	8001100 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80010d4:	4910      	ldr	r1, [pc, #64]	; (8001118 <vQueueAddToRegistry+0x60>)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <vQueueAddToRegistry+0x60>)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	4413      	add	r3, r2
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 fce5 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 80010f2:	4601      	mov	r1, r0
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	2071      	movs	r0, #113	; 0x71
 80010fa:	f002 fe6f 	bl	8003ddc <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80010fe:	e006      	b.n	800110e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	3301      	adds	r3, #1
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b07      	cmp	r3, #7
 800110a:	d9dd      	bls.n	80010c8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000030 	.word	0x20000030

0800111c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800112c:	f001 fe8c 	bl	8002e48 <vPortEnterCritical>
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001136:	b25b      	sxtb	r3, r3
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d103      	bne.n	8001146 <vQueueWaitForMessageRestricted+0x2a>
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800114c:	b25b      	sxtb	r3, r3
 800114e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001152:	d103      	bne.n	800115c <vQueueWaitForMessageRestricted+0x40>
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800115c:	f001 fea4 	bl	8002ea8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001164:	2b00      	cmp	r3, #0
 8001166:	d106      	bne.n	8001176 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3324      	adds	r3, #36	; 0x24
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fcb7 	bl	8001ae4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ff1e 	bl	8000fb8 <prvUnlockQueue>
    }
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af04      	add	r7, sp, #16
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	4613      	mov	r3, r2
 8001192:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4618      	mov	r0, r3
 800119a:	f001 ff7f 	bl	800309c <pvPortMalloc>
 800119e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00e      	beq.n	80011c4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80011a6:	2058      	movs	r0, #88	; 0x58
 80011a8:	f001 ff78 	bl	800309c <pvPortMalloc>
 80011ac:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	631a      	str	r2, [r3, #48]	; 0x30
 80011ba:	e005      	b.n	80011c8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80011bc:	6978      	ldr	r0, [r7, #20]
 80011be:	f002 f84d 	bl	800325c <vPortFree>
 80011c2:	e001      	b.n	80011c8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d013      	beq.n	80011f6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80011ce:	88fa      	ldrh	r2, [r7, #6]
 80011d0:	2300      	movs	r3, #0
 80011d2:	9303      	str	r3, [sp, #12]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68b9      	ldr	r1, [r7, #8]
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 f80e 	bl	8001206 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80011ea:	69f8      	ldr	r0, [r7, #28]
 80011ec:	f000 f8a2 	bl	8001334 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	e002      	b.n	80011fc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80011fc:	69bb      	ldr	r3, [r7, #24]
    }
 80011fe:	4618      	mov	r0, r3
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b088      	sub	sp, #32
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001216:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	461a      	mov	r2, r3
 800121e:	21a5      	movs	r1, #165	; 0xa5
 8001220:	f005 fcd0 	bl	8006bc4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800122e:	3b01      	subs	r3, #1
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	f023 0307 	bic.w	r3, r3, #7
 800123c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00a      	beq.n	800125e <prvInitialiseNewTask+0x58>
        __asm volatile
 8001248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800124c:	f383 8811 	msr	BASEPRI, r3
 8001250:	f3bf 8f6f 	isb	sy
 8001254:	f3bf 8f4f 	dsb	sy
 8001258:	617b      	str	r3, [r7, #20]
    }
 800125a:	bf00      	nop
 800125c:	e7fe      	b.n	800125c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d01f      	beq.n	80012a4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	e012      	b.n	8001290 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	4413      	add	r3, r2
 8001270:	7819      	ldrb	r1, [r3, #0]
 8001272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	4413      	add	r3, r2
 8001278:	3334      	adds	r3, #52	; 0x34
 800127a:	460a      	mov	r2, r1
 800127c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d006      	beq.n	8001298 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3301      	adds	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	2b09      	cmp	r3, #9
 8001294:	d9e9      	bls.n	800126a <prvInitialiseNewTask+0x64>
 8001296:	e000      	b.n	800129a <prvInitialiseNewTask+0x94>
            {
                break;
 8001298:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800129a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129c:	2200      	movs	r2, #0
 800129e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80012a2:	e003      	b.n	80012ac <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80012a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d901      	bls.n	80012b6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012b2:	2304      	movs	r3, #4
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80012b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80012bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012c0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80012c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c4:	2200      	movs	r2, #0
 80012c6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80012c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ca:	3304      	adds	r3, #4
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f96b 	bl	80005a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80012d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d4:	3318      	adds	r3, #24
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f966 	bl	80005a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80012dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012e0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e4:	f1c3 0205 	rsb	r2, r3, #5
 80012e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ea:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80012ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80012f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f4:	3350      	adds	r3, #80	; 0x50
 80012f6:	2204      	movs	r2, #4
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f005 fc62 	bl	8006bc4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001302:	3354      	adds	r3, #84	; 0x54
 8001304:	2201      	movs	r2, #1
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f005 fc5b 	bl	8006bc4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	68f9      	ldr	r1, [r7, #12]
 8001312:	69b8      	ldr	r0, [r7, #24]
 8001314:	f001 fc6c 	bl	8002bf0 <pxPortInitialiseStack>
 8001318:	4602      	mov	r2, r0
 800131a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800131e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001328:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800132a:	bf00      	nop
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001334:	b5b0      	push	{r4, r5, r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af02      	add	r7, sp, #8
 800133a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800133c:	f001 fd84 	bl	8002e48 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001340:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <prvAddNewTaskToReadyList+0xfc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a3a      	ldr	r2, [pc, #232]	; (8001430 <prvAddNewTaskToReadyList+0xfc>)
 8001348:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800134a:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <prvAddNewTaskToReadyList+0x100>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d109      	bne.n	8001366 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001352:	4a38      	ldr	r2, [pc, #224]	; (8001434 <prvAddNewTaskToReadyList+0x100>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001358:	4b35      	ldr	r3, [pc, #212]	; (8001430 <prvAddNewTaskToReadyList+0xfc>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d110      	bne.n	8001382 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001360:	f000 fcf4 	bl	8001d4c <prvInitialiseTaskLists>
 8001364:	e00d      	b.n	8001382 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001366:	4b34      	ldr	r3, [pc, #208]	; (8001438 <prvAddNewTaskToReadyList+0x104>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d109      	bne.n	8001382 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800136e:	4b31      	ldr	r3, [pc, #196]	; (8001434 <prvAddNewTaskToReadyList+0x100>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	429a      	cmp	r2, r3
 800137a:	d802      	bhi.n	8001382 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800137c:	4a2d      	ldr	r2, [pc, #180]	; (8001434 <prvAddNewTaskToReadyList+0x100>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001382:	4b2e      	ldr	r3, [pc, #184]	; (800143c <prvAddNewTaskToReadyList+0x108>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	4a2c      	ldr	r2, [pc, #176]	; (800143c <prvAddNewTaskToReadyList+0x108>)
 800138a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800138c:	4b2b      	ldr	r3, [pc, #172]	; (800143c <prvAddNewTaskToReadyList+0x108>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d016      	beq.n	80013c8 <prvAddNewTaskToReadyList+0x94>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	f003 fa67 	bl	8004870 <SEGGER_SYSVIEW_OnTaskCreate>
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	461d      	mov	r5, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	461c      	mov	r4, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	1ae3      	subs	r3, r4, r3
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	462b      	mov	r3, r5
 80013c4:	f002 f868 	bl	8003498 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fad4 	bl	8004978 <SEGGER_SYSVIEW_OnTaskStartReady>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	2201      	movs	r2, #1
 80013d6:	409a      	lsls	r2, r3
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <prvAddNewTaskToReadyList+0x10c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4313      	orrs	r3, r2
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <prvAddNewTaskToReadyList+0x10c>)
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4a15      	ldr	r2, [pc, #84]	; (8001444 <prvAddNewTaskToReadyList+0x110>)
 80013f0:	441a      	add	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3304      	adds	r3, #4
 80013f6:	4619      	mov	r1, r3
 80013f8:	4610      	mov	r0, r2
 80013fa:	f7ff f8e2 	bl	80005c2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80013fe:	f001 fd53 	bl	8002ea8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <prvAddNewTaskToReadyList+0x104>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00e      	beq.n	8001428 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <prvAddNewTaskToReadyList+0x100>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	429a      	cmp	r2, r3
 8001416:	d207      	bcs.n	8001428 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <prvAddNewTaskToReadyList+0x114>)
 800141a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	f3bf 8f4f 	dsb	sy
 8001424:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bdb0      	pop	{r4, r5, r7, pc}
 8001430:	20000148 	.word	0x20000148
 8001434:	20000070 	.word	0x20000070
 8001438:	20000154 	.word	0x20000154
 800143c:	20000164 	.word	0x20000164
 8001440:	20000150 	.word	0x20000150
 8001444:	20000074 	.word	0x20000074
 8001448:	e000ed04 	.word	0xe000ed04

0800144c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8001454:	f001 fcf8 	bl	8002e48 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <vTaskDelete+0x18>
 800145e:	4b46      	ldr	r3, [pc, #280]	; (8001578 <vTaskDelete+0x12c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	e000      	b.n	8001466 <vTaskDelete+0x1a>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3304      	adds	r3, #4
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f905 	bl	800067c <uxListRemove>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d115      	bne.n	80014a4 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800147c:	493f      	ldr	r1, [pc, #252]	; (800157c <vTaskDelete+0x130>)
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10a      	bne.n	80014a4 <vTaskDelete+0x58>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001492:	2201      	movs	r2, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43da      	mvns	r2, r3
 800149a:	4b39      	ldr	r3, [pc, #228]	; (8001580 <vTaskDelete+0x134>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4013      	ands	r3, r2
 80014a0:	4a37      	ldr	r2, [pc, #220]	; (8001580 <vTaskDelete+0x134>)
 80014a2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3318      	adds	r3, #24
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f8e3 	bl	800067c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <vTaskDelete+0x138>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a31      	ldr	r2, [pc, #196]	; (8001584 <vTaskDelete+0x138>)
 80014be:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80014c0:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <vTaskDelete+0x12c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d118      	bne.n	80014fc <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3304      	adds	r3, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	482d      	ldr	r0, [pc, #180]	; (8001588 <vTaskDelete+0x13c>)
 80014d2:	f7ff f876 	bl	80005c2 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80014d6:	4b2d      	ldr	r3, [pc, #180]	; (800158c <vTaskDelete+0x140>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	4a2b      	ldr	r2, [pc, #172]	; (800158c <vTaskDelete+0x140>)
 80014de:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 faea 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4619      	mov	r1, r3
 80014ec:	2022      	movs	r0, #34	; 0x22
 80014ee:	f002 fc39 	bl	8003d64 <SEGGER_SYSVIEW_RecordU32>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 f837 	bl	8003568 <SYSVIEW_DeleteTask>
 80014fa:	e016      	b.n	800152a <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <vTaskDelete+0x144>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3b01      	subs	r3, #1
 8001502:	4a23      	ldr	r2, [pc, #140]	; (8001590 <vTaskDelete+0x144>)
 8001504:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4618      	mov	r0, r3
 800150a:	f003 fad7 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 800150e:	4603      	mov	r3, r0
 8001510:	4619      	mov	r1, r3
 8001512:	2022      	movs	r0, #34	; 0x22
 8001514:	f002 fc26 	bl	8003d64 <SEGGER_SYSVIEW_RecordU32>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4618      	mov	r0, r3
 800151c:	f002 f824 	bl	8003568 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 fc81 	bl	8001e28 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8001526:	f000 fc8f 	bl	8001e48 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800152a:	f001 fcbd 	bl	8002ea8 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <vTaskDelete+0x148>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d01b      	beq.n	800156e <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <vTaskDelete+0x12c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d116      	bne.n	800156e <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <vTaskDelete+0x14c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00a      	beq.n	800155e <vTaskDelete+0x112>
        __asm volatile
 8001548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800154c:	f383 8811 	msr	BASEPRI, r3
 8001550:	f3bf 8f6f 	isb	sy
 8001554:	f3bf 8f4f 	dsb	sy
 8001558:	60bb      	str	r3, [r7, #8]
    }
 800155a:	bf00      	nop
 800155c:	e7fe      	b.n	800155c <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <vTaskDelete+0x150>)
 8001560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	f3bf 8f4f 	dsb	sy
 800156a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000070 	.word	0x20000070
 800157c:	20000074 	.word	0x20000074
 8001580:	20000150 	.word	0x20000150
 8001584:	20000164 	.word	0x20000164
 8001588:	2000011c 	.word	0x2000011c
 800158c:	20000130 	.word	0x20000130
 8001590:	20000148 	.word	0x20000148
 8001594:	20000154 	.word	0x20000154
 8001598:	20000170 	.word	0x20000170
 800159c:	e000ed04 	.word	0xe000ed04

080015a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d01b      	beq.n	80015ea <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <vTaskDelay+0x68>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00a      	beq.n	80015d0 <vTaskDelay+0x30>
        __asm volatile
 80015ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015be:	f383 8811 	msr	BASEPRI, r3
 80015c2:	f3bf 8f6f 	isb	sy
 80015c6:	f3bf 8f4f 	dsb	sy
 80015ca:	60bb      	str	r3, [r7, #8]
    }
 80015cc:	bf00      	nop
 80015ce:	e7fe      	b.n	80015ce <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80015d0:	f000 f880 	bl	80016d4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	2023      	movs	r0, #35	; 0x23
 80015d8:	f002 fbc4 	bl	8003d64 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80015dc:	2100      	movs	r1, #0
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 ff7c 	bl	80024dc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80015e4:	f000 f884 	bl	80016f0 <xTaskResumeAll>
 80015e8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d107      	bne.n	8001600 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <vTaskDelay+0x6c>)
 80015f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	f3bf 8f4f 	dsb	sy
 80015fc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000170 	.word	0x20000170
 800160c:	e000ed04 	.word	0xe000ed04

08001610 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001616:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <vTaskStartScheduler+0xa4>)
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	2300      	movs	r3, #0
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2300      	movs	r3, #0
 8001620:	2282      	movs	r2, #130	; 0x82
 8001622:	4925      	ldr	r1, [pc, #148]	; (80016b8 <vTaskStartScheduler+0xa8>)
 8001624:	4825      	ldr	r0, [pc, #148]	; (80016bc <vTaskStartScheduler+0xac>)
 8001626:	f7ff fdad 	bl	8001184 <xTaskCreate>
 800162a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d102      	bne.n	8001638 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001632:	f000 ffcb 	bl	80025cc <xTimerCreateTimerTask>
 8001636:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d124      	bne.n	8001688 <vTaskStartScheduler+0x78>
        __asm volatile
 800163e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001642:	f383 8811 	msr	BASEPRI, r3
 8001646:	f3bf 8f6f 	isb	sy
 800164a:	f3bf 8f4f 	dsb	sy
 800164e:	60bb      	str	r3, [r7, #8]
    }
 8001650:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <vTaskStartScheduler+0xb0>)
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <vTaskStartScheduler+0xb4>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <vTaskStartScheduler+0xb8>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <vTaskStartScheduler+0xbc>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <vTaskStartScheduler+0xa4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d102      	bne.n	8001678 <vTaskStartScheduler+0x68>
 8001672:	f003 f8e1 	bl	8004838 <SEGGER_SYSVIEW_OnIdle>
 8001676:	e004      	b.n	8001682 <vTaskStartScheduler+0x72>
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <vTaskStartScheduler+0xbc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f003 f939 	bl	80048f4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001682:	f001 fb3f 	bl	8002d04 <xPortStartScheduler>
 8001686:	e00e      	b.n	80016a6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168e:	d10a      	bne.n	80016a6 <vTaskStartScheduler+0x96>
        __asm volatile
 8001690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001694:	f383 8811 	msr	BASEPRI, r3
 8001698:	f3bf 8f6f 	isb	sy
 800169c:	f3bf 8f4f 	dsb	sy
 80016a0:	607b      	str	r3, [r7, #4]
    }
 80016a2:	bf00      	nop
 80016a4:	e7fe      	b.n	80016a4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <vTaskStartScheduler+0xc0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000016c 	.word	0x2000016c
 80016b8:	08006bec 	.word	0x08006bec
 80016bc:	08001d1d 	.word	0x08001d1d
 80016c0:	20000168 	.word	0x20000168
 80016c4:	20000154 	.word	0x20000154
 80016c8:	2000014c 	.word	0x2000014c
 80016cc:	20000070 	.word	0x20000070
 80016d0:	20000000 	.word	0x20000000

080016d4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <vTaskSuspendAll+0x18>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	4a03      	ldr	r2, [pc, #12]	; (80016ec <vTaskSuspendAll+0x18>)
 80016e0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20000170 	.word	0x20000170

080016f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80016fe:	4b43      	ldr	r3, [pc, #268]	; (800180c <xTaskResumeAll+0x11c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10a      	bne.n	800171c <xTaskResumeAll+0x2c>
        __asm volatile
 8001706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800170a:	f383 8811 	msr	BASEPRI, r3
 800170e:	f3bf 8f6f 	isb	sy
 8001712:	f3bf 8f4f 	dsb	sy
 8001716:	603b      	str	r3, [r7, #0]
    }
 8001718:	bf00      	nop
 800171a:	e7fe      	b.n	800171a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800171c:	f001 fb94 	bl	8002e48 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001720:	4b3a      	ldr	r3, [pc, #232]	; (800180c <xTaskResumeAll+0x11c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	3b01      	subs	r3, #1
 8001726:	4a39      	ldr	r2, [pc, #228]	; (800180c <xTaskResumeAll+0x11c>)
 8001728:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800172a:	4b38      	ldr	r3, [pc, #224]	; (800180c <xTaskResumeAll+0x11c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d165      	bne.n	80017fe <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001732:	4b37      	ldr	r3, [pc, #220]	; (8001810 <xTaskResumeAll+0x120>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d061      	beq.n	80017fe <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800173a:	e032      	b.n	80017a2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800173c:	4b35      	ldr	r3, [pc, #212]	; (8001814 <xTaskResumeAll+0x124>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3318      	adds	r3, #24
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe ff97 	bl	800067c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3304      	adds	r3, #4
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe ff92 	bl	800067c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4618      	mov	r0, r3
 800175c:	f003 f90c 	bl	8004978 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	2201      	movs	r2, #1
 8001766:	409a      	lsls	r2, r3
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <xTaskResumeAll+0x128>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4313      	orrs	r3, r2
 800176e:	4a2a      	ldr	r2, [pc, #168]	; (8001818 <xTaskResumeAll+0x128>)
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4a27      	ldr	r2, [pc, #156]	; (800181c <xTaskResumeAll+0x12c>)
 8001780:	441a      	add	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3304      	adds	r3, #4
 8001786:	4619      	mov	r1, r3
 8001788:	4610      	mov	r0, r2
 800178a:	f7fe ff1a 	bl	80005c2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <xTaskResumeAll+0x130>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	429a      	cmp	r2, r3
 800179a:	d302      	bcc.n	80017a2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <xTaskResumeAll+0x134>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <xTaskResumeAll+0x124>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1c8      	bne.n	800173c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80017b0:	f000 fb4a 	bl	8001e48 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80017b4:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <xTaskResumeAll+0x138>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d010      	beq.n	80017e2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80017c0:	f000 f846 	bl	8001850 <xTaskIncrementTick>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <xTaskResumeAll+0x134>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f1      	bne.n	80017c0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <xTaskResumeAll+0x138>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <xTaskResumeAll+0x134>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80017ea:	2301      	movs	r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <xTaskResumeAll+0x13c>)
 80017f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	f3bf 8f4f 	dsb	sy
 80017fa:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80017fe:	f001 fb53 	bl	8002ea8 <vPortExitCritical>

    return xAlreadyYielded;
 8001802:	68bb      	ldr	r3, [r7, #8]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000170 	.word	0x20000170
 8001810:	20000148 	.word	0x20000148
 8001814:	20000108 	.word	0x20000108
 8001818:	20000150 	.word	0x20000150
 800181c:	20000074 	.word	0x20000074
 8001820:	20000070 	.word	0x20000070
 8001824:	2000015c 	.word	0x2000015c
 8001828:	20000158 	.word	0x20000158
 800182c:	e000ed04 	.word	0xe000ed04

08001830 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <xTaskGetTickCount+0x1c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800183c:	687b      	ldr	r3, [r7, #4]
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	2000014c 	.word	0x2000014c

08001850 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800185a:	4b50      	ldr	r3, [pc, #320]	; (800199c <xTaskIncrementTick+0x14c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 8092 	bne.w	8001988 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001864:	4b4e      	ldr	r3, [pc, #312]	; (80019a0 <xTaskIncrementTick+0x150>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800186c:	4a4c      	ldr	r2, [pc, #304]	; (80019a0 <xTaskIncrementTick+0x150>)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d120      	bne.n	80018ba <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001878:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <xTaskIncrementTick+0x154>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00a      	beq.n	8001898 <xTaskIncrementTick+0x48>
        __asm volatile
 8001882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001886:	f383 8811 	msr	BASEPRI, r3
 800188a:	f3bf 8f6f 	isb	sy
 800188e:	f3bf 8f4f 	dsb	sy
 8001892:	603b      	str	r3, [r7, #0]
    }
 8001894:	bf00      	nop
 8001896:	e7fe      	b.n	8001896 <xTaskIncrementTick+0x46>
 8001898:	4b42      	ldr	r3, [pc, #264]	; (80019a4 <xTaskIncrementTick+0x154>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b42      	ldr	r3, [pc, #264]	; (80019a8 <xTaskIncrementTick+0x158>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a40      	ldr	r2, [pc, #256]	; (80019a4 <xTaskIncrementTick+0x154>)
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4a40      	ldr	r2, [pc, #256]	; (80019a8 <xTaskIncrementTick+0x158>)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <xTaskIncrementTick+0x15c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	4a3e      	ldr	r2, [pc, #248]	; (80019ac <xTaskIncrementTick+0x15c>)
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	f000 fac7 	bl	8001e48 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <xTaskIncrementTick+0x160>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d34c      	bcc.n	800195e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018c4:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <xTaskIncrementTick+0x154>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d104      	bne.n	80018d8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018ce:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <xTaskIncrementTick+0x160>)
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	601a      	str	r2, [r3, #0]
                    break;
 80018d6:	e042      	b.n	800195e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018d8:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <xTaskIncrementTick+0x154>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d203      	bcs.n	80018f8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80018f0:	4a2f      	ldr	r2, [pc, #188]	; (80019b0 <xTaskIncrementTick+0x160>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80018f6:	e032      	b.n	800195e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	3304      	adds	r3, #4
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe febd 	bl	800067c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	3318      	adds	r3, #24
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe feb4 	bl	800067c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4618      	mov	r0, r3
 8001918:	f003 f82e 	bl	8004978 <SEGGER_SYSVIEW_OnTaskStartReady>
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	2201      	movs	r2, #1
 8001922:	409a      	lsls	r2, r3
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <xTaskIncrementTick+0x164>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4313      	orrs	r3, r2
 800192a:	4a22      	ldr	r2, [pc, #136]	; (80019b4 <xTaskIncrementTick+0x164>)
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4a1f      	ldr	r2, [pc, #124]	; (80019b8 <xTaskIncrementTick+0x168>)
 800193c:	441a      	add	r2, r3
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3304      	adds	r3, #4
 8001942:	4619      	mov	r1, r3
 8001944:	4610      	mov	r0, r2
 8001946:	f7fe fe3c 	bl	80005c2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <xTaskIncrementTick+0x16c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	429a      	cmp	r2, r3
 8001956:	d3b5      	bcc.n	80018c4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001958:	2301      	movs	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800195c:	e7b2      	b.n	80018c4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800195e:	4b17      	ldr	r3, [pc, #92]	; (80019bc <xTaskIncrementTick+0x16c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001964:	4914      	ldr	r1, [pc, #80]	; (80019b8 <xTaskIncrementTick+0x168>)
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d901      	bls.n	800197a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8001976:	2301      	movs	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <xTaskIncrementTick+0x170>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8001982:	2301      	movs	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e004      	b.n	8001992 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <xTaskIncrementTick+0x174>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <xTaskIncrementTick+0x174>)
 8001990:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001992:	697b      	ldr	r3, [r7, #20]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000170 	.word	0x20000170
 80019a0:	2000014c 	.word	0x2000014c
 80019a4:	20000100 	.word	0x20000100
 80019a8:	20000104 	.word	0x20000104
 80019ac:	20000160 	.word	0x20000160
 80019b0:	20000168 	.word	0x20000168
 80019b4:	20000150 	.word	0x20000150
 80019b8:	20000074 	.word	0x20000074
 80019bc:	20000070 	.word	0x20000070
 80019c0:	2000015c 	.word	0x2000015c
 80019c4:	20000158 	.word	0x20000158

080019c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80019ce:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <vTaskSwitchContext+0xbc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80019d6:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <vTaskSwitchContext+0xc0>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80019dc:	e04d      	b.n	8001a7a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80019de:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <vTaskSwitchContext+0xc0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019e4:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <vTaskSwitchContext+0xc4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80019f2:	7afb      	ldrb	r3, [r7, #11]
 80019f4:	f1c3 031f 	rsb	r3, r3, #31
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	4925      	ldr	r1, [pc, #148]	; (8001a90 <vTaskSwitchContext+0xc8>)
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10a      	bne.n	8001a24 <vTaskSwitchContext+0x5c>
        __asm volatile
 8001a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a12:	f383 8811 	msr	BASEPRI, r3
 8001a16:	f3bf 8f6f 	isb	sy
 8001a1a:	f3bf 8f4f 	dsb	sy
 8001a1e:	607b      	str	r3, [r7, #4]
    }
 8001a20:	bf00      	nop
 8001a22:	e7fe      	b.n	8001a22 <vTaskSwitchContext+0x5a>
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <vTaskSwitchContext+0xc8>)
 8001a30:	4413      	add	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	3308      	adds	r3, #8
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d104      	bne.n	8001a54 <vTaskSwitchContext+0x8c>
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <vTaskSwitchContext+0xcc>)
 8001a5c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <vTaskSwitchContext+0xcc>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <vTaskSwitchContext+0xd0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d102      	bne.n	8001a70 <vTaskSwitchContext+0xa8>
 8001a6a:	f002 fee5 	bl	8004838 <SEGGER_SYSVIEW_OnIdle>
}
 8001a6e:	e004      	b.n	8001a7a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <vTaskSwitchContext+0xcc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 ff3d 	bl	80048f4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000170 	.word	0x20000170
 8001a88:	2000015c 	.word	0x2000015c
 8001a8c:	20000150 	.word	0x20000150
 8001a90:	20000074 	.word	0x20000074
 8001a94:	20000070 	.word	0x20000070
 8001a98:	2000016c 	.word	0x2000016c

08001a9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10a      	bne.n	8001ac2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab0:	f383 8811 	msr	BASEPRI, r3
 8001ab4:	f3bf 8f6f 	isb	sy
 8001ab8:	f3bf 8f4f 	dsb	sy
 8001abc:	60fb      	str	r3, [r7, #12]
    }
 8001abe:	bf00      	nop
 8001ac0:	e7fe      	b.n	8001ac0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <vTaskPlaceOnEventList+0x44>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3318      	adds	r3, #24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7fe fd9d 	bl	800060a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	6838      	ldr	r0, [r7, #0]
 8001ad4:	f000 fd02 	bl	80024dc <prvAddCurrentTaskToDelayedList>
}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000070 	.word	0x20000070

08001ae4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10a      	bne.n	8001b0c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afa:	f383 8811 	msr	BASEPRI, r3
 8001afe:	f3bf 8f6f 	isb	sy
 8001b02:	f3bf 8f4f 	dsb	sy
 8001b06:	617b      	str	r3, [r7, #20]
    }
 8001b08:	bf00      	nop
 8001b0a:	e7fe      	b.n	8001b0a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <vTaskPlaceOnEventListRestricted+0x58>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3318      	adds	r3, #24
 8001b12:	4619      	mov	r1, r3
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7fe fd54 	bl	80005c2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295
 8001b24:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001b26:	2024      	movs	r0, #36	; 0x24
 8001b28:	f002 f8fe 	bl	8003d28 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	68b8      	ldr	r0, [r7, #8]
 8001b30:	f000 fcd4 	bl	80024dc <prvAddCurrentTaskToDelayedList>
    }
 8001b34:	bf00      	nop
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000070 	.word	0x20000070

08001b40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10a      	bne.n	8001b6c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f3bf 8f4f 	dsb	sy
 8001b66:	60fb      	str	r3, [r7, #12]
    }
 8001b68:	bf00      	nop
 8001b6a:	e7fe      	b.n	8001b6a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	3318      	adds	r3, #24
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fd83 	bl	800067c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <xTaskRemoveFromEventList+0xb4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d120      	bne.n	8001bc0 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	3304      	adds	r3, #4
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fd7a 	bl	800067c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fef4 	bl	8004978 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	2201      	movs	r2, #1
 8001b96:	409a      	lsls	r2, r3
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <xTaskRemoveFromEventList+0xb8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	4a16      	ldr	r2, [pc, #88]	; (8001bf8 <xTaskRemoveFromEventList+0xb8>)
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <xTaskRemoveFromEventList+0xbc>)
 8001bb0:	441a      	add	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4610      	mov	r0, r2
 8001bba:	f7fe fd02 	bl	80005c2 <vListInsertEnd>
 8001bbe:	e005      	b.n	8001bcc <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	3318      	adds	r3, #24
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480e      	ldr	r0, [pc, #56]	; (8001c00 <xTaskRemoveFromEventList+0xc0>)
 8001bc8:	f7fe fcfb 	bl	80005c2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <xTaskRemoveFromEventList+0xc4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d905      	bls.n	8001be6 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <xTaskRemoveFromEventList+0xc8>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	e001      	b.n	8001bea <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001bea:	697b      	ldr	r3, [r7, #20]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000170 	.word	0x20000170
 8001bf8:	20000150 	.word	0x20000150
 8001bfc:	20000074 	.word	0x20000074
 8001c00:	20000108 	.word	0x20000108
 8001c04:	20000070 	.word	0x20000070
 8001c08:	2000015c 	.word	0x2000015c

08001c0c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <vTaskInternalSetTimeOutState+0x24>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <vTaskInternalSetTimeOutState+0x28>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	605a      	str	r2, [r3, #4]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	20000160 	.word	0x20000160
 8001c34:	2000014c 	.word	0x2000014c

08001c38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10a      	bne.n	8001c5e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c4c:	f383 8811 	msr	BASEPRI, r3
 8001c50:	f3bf 8f6f 	isb	sy
 8001c54:	f3bf 8f4f 	dsb	sy
 8001c58:	613b      	str	r3, [r7, #16]
    }
 8001c5a:	bf00      	nop
 8001c5c:	e7fe      	b.n	8001c5c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10a      	bne.n	8001c7a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c68:	f383 8811 	msr	BASEPRI, r3
 8001c6c:	f3bf 8f6f 	isb	sy
 8001c70:	f3bf 8f4f 	dsb	sy
 8001c74:	60fb      	str	r3, [r7, #12]
    }
 8001c76:	bf00      	nop
 8001c78:	e7fe      	b.n	8001c78 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001c7a:	f001 f8e5 	bl	8002e48 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <xTaskCheckForTimeOut+0xc4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c96:	d102      	bne.n	8001c9e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	e026      	b.n	8001cec <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <xTaskCheckForTimeOut+0xc8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d00a      	beq.n	8001cc0 <xTaskCheckForTimeOut+0x88>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d305      	bcc.n	8001cc0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	e015      	b.n	8001cec <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d20b      	bcs.n	8001ce2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	1ad2      	subs	r2, r2, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ff98 	bl	8001c0c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	e004      	b.n	8001cec <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001cec:	f001 f8dc 	bl	8002ea8 <vPortExitCritical>

    return xReturn;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000014c 	.word	0x2000014c
 8001d00:	20000160 	.word	0x20000160

08001d04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <vTaskMissedYield+0x14>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	2000015c 	.word	0x2000015c

08001d1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001d24:	f000 f852 	bl	8001dcc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <prvIdleTask+0x28>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d9f9      	bls.n	8001d24 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <prvIdleTask+0x2c>)
 8001d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	f3bf 8f4f 	dsb	sy
 8001d3c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001d40:	e7f0      	b.n	8001d24 <prvIdleTask+0x8>
 8001d42:	bf00      	nop
 8001d44:	20000074 	.word	0x20000074
 8001d48:	e000ed04 	.word	0xe000ed04

08001d4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	e00c      	b.n	8001d72 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4a12      	ldr	r2, [pc, #72]	; (8001dac <prvInitialiseTaskLists+0x60>)
 8001d64:	4413      	add	r3, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbfe 	bl	8000568 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d9ef      	bls.n	8001d58 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001d78:	480d      	ldr	r0, [pc, #52]	; (8001db0 <prvInitialiseTaskLists+0x64>)
 8001d7a:	f7fe fbf5 	bl	8000568 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001d7e:	480d      	ldr	r0, [pc, #52]	; (8001db4 <prvInitialiseTaskLists+0x68>)
 8001d80:	f7fe fbf2 	bl	8000568 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001d84:	480c      	ldr	r0, [pc, #48]	; (8001db8 <prvInitialiseTaskLists+0x6c>)
 8001d86:	f7fe fbef 	bl	8000568 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001d8a:	480c      	ldr	r0, [pc, #48]	; (8001dbc <prvInitialiseTaskLists+0x70>)
 8001d8c:	f7fe fbec 	bl	8000568 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001d90:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <prvInitialiseTaskLists+0x74>)
 8001d92:	f7fe fbe9 	bl	8000568 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <prvInitialiseTaskLists+0x78>)
 8001d98:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <prvInitialiseTaskLists+0x64>)
 8001d9a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <prvInitialiseTaskLists+0x7c>)
 8001d9e:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <prvInitialiseTaskLists+0x68>)
 8001da0:	601a      	str	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000074 	.word	0x20000074
 8001db0:	200000d8 	.word	0x200000d8
 8001db4:	200000ec 	.word	0x200000ec
 8001db8:	20000108 	.word	0x20000108
 8001dbc:	2000011c 	.word	0x2000011c
 8001dc0:	20000134 	.word	0x20000134
 8001dc4:	20000100 	.word	0x20000100
 8001dc8:	20000104 	.word	0x20000104

08001dcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001dd2:	e019      	b.n	8001e08 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001dd4:	f001 f838 	bl	8002e48 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dd8:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <prvCheckTasksWaitingTermination+0x50>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3304      	adds	r3, #4
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fc49 	bl	800067c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <prvCheckTasksWaitingTermination+0x54>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <prvCheckTasksWaitingTermination+0x54>)
 8001df2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <prvCheckTasksWaitingTermination+0x58>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <prvCheckTasksWaitingTermination+0x58>)
 8001dfc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001dfe:	f001 f853 	bl	8002ea8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f810 	bl	8001e28 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <prvCheckTasksWaitingTermination+0x58>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1e1      	bne.n	8001dd4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000011c 	.word	0x2000011c
 8001e20:	20000148 	.word	0x20000148
 8001e24:	20000130 	.word	0x20000130

08001e28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 fa11 	bl	800325c <vPortFree>
                vPortFree( pxTCB );
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f001 fa0e 	bl	800325c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <prvResetNextTaskUnblockTime+0x30>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d104      	bne.n	8001e60 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <prvResetNextTaskUnblockTime+0x34>)
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001e5e:	e005      	b.n	8001e6c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <prvResetNextTaskUnblockTime+0x30>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <prvResetNextTaskUnblockTime+0x34>)
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000100 	.word	0x20000100
 8001e7c:	20000168 	.word	0x20000168

08001e80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <xTaskGetSchedulerState+0x34>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	e008      	b.n	8001ea6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <xTaskGetSchedulerState+0x38>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	e001      	b.n	8001ea6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001ea6:	687b      	ldr	r3, [r7, #4]
    }
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	20000154 	.word	0x20000154
 8001eb8:	20000170 	.word	0x20000170

08001ebc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d068      	beq.n	8001fa4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001ed2:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <xTaskPriorityDisinherit+0xf4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d00a      	beq.n	8001ef2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee0:	f383 8811 	msr	BASEPRI, r3
 8001ee4:	f3bf 8f6f 	isb	sy
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	60fb      	str	r3, [r7, #12]
    }
 8001eee:	bf00      	nop
 8001ef0:	e7fe      	b.n	8001ef0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10a      	bne.n	8001f10 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efe:	f383 8811 	msr	BASEPRI, r3
 8001f02:	f3bf 8f6f 	isb	sy
 8001f06:	f3bf 8f4f 	dsb	sy
 8001f0a:	60bb      	str	r3, [r7, #8]
    }
 8001f0c:	bf00      	nop
 8001f0e:	e7fe      	b.n	8001f0e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f14:	1e5a      	subs	r2, r3, #1
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d03e      	beq.n	8001fa4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d13a      	bne.n	8001fa4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	3304      	adds	r3, #4
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fba2 	bl	800067c <uxListRemove>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10a      	bne.n	8001f54 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	2201      	movs	r2, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43da      	mvns	r2, r3
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <xTaskPriorityDisinherit+0xf8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <xTaskPriorityDisinherit+0xf8>)
 8001f52:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4619      	mov	r1, r3
 8001f58:	204a      	movs	r0, #74	; 0x4a
 8001f5a:	f001 ff03 	bl	8003d64 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6a:	f1c3 0205 	rsb	r2, r3, #5
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	2201      	movs	r2, #1
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <xTaskPriorityDisinherit+0xf8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	4a0c      	ldr	r2, [pc, #48]	; (8001fb4 <xTaskPriorityDisinherit+0xf8>)
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <xTaskPriorityDisinherit+0xfc>)
 8001f92:	441a      	add	r2, r3
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	3304      	adds	r3, #4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	f7fe fb11 	bl	80005c2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001fa4:	697b      	ldr	r3, [r7, #20]
    }
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000070 	.word	0x20000070
 8001fb4:	20000150 	.word	0x20000150
 8001fb8:	20000074 	.word	0x20000074

08001fbc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00a      	beq.n	8001fe6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8001fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd4:	f383 8811 	msr	BASEPRI, r3
 8001fd8:	f3bf 8f6f 	isb	sy
 8001fdc:	f3bf 8f4f 	dsb	sy
 8001fe0:	613b      	str	r3, [r7, #16]
    }
 8001fe2:	bf00      	nop
 8001fe4:	e7fe      	b.n	8001fe4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001fe6:	f000 ff2f 	bl	8002e48 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001fea:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <xTaskGenericNotifyWait+0x108>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3354      	adds	r3, #84	; 0x54
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d022      	beq.n	8002042 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001ffc:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <xTaskGenericNotifyWait+0x108>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	3214      	adds	r2, #20
 8002004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	43d2      	mvns	r2, r2
 800200c:	4011      	ands	r1, r2
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	3214      	adds	r2, #20
 8002012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002016:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <xTaskGenericNotifyWait+0x108>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4413      	add	r3, r2
 800201e:	3354      	adds	r3, #84	; 0x54
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800202a:	2101      	movs	r1, #1
 800202c:	6a38      	ldr	r0, [r7, #32]
 800202e:	f000 fa55 	bl	80024dc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002032:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <xTaskGenericNotifyWait+0x10c>)
 8002034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	f3bf 8f4f 	dsb	sy
 800203e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002042:	f000 ff31 	bl	8002ea8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002046:	f000 feff 	bl	8002e48 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	2040      	movs	r0, #64	; 0x40
 8002058:	f001 ff90 	bl	8003f7c <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002062:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <xTaskGenericNotifyWait+0x108>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	3214      	adds	r2, #20
 800206a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <xTaskGenericNotifyWait+0x108>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4413      	add	r3, r2
 800207a:	3354      	adds	r3, #84	; 0x54
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d002      	beq.n	800208a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	e00e      	b.n	80020a8 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <xTaskGenericNotifyWait+0x108>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	3214      	adds	r2, #20
 8002092:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	43d2      	mvns	r2, r2
 800209a:	4011      	ands	r1, r2
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	3214      	adds	r2, #20
 80020a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80020a4:	2301      	movs	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <xTaskGenericNotifyWait+0x108>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	3354      	adds	r3, #84	; 0x54
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80020b6:	f000 fef7 	bl	8002ea8 <vPortExitCritical>

        return xReturn;
 80020ba:	697b      	ldr	r3, [r7, #20]
    }
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000070 	.word	0x20000070
 80020c8:	e000ed04 	.word	0xe000ed04

080020cc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08e      	sub	sp, #56	; 0x38
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80020da:	2301      	movs	r3, #1
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <xTaskGenericNotify+0x2e>
        __asm volatile
 80020e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e8:	f383 8811 	msr	BASEPRI, r3
 80020ec:	f3bf 8f6f 	isb	sy
 80020f0:	f3bf 8f4f 	dsb	sy
 80020f4:	623b      	str	r3, [r7, #32]
    }
 80020f6:	bf00      	nop
 80020f8:	e7fe      	b.n	80020f8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <xTaskGenericNotify+0x4a>
        __asm volatile
 8002100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002104:	f383 8811 	msr	BASEPRI, r3
 8002108:	f3bf 8f6f 	isb	sy
 800210c:	f3bf 8f4f 	dsb	sy
 8002110:	61fb      	str	r3, [r7, #28]
    }
 8002112:	bf00      	nop
 8002114:	e7fe      	b.n	8002114 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800211a:	f000 fe95 	bl	8002e48 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800211e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	3214      	adds	r2, #20
 800212a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4413      	add	r3, r2
 8002138:	3354      	adds	r3, #84	; 0x54
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	4413      	add	r3, r2
 8002146:	3354      	adds	r3, #84	; 0x54
 8002148:	2202      	movs	r2, #2
 800214a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	2b04      	cmp	r3, #4
 8002150:	d83b      	bhi.n	80021ca <xTaskGenericNotify+0xfe>
 8002152:	a201      	add	r2, pc, #4	; (adr r2, 8002158 <xTaskGenericNotify+0x8c>)
 8002154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002158:	080021e9 	.word	0x080021e9
 800215c:	0800216d 	.word	0x0800216d
 8002160:	08002189 	.word	0x08002189
 8002164:	080021a1 	.word	0x080021a1
 8002168:	080021af 	.word	0x080021af
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	3214      	adds	r2, #20
 8002172:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	ea42 0103 	orr.w	r1, r2, r3
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	3214      	adds	r2, #20
 8002182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002186:	e032      	b.n	80021ee <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	3214      	adds	r2, #20
 800218e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002192:	1c59      	adds	r1, r3, #1
 8002194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	3214      	adds	r2, #20
 800219a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800219e:	e026      	b.n	80021ee <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	3214      	adds	r2, #20
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80021ac:	e01f      	b.n	80021ee <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80021ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d006      	beq.n	80021c4 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80021b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	3214      	adds	r2, #20
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80021c2:	e014      	b.n	80021ee <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80021c8:	e011      	b.n	80021ee <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80021ca:	4b34      	ldr	r3, [pc, #208]	; (800229c <xTaskGenericNotify+0x1d0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00c      	beq.n	80021ec <xTaskGenericNotify+0x120>
        __asm volatile
 80021d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	61bb      	str	r3, [r7, #24]
    }
 80021e4:	bf00      	nop
 80021e6:	e7fe      	b.n	80021e6 <xTaskGenericNotify+0x11a>
                    break;
 80021e8:	bf00      	nop
 80021ea:	e000      	b.n	80021ee <xTaskGenericNotify+0x122>

                    break;
 80021ec:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 80021ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f0:	4618      	mov	r0, r3
 80021f2:	f002 fc63 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 80021f6:	4601      	mov	r1, r0
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	4613      	mov	r3, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	203e      	movs	r0, #62	; 0x3e
 8002204:	f001 feba 	bl	8003f7c <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800220c:	2b01      	cmp	r3, #1
 800220e:	d13d      	bne.n	800228c <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002212:	3304      	adds	r3, #4
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fa31 	bl	800067c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	4618      	mov	r0, r3
 800221e:	f002 fbab 	bl	8004978 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	2201      	movs	r2, #1
 8002228:	409a      	lsls	r2, r3
 800222a:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <xTaskGenericNotify+0x1d4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4313      	orrs	r3, r2
 8002230:	4a1b      	ldr	r2, [pc, #108]	; (80022a0 <xTaskGenericNotify+0x1d4>)
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4a18      	ldr	r2, [pc, #96]	; (80022a4 <xTaskGenericNotify+0x1d8>)
 8002242:	441a      	add	r2, r3
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	3304      	adds	r3, #4
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f7fe f9b9 	bl	80005c2 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <xTaskGenericNotify+0x1a2>
        __asm volatile
 8002258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	617b      	str	r3, [r7, #20]
    }
 800226a:	bf00      	nop
 800226c:	e7fe      	b.n	800226c <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002272:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <xTaskGenericNotify+0x1dc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	429a      	cmp	r2, r3
 800227a:	d907      	bls.n	800228c <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <xTaskGenericNotify+0x1e0>)
 800227e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	f3bf 8f4f 	dsb	sy
 8002288:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800228c:	f000 fe0c 	bl	8002ea8 <vPortExitCritical>

        return xReturn;
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002292:	4618      	mov	r0, r3
 8002294:	3730      	adds	r7, #48	; 0x30
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000014c 	.word	0x2000014c
 80022a0:	20000150 	.word	0x20000150
 80022a4:	20000074 	.word	0x20000074
 80022a8:	20000070 	.word	0x20000070
 80022ac:	e000ed04 	.word	0xe000ed04

080022b0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b092      	sub	sp, #72	; 0x48
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80022be:	2301      	movs	r3, #1
 80022c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10a      	bne.n	80022de <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80022c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022cc:	f383 8811 	msr	BASEPRI, r3
 80022d0:	f3bf 8f6f 	isb	sy
 80022d4:	f3bf 8f4f 	dsb	sy
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80022da:	bf00      	nop
 80022dc:	e7fe      	b.n	80022dc <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80022e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e8:	f383 8811 	msr	BASEPRI, r3
 80022ec:	f3bf 8f6f 	isb	sy
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80022f6:	bf00      	nop
 80022f8:	e7fe      	b.n	80022f8 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80022fa:	f000 fe8f 	bl	800301c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8002302:	f3ef 8211 	mrs	r2, BASEPRI
 8002306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230a:	f383 8811 	msr	BASEPRI, r3
 800230e:	f3bf 8f6f 	isb	sy
 8002312:	f3bf 8f4f 	dsb	sy
 8002316:	627a      	str	r2, [r7, #36]	; 0x24
 8002318:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800231c:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800231e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002320:	2b00      	cmp	r3, #0
 8002322:	d006      	beq.n	8002332 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	3214      	adds	r2, #20
 800232a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800232e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002330:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4413      	add	r3, r2
 8002338:	3354      	adds	r3, #84	; 0x54
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	4413      	add	r3, r2
 8002346:	3354      	adds	r3, #84	; 0x54
 8002348:	2202      	movs	r2, #2
 800234a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	2b04      	cmp	r3, #4
 8002350:	d83b      	bhi.n	80023ca <xTaskGenericNotifyFromISR+0x11a>
 8002352:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <xTaskGenericNotifyFromISR+0xa8>)
 8002354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002358:	080023e9 	.word	0x080023e9
 800235c:	0800236d 	.word	0x0800236d
 8002360:	08002389 	.word	0x08002389
 8002364:	080023a1 	.word	0x080023a1
 8002368:	080023af 	.word	0x080023af
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800236c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	3214      	adds	r2, #20
 8002372:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	ea42 0103 	orr.w	r1, r2, r3
 800237c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	3214      	adds	r2, #20
 8002382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002386:	e032      	b.n	80023ee <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	3214      	adds	r2, #20
 800238e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002392:	1c59      	adds	r1, r3, #1
 8002394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	3214      	adds	r2, #20
 800239a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800239e:	e026      	b.n	80023ee <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80023a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	3214      	adds	r2, #20
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80023ac:	e01f      	b.n	80023ee <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80023ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d006      	beq.n	80023c4 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80023b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	3214      	adds	r2, #20
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80023c2:	e014      	b.n	80023ee <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80023c8:	e011      	b.n	80023ee <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <xTaskGenericNotifyFromISR+0x210>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00c      	beq.n	80023ec <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80023d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d6:	f383 8811 	msr	BASEPRI, r3
 80023da:	f3bf 8f6f 	isb	sy
 80023de:	f3bf 8f4f 	dsb	sy
 80023e2:	61fb      	str	r3, [r7, #28]
    }
 80023e4:	bf00      	nop
 80023e6:	e7fe      	b.n	80023e6 <xTaskGenericNotifyFromISR+0x136>
                    break;
 80023e8:	bf00      	nop
 80023ea:	e000      	b.n	80023ee <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80023ec:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	4618      	mov	r0, r3
 80023f2:	f002 fb63 	bl	8004abc <SEGGER_SYSVIEW_ShrinkId>
 80023f6:	78f9      	ldrb	r1, [r7, #3]
 80023f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023fc:	9201      	str	r2, [sp, #4]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	460b      	mov	r3, r1
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4601      	mov	r1, r0
 8002406:	203f      	movs	r0, #63	; 0x3f
 8002408:	f001 fe4a 	bl	80040a0 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800240c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002410:	2b01      	cmp	r3, #1
 8002412:	d149      	bne.n	80024a8 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 800241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	61bb      	str	r3, [r7, #24]
    }
 800242e:	bf00      	nop
 8002430:	e7fe      	b.n	8002430 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002432:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <xTaskGenericNotifyFromISR+0x214>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d120      	bne.n	800247c <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800243a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243c:	3304      	adds	r3, #4
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f91c 	bl	800067c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002446:	4618      	mov	r0, r3
 8002448:	f002 fa96 	bl	8004978 <SEGGER_SYSVIEW_OnTaskStartReady>
 800244c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	2201      	movs	r2, #1
 8002452:	409a      	lsls	r2, r3
 8002454:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <xTaskGenericNotifyFromISR+0x218>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4313      	orrs	r3, r2
 800245a:	4a1b      	ldr	r2, [pc, #108]	; (80024c8 <xTaskGenericNotifyFromISR+0x218>)
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4a18      	ldr	r2, [pc, #96]	; (80024cc <xTaskGenericNotifyFromISR+0x21c>)
 800246c:	441a      	add	r2, r3
 800246e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002470:	3304      	adds	r3, #4
 8002472:	4619      	mov	r1, r3
 8002474:	4610      	mov	r0, r2
 8002476:	f7fe f8a4 	bl	80005c2 <vListInsertEnd>
 800247a:	e005      	b.n	8002488 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800247c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247e:	3318      	adds	r3, #24
 8002480:	4619      	mov	r1, r3
 8002482:	4813      	ldr	r0, [pc, #76]	; (80024d0 <xTaskGenericNotifyFromISR+0x220>)
 8002484:	f7fe f89d 	bl	80005c2 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800248a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <xTaskGenericNotifyFromISR+0x224>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	429a      	cmp	r2, r3
 8002494:	d908      	bls.n	80024a8 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8002496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800249c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <xTaskGenericNotifyFromISR+0x228>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024aa:	617b      	str	r3, [r7, #20]
        __asm volatile
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f383 8811 	msr	BASEPRI, r3
    }
 80024b2:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80024b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80024b6:	4618      	mov	r0, r3
 80024b8:	3740      	adds	r7, #64	; 0x40
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	2000014c 	.word	0x2000014c
 80024c4:	20000170 	.word	0x20000170
 80024c8:	20000150 	.word	0x20000150
 80024cc:	20000074 	.word	0x20000074
 80024d0:	20000108 	.word	0x20000108
 80024d4:	20000070 	.word	0x20000070
 80024d8:	2000015c 	.word	0x2000015c

080024dc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80024e6:	4b32      	ldr	r3, [pc, #200]	; (80025b0 <prvAddCurrentTaskToDelayedList+0xd4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024ec:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3304      	adds	r3, #4
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f8c2 	bl	800067c <uxListRemove>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10b      	bne.n	8002516 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80024fe:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	2201      	movs	r2, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43da      	mvns	r2, r3
 800250c:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4013      	ands	r3, r2
 8002512:	4a29      	ldr	r2, [pc, #164]	; (80025b8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002514:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d110      	bne.n	8002540 <prvAddCurrentTaskToDelayedList+0x64>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00d      	beq.n	8002540 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002524:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	211b      	movs	r1, #27
 800252a:	4618      	mov	r0, r3
 800252c:	f002 fa66 	bl	80049fc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002530:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3304      	adds	r3, #4
 8002536:	4619      	mov	r1, r3
 8002538:	4820      	ldr	r0, [pc, #128]	; (80025bc <prvAddCurrentTaskToDelayedList+0xe0>)
 800253a:	f7fe f842 	bl	80005c2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800253e:	e032      	b.n	80025a6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d20f      	bcs.n	8002578 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002558:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2104      	movs	r1, #4
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fa4c 	bl	80049fc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002564:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3304      	adds	r3, #4
 800256e:	4619      	mov	r1, r3
 8002570:	4610      	mov	r0, r2
 8002572:	f7fe f84a 	bl	800060a <vListInsert>
}
 8002576:	e016      	b.n	80025a6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2104      	movs	r1, #4
 800257e:	4618      	mov	r0, r3
 8002580:	f002 fa3c 	bl	80049fc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3304      	adds	r3, #4
 800258e:	4619      	mov	r1, r3
 8002590:	4610      	mov	r0, r2
 8002592:	f7fe f83a 	bl	800060a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <prvAddCurrentTaskToDelayedList+0xec>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	429a      	cmp	r2, r3
 800259e:	d202      	bcs.n	80025a6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80025a0:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <prvAddCurrentTaskToDelayedList+0xec>)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	6013      	str	r3, [r2, #0]
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	2000014c 	.word	0x2000014c
 80025b4:	20000070 	.word	0x20000070
 80025b8:	20000150 	.word	0x20000150
 80025bc:	20000134 	.word	0x20000134
 80025c0:	20000104 	.word	0x20000104
 80025c4:	20000100 	.word	0x20000100
 80025c8:	20000168 	.word	0x20000168

080025cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80025d6:	f000 fad5 	bl	8002b84 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <xTimerCreateTimerTask+0x54>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <xTimerCreateTimerTask+0x58>)
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	2302      	movs	r3, #2
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2300      	movs	r3, #0
 80025ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025f0:	490d      	ldr	r1, [pc, #52]	; (8002628 <xTimerCreateTimerTask+0x5c>)
 80025f2:	480e      	ldr	r0, [pc, #56]	; (800262c <xTimerCreateTimerTask+0x60>)
 80025f4:	f7fe fdc6 	bl	8001184 <xTaskCreate>
 80025f8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002604:	f383 8811 	msr	BASEPRI, r3
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	603b      	str	r3, [r7, #0]
    }
 8002612:	bf00      	nop
 8002614:	e7fe      	b.n	8002614 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002616:	687b      	ldr	r3, [r7, #4]
    }
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200001a4 	.word	0x200001a4
 8002624:	200001a8 	.word	0x200001a8
 8002628:	08006bf4 	.word	0x08006bf4
 800262c:	08002765 	.word	0x08002765

08002630 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	; 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <xTimerGenericCommand+0x2e>
        __asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	623b      	str	r3, [r7, #32]
    }
 800265a:	bf00      	nop
 800265c:	e7fe      	b.n	800265c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800265e:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <xTimerGenericCommand+0x98>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d02a      	beq.n	80026bc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b05      	cmp	r3, #5
 8002676:	dc18      	bgt.n	80026aa <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002678:	f7ff fc02 	bl	8001e80 <xTaskGetSchedulerState>
 800267c:	4603      	mov	r3, r0
 800267e:	2b02      	cmp	r3, #2
 8002680:	d109      	bne.n	8002696 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <xTimerGenericCommand+0x98>)
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	f107 0114 	add.w	r1, r7, #20
 800268a:	2300      	movs	r3, #0
 800268c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268e:	f7fe f90f 	bl	80008b0 <xQueueGenericSend>
 8002692:	6278      	str	r0, [r7, #36]	; 0x24
 8002694:	e012      	b.n	80026bc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <xTimerGenericCommand+0x98>)
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	f107 0114 	add.w	r1, r7, #20
 800269e:	2300      	movs	r3, #0
 80026a0:	2200      	movs	r2, #0
 80026a2:	f7fe f905 	bl	80008b0 <xQueueGenericSend>
 80026a6:	6278      	str	r0, [r7, #36]	; 0x24
 80026a8:	e008      	b.n	80026bc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <xTimerGenericCommand+0x98>)
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	f107 0114 	add.w	r1, r7, #20
 80026b2:	2300      	movs	r3, #0
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	f7fe fa21 	bl	8000afc <xQueueGenericSendFromISR>
 80026ba:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80026be:	4618      	mov	r0, r3
 80026c0:	3728      	adds	r7, #40	; 0x28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200001a4 	.word	0x200001a4

080026cc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <prvProcessExpiredTimer+0x94>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3304      	adds	r3, #4
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd ffc9 	bl	800067c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d022      	beq.n	800273e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	18d1      	adds	r1, r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	6978      	ldr	r0, [r7, #20]
 8002706:	f000 f8d1 	bl	80028ac <prvInsertTimerInActiveList>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01f      	beq.n	8002750 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002710:	2300      	movs	r3, #0
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	2300      	movs	r3, #0
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	2100      	movs	r1, #0
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7ff ff88 	bl	8002630 <xTimerGenericCommand>
 8002720:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d113      	bne.n	8002750 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	60fb      	str	r3, [r7, #12]
    }
 800273a:	bf00      	nop
 800273c:	e7fe      	b.n	800273c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	b2da      	uxtb	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	6978      	ldr	r0, [r7, #20]
 8002756:	4798      	blx	r3
    }
 8002758:	bf00      	nop
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	2000019c 	.word	0x2000019c

08002764 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800276c:	f107 0308 	add.w	r3, r7, #8
 8002770:	4618      	mov	r0, r3
 8002772:	f000 f857 	bl	8002824 <prvGetNextExpireTime>
 8002776:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4619      	mov	r1, r3
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f803 	bl	8002788 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002782:	f000 f8d5 	bl	8002930 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002786:	e7f1      	b.n	800276c <prvTimerTask+0x8>

08002788 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002792:	f7fe ff9f 	bl	80016d4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002796:	f107 0308 	add.w	r3, r7, #8
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f866 	bl	800286c <prvSampleTimeNow>
 80027a0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d130      	bne.n	800280a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10a      	bne.n	80027c4 <prvProcessTimerOrBlockTask+0x3c>
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d806      	bhi.n	80027c4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80027b6:	f7fe ff9b 	bl	80016f0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80027ba:	68f9      	ldr	r1, [r7, #12]
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff85 	bl	80026cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80027c2:	e024      	b.n	800280e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80027ca:	4b13      	ldr	r3, [pc, #76]	; (8002818 <prvProcessTimerOrBlockTask+0x90>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <prvProcessTimerOrBlockTask+0x50>
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <prvProcessTimerOrBlockTask+0x52>
 80027d8:	2300      	movs	r3, #0
 80027da:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <prvProcessTimerOrBlockTask+0x94>)
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4619      	mov	r1, r3
 80027ea:	f7fe fc97 	bl	800111c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80027ee:	f7fe ff7f 	bl	80016f0 <xTaskResumeAll>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80027f8:	4b09      	ldr	r3, [pc, #36]	; (8002820 <prvProcessTimerOrBlockTask+0x98>)
 80027fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	f3bf 8f6f 	isb	sy
    }
 8002808:	e001      	b.n	800280e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800280a:	f7fe ff71 	bl	80016f0 <xTaskResumeAll>
    }
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200001a0 	.word	0x200001a0
 800281c:	200001a4 	.word	0x200001a4
 8002820:	e000ed04 	.word	0xe000ed04

08002824 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800282c:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <prvGetNextExpireTime+0x44>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <prvGetNextExpireTime+0x16>
 8002836:	2201      	movs	r2, #1
 8002838:	e000      	b.n	800283c <prvGetNextExpireTime+0x18>
 800283a:	2200      	movs	r2, #0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <prvGetNextExpireTime+0x44>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	e001      	b.n	8002858 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002858:	68fb      	ldr	r3, [r7, #12]
    }
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	2000019c 	.word	0x2000019c

0800286c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002874:	f7fe ffdc 	bl	8001830 <xTaskGetTickCount>
 8002878:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <prvSampleTimeNow+0x3c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	429a      	cmp	r2, r3
 8002882:	d205      	bcs.n	8002890 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002884:	f000 f91a 	bl	8002abc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e002      	b.n	8002896 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002896:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <prvSampleTimeNow+0x3c>)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800289c:	68fb      	ldr	r3, [r7, #12]
    }
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200001ac 	.word	0x200001ac

080028ac <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d812      	bhi.n	80028f8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	1ad2      	subs	r2, r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d302      	bcc.n	80028e6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80028e0:	2301      	movs	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	e01b      	b.n	800291e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <prvInsertTimerInActiveList+0x7c>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3304      	adds	r3, #4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4610      	mov	r0, r2
 80028f2:	f7fd fe8a 	bl	800060a <vListInsert>
 80028f6:	e012      	b.n	800291e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d206      	bcs.n	800290e <prvInsertTimerInActiveList+0x62>
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d302      	bcc.n	800290e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002908:	2301      	movs	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	e007      	b.n	800291e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <prvInsertTimerInActiveList+0x80>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3304      	adds	r3, #4
 8002916:	4619      	mov	r1, r3
 8002918:	4610      	mov	r0, r2
 800291a:	f7fd fe76 	bl	800060a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800291e:	697b      	ldr	r3, [r7, #20]
    }
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	200001a0 	.word	0x200001a0
 800292c:	2000019c 	.word	0x2000019c

08002930 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002930:	b580      	push	{r7, lr}
 8002932:	b08c      	sub	sp, #48	; 0x30
 8002934:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002936:	e0ae      	b.n	8002a96 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f2c0 80aa 	blt.w	8002a94 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	3304      	adds	r3, #4
 8002950:	4618      	mov	r0, r3
 8002952:	f7fd fe93 	bl	800067c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff87 	bl	800286c <prvSampleTimeNow>
 800295e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b09      	cmp	r3, #9
 8002964:	f200 8097 	bhi.w	8002a96 <prvProcessReceivedCommands+0x166>
 8002968:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <prvProcessReceivedCommands+0x40>)
 800296a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296e:	bf00      	nop
 8002970:	08002999 	.word	0x08002999
 8002974:	08002999 	.word	0x08002999
 8002978:	08002999 	.word	0x08002999
 800297c:	08002a0d 	.word	0x08002a0d
 8002980:	08002a21 	.word	0x08002a21
 8002984:	08002a6b 	.word	0x08002a6b
 8002988:	08002999 	.word	0x08002999
 800298c:	08002999 	.word	0x08002999
 8002990:	08002a0d 	.word	0x08002a0d
 8002994:	08002a21 	.word	0x08002a21
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	18d1      	adds	r1, r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a3a      	ldr	r2, [r7, #32]
 80029b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029b8:	f7ff ff78 	bl	80028ac <prvInsertTimerInActiveList>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d069      	beq.n	8002a96 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029c8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d05e      	beq.n	8002a96 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	441a      	add	r2, r3
 80029e0:	2300      	movs	r3, #0
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2300      	movs	r3, #0
 80029e6:	2100      	movs	r1, #0
 80029e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029ea:	f7ff fe21 	bl	8002630 <xTimerGenericCommand>
 80029ee:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d14f      	bne.n	8002a96 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	61bb      	str	r3, [r7, #24]
    }
 8002a08:	bf00      	nop
 8002a0a:	e7fe      	b.n	8002a0a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002a1e:	e03a      	b.n	8002a96 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	617b      	str	r3, [r7, #20]
    }
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	18d1      	adds	r1, r2, r3
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	6a3a      	ldr	r2, [r7, #32]
 8002a62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a64:	f7ff ff22 	bl	80028ac <prvInsertTimerInActiveList>
                        break;
 8002a68:	e015      	b.n	8002a96 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d103      	bne.n	8002a80 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8002a78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a7a:	f000 fbef 	bl	800325c <vPortFree>
 8002a7e:	e00a      	b.n	8002a96 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002a92:	e000      	b.n	8002a96 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002a94:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <prvProcessReceivedCommands+0x188>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f107 0108 	add.w	r1, r7, #8
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe f8e9 	bl	8000c78 <xQueueReceive>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f47f af45 	bne.w	8002938 <prvProcessReceivedCommands+0x8>
        }
    }
 8002aae:	bf00      	nop
 8002ab0:	bf00      	nop
 8002ab2:	3728      	adds	r7, #40	; 0x28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	200001a4 	.word	0x200001a4

08002abc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ac2:	e048      	b.n	8002b56 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <prvSwitchTimerLists+0xc0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ace:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <prvSwitchTimerLists+0xc0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3304      	adds	r3, #4
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fdcd 	bl	800067c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d02e      	beq.n	8002b56 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d90e      	bls.n	8002b28 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b16:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <prvSwitchTimerLists+0xc0>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4610      	mov	r0, r2
 8002b22:	f7fd fd72 	bl	800060a <vListInsert>
 8002b26:	e016      	b.n	8002b56 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	2100      	movs	r1, #0
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f7ff fd7c 	bl	8002630 <xTimerGenericCommand>
 8002b38:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8002b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	603b      	str	r3, [r7, #0]
    }
 8002b52:	bf00      	nop
 8002b54:	e7fe      	b.n	8002b54 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <prvSwitchTimerLists+0xc0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1b1      	bne.n	8002ac4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <prvSwitchTimerLists+0xc0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <prvSwitchTimerLists+0xc4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <prvSwitchTimerLists+0xc0>)
 8002b6c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002b6e:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <prvSwitchTimerLists+0xc4>)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	6013      	str	r3, [r2, #0]
    }
 8002b74:	bf00      	nop
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	2000019c 	.word	0x2000019c
 8002b80:	200001a0 	.word	0x200001a0

08002b84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002b88:	f000 f95e 	bl	8002e48 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <prvCheckForValidListAndQueue+0x54>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d11d      	bne.n	8002bd0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002b94:	4811      	ldr	r0, [pc, #68]	; (8002bdc <prvCheckForValidListAndQueue+0x58>)
 8002b96:	f7fd fce7 	bl	8000568 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002b9a:	4811      	ldr	r0, [pc, #68]	; (8002be0 <prvCheckForValidListAndQueue+0x5c>)
 8002b9c:	f7fd fce4 	bl	8000568 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002ba0:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <prvCheckForValidListAndQueue+0x60>)
 8002ba2:	4a0e      	ldr	r2, [pc, #56]	; (8002bdc <prvCheckForValidListAndQueue+0x58>)
 8002ba4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <prvCheckForValidListAndQueue+0x64>)
 8002ba8:	4a0d      	ldr	r2, [pc, #52]	; (8002be0 <prvCheckForValidListAndQueue+0x5c>)
 8002baa:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002bac:	2200      	movs	r2, #0
 8002bae:	210c      	movs	r1, #12
 8002bb0:	200a      	movs	r0, #10
 8002bb2:	f7fd fdf5 	bl	80007a0 <xQueueGenericCreate>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <prvCheckForValidListAndQueue+0x54>)
 8002bba:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <prvCheckForValidListAndQueue+0x54>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <prvCheckForValidListAndQueue+0x54>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4908      	ldr	r1, [pc, #32]	; (8002bec <prvCheckForValidListAndQueue+0x68>)
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fa74 	bl	80010b8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002bd0:	f000 f96a 	bl	8002ea8 <vPortExitCritical>
    }
 8002bd4:	bf00      	nop
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	200001a4 	.word	0x200001a4
 8002bdc:	20000174 	.word	0x20000174
 8002be0:	20000188 	.word	0x20000188
 8002be4:	2000019c 	.word	0x2000019c
 8002be8:	200001a0 	.word	0x200001a0
 8002bec:	08006bfc 	.word	0x08006bfc

08002bf0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3b04      	subs	r3, #4
 8002c00:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c08:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3b04      	subs	r3, #4
 8002c0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f023 0201 	bic.w	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3b04      	subs	r3, #4
 8002c1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002c20:	4a0c      	ldr	r2, [pc, #48]	; (8002c54 <pxPortInitialiseStack+0x64>)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3b14      	subs	r3, #20
 8002c2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3b04      	subs	r3, #4
 8002c36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f06f 0202 	mvn.w	r2, #2
 8002c3e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3b20      	subs	r3, #32
 8002c44:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	08002c59 	.word	0x08002c59

08002c58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <prvTaskExitError+0x54>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6a:	d00a      	beq.n	8002c82 <prvTaskExitError+0x2a>
        __asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	60fb      	str	r3, [r7, #12]
    }
 8002c7e:	bf00      	nop
 8002c80:	e7fe      	b.n	8002c80 <prvTaskExitError+0x28>
        __asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	60bb      	str	r3, [r7, #8]
    }
 8002c94:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c96:	bf00      	nop
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0fc      	beq.n	8002c98 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	20000004 	.word	0x20000004

08002cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002cb0:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <pxCurrentTCBConst2>)
 8002cb2:	6819      	ldr	r1, [r3, #0]
 8002cb4:	6808      	ldr	r0, [r1, #0]
 8002cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cba:	f380 8809 	msr	PSP, r0
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f04f 0000 	mov.w	r0, #0
 8002cc6:	f380 8811 	msr	BASEPRI, r0
 8002cca:	4770      	bx	lr
 8002ccc:	f3af 8000 	nop.w

08002cd0 <pxCurrentTCBConst2>:
 8002cd0:	20000070 	.word	0x20000070
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop

08002cd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002cd8:	4808      	ldr	r0, [pc, #32]	; (8002cfc <prvPortStartFirstTask+0x24>)
 8002cda:	6800      	ldr	r0, [r0, #0]
 8002cdc:	6800      	ldr	r0, [r0, #0]
 8002cde:	f380 8808 	msr	MSP, r0
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f380 8814 	msr	CONTROL, r0
 8002cea:	b662      	cpsie	i
 8002cec:	b661      	cpsie	f
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	df00      	svc	0
 8002cf8:	bf00      	nop
 8002cfa:	0000      	.short	0x0000
 8002cfc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop

08002d04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d0a:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <xPortStartScheduler+0x120>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a46      	ldr	r2, [pc, #280]	; (8002e28 <xPortStartScheduler+0x124>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d10a      	bne.n	8002d2a <xPortStartScheduler+0x26>
        __asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	613b      	str	r3, [r7, #16]
    }
 8002d26:	bf00      	nop
 8002d28:	e7fe      	b.n	8002d28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d2a:	4b3e      	ldr	r3, [pc, #248]	; (8002e24 <xPortStartScheduler+0x120>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a3f      	ldr	r2, [pc, #252]	; (8002e2c <xPortStartScheduler+0x128>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10a      	bne.n	8002d4a <xPortStartScheduler+0x46>
        __asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	60fb      	str	r3, [r7, #12]
    }
 8002d46:	bf00      	nop
 8002d48:	e7fe      	b.n	8002d48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d4a:	4b39      	ldr	r3, [pc, #228]	; (8002e30 <xPortStartScheduler+0x12c>)
 8002d4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	22ff      	movs	r2, #255	; 0xff
 8002d5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <xPortStartScheduler+0x130>)
 8002d70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <xPortStartScheduler+0x134>)
 8002d74:	2207      	movs	r2, #7
 8002d76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d78:	e009      	b.n	8002d8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002d7a:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <xPortStartScheduler+0x134>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	4a2d      	ldr	r2, [pc, #180]	; (8002e38 <xPortStartScheduler+0x134>)
 8002d82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	2b80      	cmp	r3, #128	; 0x80
 8002d98:	d0ef      	beq.n	8002d7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d9a:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <xPortStartScheduler+0x134>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f1c3 0307 	rsb	r3, r3, #7
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d00a      	beq.n	8002dbc <xPortStartScheduler+0xb8>
        __asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	60bb      	str	r3, [r7, #8]
    }
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <xPortStartScheduler+0x134>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <xPortStartScheduler+0x134>)
 8002dc4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <xPortStartScheduler+0x134>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dce:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <xPortStartScheduler+0x134>)
 8002dd0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002dda:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <xPortStartScheduler+0x138>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <xPortStartScheduler+0x138>)
 8002de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002de4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <xPortStartScheduler+0x138>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <xPortStartScheduler+0x138>)
 8002dec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002df0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002df2:	f000 f8e3 	bl	8002fbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <xPortStartScheduler+0x13c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002dfc:	f000 f902 	bl	8003004 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e00:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <xPortStartScheduler+0x140>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a0f      	ldr	r2, [pc, #60]	; (8002e44 <xPortStartScheduler+0x140>)
 8002e06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e0c:	f7ff ff64 	bl	8002cd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e10:	f7fe fdda 	bl	80019c8 <vTaskSwitchContext>
    prvTaskExitError();
 8002e14:	f7ff ff20 	bl	8002c58 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	e000ed00 	.word	0xe000ed00
 8002e28:	410fc271 	.word	0x410fc271
 8002e2c:	410fc270 	.word	0x410fc270
 8002e30:	e000e400 	.word	0xe000e400
 8002e34:	200001b0 	.word	0x200001b0
 8002e38:	200001b4 	.word	0x200001b4
 8002e3c:	e000ed20 	.word	0xe000ed20
 8002e40:	20000004 	.word	0x20000004
 8002e44:	e000ef34 	.word	0xe000ef34

08002e48 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	607b      	str	r3, [r7, #4]
    }
 8002e60:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002e62:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <vPortEnterCritical+0x58>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <vPortEnterCritical+0x58>)
 8002e6a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <vPortEnterCritical+0x58>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d10f      	bne.n	8002e94 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <vPortEnterCritical+0x5c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <vPortEnterCritical+0x4c>
        __asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	603b      	str	r3, [r7, #0]
    }
 8002e90:	bf00      	nop
 8002e92:	e7fe      	b.n	8002e92 <vPortEnterCritical+0x4a>
    }
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	20000004 	.word	0x20000004
 8002ea4:	e000ed04 	.word	0xe000ed04

08002ea8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002eae:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <vPortExitCritical+0x50>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10a      	bne.n	8002ecc <vPortExitCritical+0x24>
        __asm volatile
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	607b      	str	r3, [r7, #4]
    }
 8002ec8:	bf00      	nop
 8002eca:	e7fe      	b.n	8002eca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <vPortExitCritical+0x50>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <vPortExitCritical+0x50>)
 8002ed4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <vPortExitCritical+0x50>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d105      	bne.n	8002eea <vPortExitCritical+0x42>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f383 8811 	msr	BASEPRI, r3
    }
 8002ee8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000004 	.word	0x20000004
 8002efc:	00000000 	.word	0x00000000

08002f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002f00:	f3ef 8009 	mrs	r0, PSP
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <pxCurrentTCBConst>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	f01e 0f10 	tst.w	lr, #16
 8002f10:	bf08      	it	eq
 8002f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f1a:	6010      	str	r0, [r2, #0]
 8002f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f24:	f380 8811 	msr	BASEPRI, r0
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f7fe fd4a 	bl	80019c8 <vTaskSwitchContext>
 8002f34:	f04f 0000 	mov.w	r0, #0
 8002f38:	f380 8811 	msr	BASEPRI, r0
 8002f3c:	bc09      	pop	{r0, r3}
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	6808      	ldr	r0, [r1, #0]
 8002f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f46:	f01e 0f10 	tst.w	lr, #16
 8002f4a:	bf08      	it	eq
 8002f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f50:	f380 8809 	msr	PSP, r0
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	f3af 8000 	nop.w

08002f60 <pxCurrentTCBConst>:
 8002f60:	20000070 	.word	0x20000070
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop

08002f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
        __asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	607b      	str	r3, [r7, #4]
    }
 8002f80:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002f82:	f001 fbdf 	bl	8004744 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002f86:	f7fe fc63 	bl	8001850 <xTaskIncrementTick>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d006      	beq.n	8002f9e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002f90:	f001 fc36 	bl	8004800 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <SysTick_Handler+0x50>)
 8002f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	e001      	b.n	8002fa2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002f9e:	f001 fc13 	bl	80047c8 <SEGGER_SYSVIEW_RecordExitISR>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f383 8811 	msr	BASEPRI, r3
    }
 8002fac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	e000ed04 	.word	0xe000ed04

08002fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <vPortSetupTimerInterrupt+0x34>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <vPortSetupTimerInterrupt+0x38>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <vPortSetupTimerInterrupt+0x3c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <vPortSetupTimerInterrupt+0x40>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	099b      	lsrs	r3, r3, #6
 8002fd8:	4a09      	ldr	r2, [pc, #36]	; (8003000 <vPortSetupTimerInterrupt+0x44>)
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002fde:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <vPortSetupTimerInterrupt+0x34>)
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	601a      	str	r2, [r3, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000e010 	.word	0xe000e010
 8002ff4:	e000e018 	.word	0xe000e018
 8002ff8:	20000008 	.word	0x20000008
 8002ffc:	10624dd3 	.word	0x10624dd3
 8003000:	e000e014 	.word	0xe000e014

08003004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003014 <vPortEnableVFP+0x10>
 8003008:	6801      	ldr	r1, [r0, #0]
 800300a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800300e:	6001      	str	r1, [r0, #0]
 8003010:	4770      	bx	lr
 8003012:	0000      	.short	0x0000
 8003014:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop

0800301c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003022:	f3ef 8305 	mrs	r3, IPSR
 8003026:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b0f      	cmp	r3, #15
 800302c:	d914      	bls.n	8003058 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800302e:	4a17      	ldr	r2, [pc, #92]	; (800308c <vPortValidateInterruptPriority+0x70>)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <vPortValidateInterruptPriority+0x74>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	7afa      	ldrb	r2, [r7, #11]
 800303e:	429a      	cmp	r2, r3
 8003040:	d20a      	bcs.n	8003058 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	607b      	str	r3, [r7, #4]
    }
 8003054:	bf00      	nop
 8003056:	e7fe      	b.n	8003056 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003058:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <vPortValidateInterruptPriority+0x78>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003060:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <vPortValidateInterruptPriority+0x7c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d90a      	bls.n	800307e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	603b      	str	r3, [r7, #0]
    }
 800307a:	bf00      	nop
 800307c:	e7fe      	b.n	800307c <vPortValidateInterruptPriority+0x60>
    }
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000e3f0 	.word	0xe000e3f0
 8003090:	200001b0 	.word	0x200001b0
 8003094:	e000ed0c 	.word	0xe000ed0c
 8003098:	200001b4 	.word	0x200001b4

0800309c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80030a8:	f7fe fb14 	bl	80016d4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80030ac:	4b65      	ldr	r3, [pc, #404]	; (8003244 <pvPortMalloc+0x1a8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80030b4:	f000 f934 	bl	8003320 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80030b8:	4b63      	ldr	r3, [pc, #396]	; (8003248 <pvPortMalloc+0x1ac>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f040 80a7 	bne.w	8003214 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d02d      	beq.n	8003128 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80030cc:	2208      	movs	r2, #8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d227      	bcs.n	8003128 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80030d8:	2208      	movs	r2, #8
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d021      	beq.n	800312e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f023 0307 	bic.w	r3, r3, #7
 80030f0:	3308      	adds	r3, #8
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d214      	bcs.n	8003122 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f023 0307 	bic.w	r3, r3, #7
 80030fe:	3308      	adds	r3, #8
 8003100:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	2b00      	cmp	r3, #0
 800310a:	d010      	beq.n	800312e <pvPortMalloc+0x92>
        __asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	617b      	str	r3, [r7, #20]
    }
 800311e:	bf00      	nop
 8003120:	e7fe      	b.n	8003120 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003126:	e002      	b.n	800312e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	607b      	str	r3, [r7, #4]
 800312c:	e000      	b.n	8003130 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800312e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d06e      	beq.n	8003214 <pvPortMalloc+0x178>
 8003136:	4b45      	ldr	r3, [pc, #276]	; (800324c <pvPortMalloc+0x1b0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	429a      	cmp	r2, r3
 800313e:	d869      	bhi.n	8003214 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003140:	4b43      	ldr	r3, [pc, #268]	; (8003250 <pvPortMalloc+0x1b4>)
 8003142:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003144:	4b42      	ldr	r3, [pc, #264]	; (8003250 <pvPortMalloc+0x1b4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800314a:	e004      	b.n	8003156 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	429a      	cmp	r2, r3
 800315e:	d903      	bls.n	8003168 <pvPortMalloc+0xcc>
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f1      	bne.n	800314c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003168:	4b36      	ldr	r3, [pc, #216]	; (8003244 <pvPortMalloc+0x1a8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316e:	429a      	cmp	r2, r3
 8003170:	d050      	beq.n	8003214 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2208      	movs	r2, #8
 8003178:	4413      	add	r3, r2
 800317a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	1ad2      	subs	r2, r2, r3
 800318c:	2308      	movs	r3, #8
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	429a      	cmp	r2, r3
 8003192:	d91f      	bls.n	80031d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <pvPortMalloc+0x120>
        __asm volatile
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	613b      	str	r3, [r7, #16]
    }
 80031b8:	bf00      	nop
 80031ba:	e7fe      	b.n	80031ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	1ad2      	subs	r2, r2, r3
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80031ce:	69b8      	ldr	r0, [r7, #24]
 80031d0:	f000 f908 	bl	80033e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <pvPortMalloc+0x1b0>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	4a1b      	ldr	r2, [pc, #108]	; (800324c <pvPortMalloc+0x1b0>)
 80031e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031e2:	4b1a      	ldr	r3, [pc, #104]	; (800324c <pvPortMalloc+0x1b0>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <pvPortMalloc+0x1b8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d203      	bcs.n	80031f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031ee:	4b17      	ldr	r3, [pc, #92]	; (800324c <pvPortMalloc+0x1b0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a18      	ldr	r2, [pc, #96]	; (8003254 <pvPortMalloc+0x1b8>)
 80031f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	4b13      	ldr	r3, [pc, #76]	; (8003248 <pvPortMalloc+0x1ac>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	431a      	orrs	r2, r3
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <pvPortMalloc+0x1bc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3301      	adds	r3, #1
 8003210:	4a11      	ldr	r2, [pc, #68]	; (8003258 <pvPortMalloc+0x1bc>)
 8003212:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003214:	f7fe fa6c 	bl	80016f0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <pvPortMalloc+0x19c>
        __asm volatile
 8003222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	60fb      	str	r3, [r7, #12]
    }
 8003234:	bf00      	nop
 8003236:	e7fe      	b.n	8003236 <pvPortMalloc+0x19a>
    return pvReturn;
 8003238:	69fb      	ldr	r3, [r7, #28]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3728      	adds	r7, #40	; 0x28
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20012dc0 	.word	0x20012dc0
 8003248:	20012dd4 	.word	0x20012dd4
 800324c:	20012dc4 	.word	0x20012dc4
 8003250:	20012db8 	.word	0x20012db8
 8003254:	20012dc8 	.word	0x20012dc8
 8003258:	20012dcc 	.word	0x20012dcc

0800325c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d04d      	beq.n	800330a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800326e:	2308      	movs	r3, #8
 8003270:	425b      	negs	r3, r3
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4413      	add	r3, r2
 8003276:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	4b24      	ldr	r3, [pc, #144]	; (8003314 <vPortFree+0xb8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4013      	ands	r3, r2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <vPortFree+0x44>
        __asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	60fb      	str	r3, [r7, #12]
    }
 800329c:	bf00      	nop
 800329e:	e7fe      	b.n	800329e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <vPortFree+0x62>
        __asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	60bb      	str	r3, [r7, #8]
    }
 80032ba:	bf00      	nop
 80032bc:	e7fe      	b.n	80032bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	4b14      	ldr	r3, [pc, #80]	; (8003314 <vPortFree+0xb8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01e      	beq.n	800330a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d11a      	bne.n	800330a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <vPortFree+0xb8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	43db      	mvns	r3, r3
 80032de:	401a      	ands	r2, r3
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80032e4:	f7fe f9f6 	bl	80016d4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <vPortFree+0xbc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4413      	add	r3, r2
 80032f2:	4a09      	ldr	r2, [pc, #36]	; (8003318 <vPortFree+0xbc>)
 80032f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032f6:	6938      	ldr	r0, [r7, #16]
 80032f8:	f000 f874 	bl	80033e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80032fc:	4b07      	ldr	r3, [pc, #28]	; (800331c <vPortFree+0xc0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3301      	adds	r3, #1
 8003302:	4a06      	ldr	r2, [pc, #24]	; (800331c <vPortFree+0xc0>)
 8003304:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003306:	f7fe f9f3 	bl	80016f0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800330a:	bf00      	nop
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20012dd4 	.word	0x20012dd4
 8003318:	20012dc4 	.word	0x20012dc4
 800331c:	20012dd0 	.word	0x20012dd0

08003320 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003326:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800332a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800332c:	4b27      	ldr	r3, [pc, #156]	; (80033cc <prvHeapInit+0xac>)
 800332e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00c      	beq.n	8003354 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3307      	adds	r3, #7
 800333e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0307 	bic.w	r3, r3, #7
 8003346:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <prvHeapInit+0xac>)
 8003350:	4413      	add	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003358:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <prvHeapInit+0xb0>)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800335e:	4b1c      	ldr	r3, [pc, #112]	; (80033d0 <prvHeapInit+0xb0>)
 8003360:	2200      	movs	r2, #0
 8003362:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	4413      	add	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800336c:	2208      	movs	r2, #8
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0307 	bic.w	r3, r3, #7
 800337a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <prvHeapInit+0xb4>)
 8003380:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003382:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <prvHeapInit+0xb4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2200      	movs	r2, #0
 8003388:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800338a:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <prvHeapInit+0xb4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	1ad2      	subs	r2, r2, r3
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <prvHeapInit+0xb4>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <prvHeapInit+0xb8>)
 80033ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4a09      	ldr	r2, [pc, #36]	; (80033dc <prvHeapInit+0xbc>)
 80033b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80033b8:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <prvHeapInit+0xc0>)
 80033ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033be:	601a      	str	r2, [r3, #0]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	200001b8 	.word	0x200001b8
 80033d0:	20012db8 	.word	0x20012db8
 80033d4:	20012dc0 	.word	0x20012dc0
 80033d8:	20012dc8 	.word	0x20012dc8
 80033dc:	20012dc4 	.word	0x20012dc4
 80033e0:	20012dd4 	.word	0x20012dd4

080033e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033ec:	4b28      	ldr	r3, [pc, #160]	; (8003490 <prvInsertBlockIntoFreeList+0xac>)
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e002      	b.n	80033f8 <prvInsertBlockIntoFreeList+0x14>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d8f7      	bhi.n	80033f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	4413      	add	r3, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	429a      	cmp	r2, r3
 8003412:	d108      	bne.n	8003426 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	441a      	add	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	441a      	add	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d118      	bne.n	800346c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b15      	ldr	r3, [pc, #84]	; (8003494 <prvInsertBlockIntoFreeList+0xb0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d00d      	beq.n	8003462 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	441a      	add	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	e008      	b.n	8003474 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003462:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <prvInsertBlockIntoFreeList+0xb0>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e003      	b.n	8003474 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	d002      	beq.n	8003482 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003482:	bf00      	nop
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20012db8 	.word	0x20012db8
 8003494:	20012dc0 	.word	0x20012dc0

08003498 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80034a6:	2205      	movs	r2, #5
 80034a8:	492b      	ldr	r1, [pc, #172]	; (8003558 <SYSVIEW_AddTask+0xc0>)
 80034aa:	68b8      	ldr	r0, [r7, #8]
 80034ac:	f003 fb6c 	bl	8006b88 <memcmp>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d04b      	beq.n	800354e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <SYSVIEW_AddTask+0xc4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b07      	cmp	r3, #7
 80034bc:	d903      	bls.n	80034c6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80034be:	4828      	ldr	r0, [pc, #160]	; (8003560 <SYSVIEW_AddTask+0xc8>)
 80034c0:	f001 fbe8 	bl	8004c94 <SEGGER_SYSVIEW_Warn>
    return;
 80034c4:	e044      	b.n	8003550 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80034c6:	4b25      	ldr	r3, [pc, #148]	; (800355c <SYSVIEW_AddTask+0xc4>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4926      	ldr	r1, [pc, #152]	; (8003564 <SYSVIEW_AddTask+0xcc>)
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <SYSVIEW_AddTask+0xc4>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	4921      	ldr	r1, [pc, #132]	; (8003564 <SYSVIEW_AddTask+0xcc>)
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	3304      	adds	r3, #4
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80034f0:	4b1a      	ldr	r3, [pc, #104]	; (800355c <SYSVIEW_AddTask+0xc4>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	491b      	ldr	r1, [pc, #108]	; (8003564 <SYSVIEW_AddTask+0xcc>)
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	3308      	adds	r3, #8
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <SYSVIEW_AddTask+0xc4>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4916      	ldr	r1, [pc, #88]	; (8003564 <SYSVIEW_AddTask+0xcc>)
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	330c      	adds	r3, #12
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <SYSVIEW_AddTask+0xc4>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4910      	ldr	r1, [pc, #64]	; (8003564 <SYSVIEW_AddTask+0xcc>)
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	3310      	adds	r3, #16
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003532:	4b0a      	ldr	r3, [pc, #40]	; (800355c <SYSVIEW_AddTask+0xc4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3301      	adds	r3, #1
 8003538:	4a08      	ldr	r2, [pc, #32]	; (800355c <SYSVIEW_AddTask+0xc4>)
 800353a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f8ca 	bl	80036e0 <SYSVIEW_SendTaskInfo>
 800354c:	e000      	b.n	8003550 <SYSVIEW_AddTask+0xb8>
    return;
 800354e:	bf00      	nop

}
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	08006c04 	.word	0x08006c04
 800355c:	20012e78 	.word	0x20012e78
 8003560:	08006c0c 	.word	0x08006c0c
 8003564:	20012dd8 	.word	0x20012dd8

08003568 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003570:	4b59      	ldr	r3, [pc, #356]	; (80036d8 <SYSVIEW_DeleteTask+0x170>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80ab 	beq.w	80036d0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	e00d      	b.n	800359c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003580:	4956      	ldr	r1, [pc, #344]	; (80036dc <SYSVIEW_DeleteTask+0x174>)
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	429a      	cmp	r2, r3
 8003594:	d008      	beq.n	80035a8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3301      	adds	r3, #1
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	4b4e      	ldr	r3, [pc, #312]	; (80036d8 <SYSVIEW_DeleteTask+0x170>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d3ec      	bcc.n	8003580 <SYSVIEW_DeleteTask+0x18>
 80035a6:	e000      	b.n	80035aa <SYSVIEW_DeleteTask+0x42>
      break;
 80035a8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80035aa:	4b4b      	ldr	r3, [pc, #300]	; (80036d8 <SYSVIEW_DeleteTask+0x170>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d111      	bne.n	80035da <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4a46      	ldr	r2, [pc, #280]	; (80036dc <SYSVIEW_DeleteTask+0x174>)
 80035c2:	4413      	add	r3, r2
 80035c4:	2214      	movs	r2, #20
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f003 fafb 	bl	8006bc4 <memset>
    _NumTasks--;
 80035ce:	4b42      	ldr	r3, [pc, #264]	; (80036d8 <SYSVIEW_DeleteTask+0x170>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	4a40      	ldr	r2, [pc, #256]	; (80036d8 <SYSVIEW_DeleteTask+0x170>)
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	e07b      	b.n	80036d2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80035da:	4b3f      	ldr	r3, [pc, #252]	; (80036d8 <SYSVIEW_DeleteTask+0x170>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d276      	bcs.n	80036d2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80035e4:	4b3c      	ldr	r3, [pc, #240]	; (80036d8 <SYSVIEW_DeleteTask+0x170>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	1e5a      	subs	r2, r3, #1
 80035ea:	493c      	ldr	r1, [pc, #240]	; (80036dc <SYSVIEW_DeleteTask+0x174>)
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	6819      	ldr	r1, [r3, #0]
 80035f8:	4838      	ldr	r0, [pc, #224]	; (80036dc <SYSVIEW_DeleteTask+0x174>)
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4403      	add	r3, r0
 8003606:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003608:	4b33      	ldr	r3, [pc, #204]	; (80036d8 <SYSVIEW_DeleteTask+0x170>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	1e5a      	subs	r2, r3, #1
 800360e:	4933      	ldr	r1, [pc, #204]	; (80036dc <SYSVIEW_DeleteTask+0x174>)
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	3304      	adds	r3, #4
 800361c:	6819      	ldr	r1, [r3, #0]
 800361e:	482f      	ldr	r0, [pc, #188]	; (80036dc <SYSVIEW_DeleteTask+0x174>)
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4403      	add	r3, r0
 800362c:	3304      	adds	r3, #4
 800362e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003630:	4b29      	ldr	r3, [pc, #164]	; (80036d8 <SYSVIEW_DeleteTask+0x170>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	1e5a      	subs	r2, r3, #1
 8003636:	4929      	ldr	r1, [pc, #164]	; (80036dc <SYSVIEW_DeleteTask+0x174>)
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	3308      	adds	r3, #8
 8003644:	6819      	ldr	r1, [r3, #0]
 8003646:	4825      	ldr	r0, [pc, #148]	; (80036dc <SYSVIEW_DeleteTask+0x174>)
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4403      	add	r3, r0
 8003654:	3308      	adds	r3, #8
 8003656:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003658:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <SYSVIEW_DeleteTask+0x170>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	1e5a      	subs	r2, r3, #1
 800365e:	491f      	ldr	r1, [pc, #124]	; (80036dc <SYSVIEW_DeleteTask+0x174>)
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	330c      	adds	r3, #12
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	481b      	ldr	r0, [pc, #108]	; (80036dc <SYSVIEW_DeleteTask+0x174>)
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4403      	add	r3, r0
 800367c:	330c      	adds	r3, #12
 800367e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003680:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <SYSVIEW_DeleteTask+0x170>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	1e5a      	subs	r2, r3, #1
 8003686:	4915      	ldr	r1, [pc, #84]	; (80036dc <SYSVIEW_DeleteTask+0x174>)
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3310      	adds	r3, #16
 8003694:	6819      	ldr	r1, [r3, #0]
 8003696:	4811      	ldr	r0, [pc, #68]	; (80036dc <SYSVIEW_DeleteTask+0x174>)
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4403      	add	r3, r0
 80036a4:	3310      	adds	r3, #16
 80036a6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <SYSVIEW_DeleteTask+0x170>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	1e5a      	subs	r2, r3, #1
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4a09      	ldr	r2, [pc, #36]	; (80036dc <SYSVIEW_DeleteTask+0x174>)
 80036b8:	4413      	add	r3, r2
 80036ba:	2214      	movs	r2, #20
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f003 fa80 	bl	8006bc4 <memset>
    _NumTasks--;
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <SYSVIEW_DeleteTask+0x170>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	4a03      	ldr	r2, [pc, #12]	; (80036d8 <SYSVIEW_DeleteTask+0x170>)
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e000      	b.n	80036d2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80036d0:	bf00      	nop
  }
}
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20012e78 	.word	0x20012e78
 80036dc:	20012dd8 	.word	0x20012dd8

080036e0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80036ee:	f107 0314 	add.w	r3, r7, #20
 80036f2:	2214      	movs	r2, #20
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f003 fa64 	bl	8006bc4 <memset>
  TaskInfo.TaskID     = TaskID;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	4618      	mov	r0, r3
 8003716:	f000 feeb 	bl	80044f0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800371a:	bf00      	nop
 800371c:	3728      	adds	r7, #40	; 0x28
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800372a:	4b24      	ldr	r3, [pc, #144]	; (80037bc <_DoInit+0x98>)
 800372c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2203      	movs	r2, #3
 8003732:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2203      	movs	r2, #3
 8003738:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a20      	ldr	r2, [pc, #128]	; (80037c0 <_DoInit+0x9c>)
 800373e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a20      	ldr	r2, [pc, #128]	; (80037c4 <_DoInit+0xa0>)
 8003744:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800374c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a17      	ldr	r2, [pc, #92]	; (80037c0 <_DoInit+0x9c>)
 8003764:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a17      	ldr	r2, [pc, #92]	; (80037c8 <_DoInit+0xa4>)
 800376a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2210      	movs	r2, #16
 8003770:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3307      	adds	r3, #7
 8003788:	4a10      	ldr	r2, [pc, #64]	; (80037cc <_DoInit+0xa8>)
 800378a:	6810      	ldr	r0, [r2, #0]
 800378c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800378e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a0e      	ldr	r2, [pc, #56]	; (80037d0 <_DoInit+0xac>)
 8003796:	6810      	ldr	r0, [r2, #0]
 8003798:	6018      	str	r0, [r3, #0]
 800379a:	8891      	ldrh	r1, [r2, #4]
 800379c:	7992      	ldrb	r2, [r2, #6]
 800379e:	8099      	strh	r1, [r3, #4]
 80037a0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80037a2:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2220      	movs	r2, #32
 80037aa:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80037ac:	f3bf 8f5f 	dmb	sy
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	20012e7c 	.word	0x20012e7c
 80037c0:	08006c5c 	.word	0x08006c5c
 80037c4:	20012f24 	.word	0x20012f24
 80037c8:	20013324 	.word	0x20013324
 80037cc:	08006c68 	.word	0x08006c68
 80037d0:	08006c6c 	.word	0x08006c6c

080037d4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08c      	sub	sp, #48	; 0x30
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80037e0:	4b3e      	ldr	r3, [pc, #248]	; (80038dc <SEGGER_RTT_ReadNoLock+0x108>)
 80037e2:	623b      	str	r3, [r7, #32]
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <SEGGER_RTT_ReadNoLock+0x1e>
 80037ee:	f7ff ff99 	bl	8003724 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4613      	mov	r3, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4413      	add	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	3360      	adds	r3, #96	; 0x60
 80037fe:	4a37      	ldr	r2, [pc, #220]	; (80038dc <SEGGER_RTT_ReadNoLock+0x108>)
 8003800:	4413      	add	r3, r2
 8003802:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003814:	2300      	movs	r3, #0
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	429a      	cmp	r2, r3
 800381e:	d92b      	bls.n	8003878 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4293      	cmp	r3, r2
 8003830:	bf28      	it	cs
 8003832:	4613      	movcs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	4413      	add	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	6939      	ldr	r1, [r7, #16]
 8003844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003846:	f003 f9af 	bl	8006ba8 <memcpy>
    NumBytesRead += NumBytesRem;
 800384a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	4413      	add	r3, r2
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	4413      	add	r3, r2
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	4413      	add	r3, r2
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003870:	429a      	cmp	r2, r3
 8003872:	d101      	bne.n	8003878 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003874:	2300      	movs	r3, #0
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4293      	cmp	r3, r2
 8003886:	bf28      	it	cs
 8003888:	4613      	movcs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d019      	beq.n	80038c6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	4413      	add	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	6939      	ldr	r1, [r7, #16]
 80038a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038a2:	f003 f981 	bl	8006ba8 <memcpy>
    NumBytesRead += NumBytesRem;
 80038a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	4413      	add	r3, r2
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80038ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	4413      	add	r3, r2
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80038be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	4413      	add	r3, r2
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80038d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3730      	adds	r7, #48	; 0x30
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20012e7c 	.word	0x20012e7c

080038e0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80038f0:	e002      	b.n	80038f8 <_EncodeStr+0x18>
    Len++;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	3301      	adds	r3, #1
 80038f6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4413      	add	r3, r2
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f6      	bne.n	80038f2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	429a      	cmp	r2, r3
 800390a:	d901      	bls.n	8003910 <_EncodeStr+0x30>
    Len = Limit;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2bfe      	cmp	r3, #254	; 0xfe
 8003914:	d806      	bhi.n	8003924 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	60fa      	str	r2, [r7, #12]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]
 8003922:	e011      	b.n	8003948 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	60fa      	str	r2, [r7, #12]
 800392a:	22ff      	movs	r2, #255	; 0xff
 800392c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	60fa      	str	r2, [r7, #12]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	0a19      	lsrs	r1, r3, #8
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	60fa      	str	r2, [r7, #12]
 8003944:	b2ca      	uxtb	r2, r1
 8003946:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800394c:	e00a      	b.n	8003964 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	1c53      	adds	r3, r2, #1
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1c59      	adds	r1, r3, #1
 8003958:	60f9      	str	r1, [r7, #12]
 800395a:	7812      	ldrb	r2, [r2, #0]
 800395c:	701a      	strb	r2, [r3, #0]
    n++;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	3301      	adds	r3, #1
 8003962:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	429a      	cmp	r2, r3
 800396a:	d3f0      	bcc.n	800394e <_EncodeStr+0x6e>
  }
  return pPayload;
 800396c:	68fb      	ldr	r3, [r7, #12]
}
 800396e:	4618      	mov	r0, r3
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3304      	adds	r3, #4
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800399a:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <_HandleIncomingPacket+0xe0>)
 800399c:	7e1b      	ldrb	r3, [r3, #24]
 800399e:	4618      	mov	r0, r3
 80039a0:	1cfb      	adds	r3, r7, #3
 80039a2:	2201      	movs	r2, #1
 80039a4:	4619      	mov	r1, r3
 80039a6:	f7ff ff15 	bl	80037d4 <SEGGER_RTT_ReadNoLock>
 80039aa:	4603      	mov	r3, r0
 80039ac:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	dd54      	ble.n	8003a5e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	2b80      	cmp	r3, #128	; 0x80
 80039b8:	d032      	beq.n	8003a20 <_HandleIncomingPacket+0x8c>
 80039ba:	2b80      	cmp	r3, #128	; 0x80
 80039bc:	dc42      	bgt.n	8003a44 <_HandleIncomingPacket+0xb0>
 80039be:	2b07      	cmp	r3, #7
 80039c0:	dc16      	bgt.n	80039f0 <_HandleIncomingPacket+0x5c>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	dd3e      	ble.n	8003a44 <_HandleIncomingPacket+0xb0>
 80039c6:	3b01      	subs	r3, #1
 80039c8:	2b06      	cmp	r3, #6
 80039ca:	d83b      	bhi.n	8003a44 <_HandleIncomingPacket+0xb0>
 80039cc:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <_HandleIncomingPacket+0x40>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	080039f7 	.word	0x080039f7
 80039d8:	080039fd 	.word	0x080039fd
 80039dc:	08003a03 	.word	0x08003a03
 80039e0:	08003a09 	.word	0x08003a09
 80039e4:	08003a0f 	.word	0x08003a0f
 80039e8:	08003a15 	.word	0x08003a15
 80039ec:	08003a1b 	.word	0x08003a1b
 80039f0:	2b7f      	cmp	r3, #127	; 0x7f
 80039f2:	d036      	beq.n	8003a62 <_HandleIncomingPacket+0xce>
 80039f4:	e026      	b.n	8003a44 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80039f6:	f000 fc01 	bl	80041fc <SEGGER_SYSVIEW_Start>
      break;
 80039fa:	e037      	b.n	8003a6c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80039fc:	f000 fcb8 	bl	8004370 <SEGGER_SYSVIEW_Stop>
      break;
 8003a00:	e034      	b.n	8003a6c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003a02:	f000 fe6d 	bl	80046e0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003a06:	e031      	b.n	8003a6c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003a08:	f000 fe56 	bl	80046b8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003a0c:	e02e      	b.n	8003a6c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003a0e:	f000 fcd5 	bl	80043bc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003a12:	e02b      	b.n	8003a6c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003a14:	f001 f900 	bl	8004c18 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003a18:	e028      	b.n	8003a6c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003a1a:	f001 f8df 	bl	8004bdc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003a1e:	e025      	b.n	8003a6c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003a20:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <_HandleIncomingPacket+0xe0>)
 8003a22:	7e1b      	ldrb	r3, [r3, #24]
 8003a24:	4618      	mov	r0, r3
 8003a26:	1cfb      	adds	r3, r7, #3
 8003a28:	2201      	movs	r2, #1
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f7ff fed2 	bl	80037d4 <SEGGER_RTT_ReadNoLock>
 8003a30:	4603      	mov	r3, r0
 8003a32:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	dd15      	ble.n	8003a66 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 f84d 	bl	8004adc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003a42:	e010      	b.n	8003a66 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	b25b      	sxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	da0e      	bge.n	8003a6a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <_HandleIncomingPacket+0xe0>)
 8003a4e:	7e1b      	ldrb	r3, [r3, #24]
 8003a50:	4618      	mov	r0, r3
 8003a52:	1cfb      	adds	r3, r7, #3
 8003a54:	2201      	movs	r2, #1
 8003a56:	4619      	mov	r1, r3
 8003a58:	f7ff febc 	bl	80037d4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003a5c:	e005      	b.n	8003a6a <_HandleIncomingPacket+0xd6>
    }
  }
 8003a5e:	bf00      	nop
 8003a60:	e004      	b.n	8003a6c <_HandleIncomingPacket+0xd8>
      break;
 8003a62:	bf00      	nop
 8003a64:	e002      	b.n	8003a6c <_HandleIncomingPacket+0xd8>
      break;
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <_HandleIncomingPacket+0xd8>
      break;
 8003a6a:	bf00      	nop
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20013334 	.word	0x20013334

08003a78 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08c      	sub	sp, #48	; 0x30
 8003a7c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003a7e:	2301      	movs	r3, #1
 8003a80:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003a82:	1d3b      	adds	r3, r7, #4
 8003a84:	3301      	adds	r3, #1
 8003a86:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a8c:	4b31      	ldr	r3, [pc, #196]	; (8003b54 <_TrySendOverflowPacket+0xdc>)
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a92:	e00b      	b.n	8003aac <_TrySendOverflowPacket+0x34>
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9a:	1c59      	adds	r1, r3, #1
 8003a9c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	09db      	lsrs	r3, r3, #7
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	2b7f      	cmp	r3, #127	; 0x7f
 8003ab0:	d8f0      	bhi.n	8003a94 <_TrySendOverflowPacket+0x1c>
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003ac2:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <_TrySendOverflowPacket+0xe0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003ac8:	4b22      	ldr	r3, [pc, #136]	; (8003b54 <_TrySendOverflowPacket+0xdc>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	623b      	str	r3, [r7, #32]
 8003ada:	e00b      	b.n	8003af4 <_TrySendOverflowPacket+0x7c>
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	1c59      	adds	r1, r3, #1
 8003ae4:	6279      	str	r1, [r7, #36]	; 0x24
 8003ae6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	09db      	lsrs	r3, r3, #7
 8003af2:	623b      	str	r3, [r7, #32]
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	2b7f      	cmp	r3, #127	; 0x7f
 8003af8:	d8f0      	bhi.n	8003adc <_TrySendOverflowPacket+0x64>
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	627a      	str	r2, [r7, #36]	; 0x24
 8003b00:	6a3a      	ldr	r2, [r7, #32]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <_TrySendOverflowPacket+0xdc>)
 8003b0c:	785b      	ldrb	r3, [r3, #1]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	1d3b      	adds	r3, r7, #4
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f7fc fb58 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003b20:	4603      	mov	r3, r0
 8003b22:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <_TrySendOverflowPacket+0xdc>)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <_TrySendOverflowPacket+0xdc>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <_TrySendOverflowPacket+0xdc>)
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	e004      	b.n	8003b48 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003b3e:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <_TrySendOverflowPacket+0xdc>)
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	3301      	adds	r3, #1
 8003b44:	4a03      	ldr	r2, [pc, #12]	; (8003b54 <_TrySendOverflowPacket+0xdc>)
 8003b46:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003b48:	693b      	ldr	r3, [r7, #16]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3730      	adds	r7, #48	; 0x30
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20013334 	.word	0x20013334
 8003b58:	e0001004 	.word	0xe0001004

08003b5c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	; 0x28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003b68:	4b6c      	ldr	r3, [pc, #432]	; (8003d1c <_SendPacket+0x1c0>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d010      	beq.n	8003b92 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003b70:	4b6a      	ldr	r3, [pc, #424]	; (8003d1c <_SendPacket+0x1c0>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80a3 	beq.w	8003cc0 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003b7a:	4b68      	ldr	r3, [pc, #416]	; (8003d1c <_SendPacket+0x1c0>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d109      	bne.n	8003b96 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003b82:	f7ff ff79 	bl	8003a78 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003b86:	4b65      	ldr	r3, [pc, #404]	; (8003d1c <_SendPacket+0x1c0>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	f040 809a 	bne.w	8003cc4 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003b90:	e001      	b.n	8003b96 <_SendPacket+0x3a>
    goto Send;
 8003b92:	bf00      	nop
 8003b94:	e000      	b.n	8003b98 <_SendPacket+0x3c>
Send:
 8003b96:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b1f      	cmp	r3, #31
 8003b9c:	d809      	bhi.n	8003bb2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003b9e:	4b5f      	ldr	r3, [pc, #380]	; (8003d1c <_SendPacket+0x1c0>)
 8003ba0:	69da      	ldr	r2, [r3, #28]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f040 808b 	bne.w	8003cc8 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b17      	cmp	r3, #23
 8003bb6:	d807      	bhi.n	8003bc8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	e03d      	b.n	8003c44 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8003bd4:	d912      	bls.n	8003bfc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	09da      	lsrs	r2, r3, #7
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	3a01      	subs	r2, #1
 8003bee:	60fa      	str	r2, [r7, #12]
 8003bf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	e006      	b.n	8003c0a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c0e:	d912      	bls.n	8003c36 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	09da      	lsrs	r2, r3, #7
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	3a01      	subs	r2, #1
 8003c28:	60fa      	str	r2, [r7, #12]
 8003c2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	701a      	strb	r2, [r3, #0]
 8003c34:	e006      	b.n	8003c44 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003c44:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <_SendPacket+0x1c4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003c4a:	4b34      	ldr	r3, [pc, #208]	; (8003d1c <_SendPacket+0x1c0>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	623b      	str	r3, [r7, #32]
 8003c5c:	e00b      	b.n	8003c76 <_SendPacket+0x11a>
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	1c59      	adds	r1, r3, #1
 8003c66:	6279      	str	r1, [r7, #36]	; 0x24
 8003c68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	701a      	strb	r2, [r3, #0]
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	09db      	lsrs	r3, r3, #7
 8003c74:	623b      	str	r3, [r7, #32]
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	2b7f      	cmp	r3, #127	; 0x7f
 8003c7a:	d8f0      	bhi.n	8003c5e <_SendPacket+0x102>
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	627a      	str	r2, [r7, #36]	; 0x24
 8003c82:	6a3a      	ldr	r2, [r7, #32]
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003c8c:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <_SendPacket+0x1c0>)
 8003c8e:	785b      	ldrb	r3, [r3, #1]
 8003c90:	4618      	mov	r0, r3
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68f9      	ldr	r1, [r7, #12]
 8003c9c:	f7fc fa98 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003caa:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <_SendPacket+0x1c0>)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	60d3      	str	r3, [r2, #12]
 8003cb0:	e00b      	b.n	8003cca <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <_SendPacket+0x1c0>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <_SendPacket+0x1c0>)
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	e004      	b.n	8003cca <_SendPacket+0x16e>
    goto SendDone;
 8003cc0:	bf00      	nop
 8003cc2:	e002      	b.n	8003cca <_SendPacket+0x16e>
      goto SendDone;
 8003cc4:	bf00      	nop
 8003cc6:	e000      	b.n	8003cca <_SendPacket+0x16e>
      goto SendDone;
 8003cc8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <_SendPacket+0x1c0>)
 8003ccc:	7e1b      	ldrb	r3, [r3, #24]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4a14      	ldr	r2, [pc, #80]	; (8003d24 <_SendPacket+0x1c8>)
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	440b      	add	r3, r1
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	336c      	adds	r3, #108	; 0x6c
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <_SendPacket+0x1c0>)
 8003ce2:	7e1b      	ldrb	r3, [r3, #24]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	490f      	ldr	r1, [pc, #60]	; (8003d24 <_SendPacket+0x1c8>)
 8003ce8:	4603      	mov	r3, r0
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	4403      	add	r3, r0
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	440b      	add	r3, r1
 8003cf2:	3370      	adds	r3, #112	; 0x70
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d00b      	beq.n	8003d12 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <_SendPacket+0x1c0>)
 8003cfc:	789b      	ldrb	r3, [r3, #2]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d107      	bne.n	8003d12 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <_SendPacket+0x1c0>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003d08:	f7ff fe44 	bl	8003994 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	; (8003d1c <_SendPacket+0x1c0>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003d12:	bf00      	nop
 8003d14:	3728      	adds	r7, #40	; 0x28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20013334 	.word	0x20013334
 8003d20:	e0001004 	.word	0xe0001004
 8003d24:	20012e7c 	.word	0x20012e7c

08003d28 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003d30:	f3ef 8311 	mrs	r3, BASEPRI
 8003d34:	f04f 0120 	mov.w	r1, #32
 8003d38:	f381 8811 	msr	BASEPRI, r1
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	4808      	ldr	r0, [pc, #32]	; (8003d60 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003d40:	f7ff fe1b 	bl	800397a <_PreparePacket>
 8003d44:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	68b8      	ldr	r0, [r7, #8]
 8003d4c:	f7ff ff06 	bl	8003b5c <_SendPacket>
  RECORD_END();
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f383 8811 	msr	BASEPRI, r3
}
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20013364 	.word	0x20013364

08003d64 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d72:	f04f 0120 	mov.w	r1, #32
 8003d76:	f381 8811 	msr	BASEPRI, r1
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	4816      	ldr	r0, [pc, #88]	; (8003dd8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003d7e:	f7ff fdfc 	bl	800397a <_PreparePacket>
 8003d82:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	61fb      	str	r3, [r7, #28]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	e00b      	b.n	8003daa <SEGGER_SYSVIEW_RecordU32+0x46>
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	1c59      	adds	r1, r3, #1
 8003d9a:	61f9      	str	r1, [r7, #28]
 8003d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	701a      	strb	r2, [r3, #0]
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	09db      	lsrs	r3, r3, #7
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	2b7f      	cmp	r3, #127	; 0x7f
 8003dae:	d8f0      	bhi.n	8003d92 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	61fa      	str	r2, [r7, #28]
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	68f9      	ldr	r1, [r7, #12]
 8003dc4:	6938      	ldr	r0, [r7, #16]
 8003dc6:	f7ff fec9 	bl	8003b5c <_SendPacket>
  RECORD_END();
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f383 8811 	msr	BASEPRI, r3
}
 8003dd0:	bf00      	nop
 8003dd2:	3720      	adds	r7, #32
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20013364 	.word	0x20013364

08003ddc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08c      	sub	sp, #48	; 0x30
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003de8:	f3ef 8311 	mrs	r3, BASEPRI
 8003dec:	f04f 0120 	mov.w	r1, #32
 8003df0:	f381 8811 	msr	BASEPRI, r1
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	4825      	ldr	r0, [pc, #148]	; (8003e8c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003df8:	f7ff fdbf 	bl	800397a <_PreparePacket>
 8003dfc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e0a:	e00b      	b.n	8003e24 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	1c59      	adds	r1, r3, #1
 8003e14:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003e16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e20:	09db      	lsrs	r3, r3, #7
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	2b7f      	cmp	r3, #127	; 0x7f
 8003e28:	d8f0      	bhi.n	8003e0c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	623b      	str	r3, [r7, #32]
 8003e42:	e00b      	b.n	8003e5c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	1c59      	adds	r1, r3, #1
 8003e4c:	6279      	str	r1, [r7, #36]	; 0x24
 8003e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	09db      	lsrs	r3, r3, #7
 8003e5a:	623b      	str	r3, [r7, #32]
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8003e60:	d8f0      	bhi.n	8003e44 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	627a      	str	r2, [r7, #36]	; 0x24
 8003e68:	6a3a      	ldr	r2, [r7, #32]
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	6979      	ldr	r1, [r7, #20]
 8003e76:	69b8      	ldr	r0, [r7, #24]
 8003e78:	f7ff fe70 	bl	8003b5c <_SendPacket>
  RECORD_END();
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f383 8811 	msr	BASEPRI, r3
}
 8003e82:	bf00      	nop
 8003e84:	3730      	adds	r7, #48	; 0x30
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20013364 	.word	0x20013364

08003e90 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08e      	sub	sp, #56	; 0x38
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003e9e:	f3ef 8311 	mrs	r3, BASEPRI
 8003ea2:	f04f 0120 	mov.w	r1, #32
 8003ea6:	f381 8811 	msr	BASEPRI, r1
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	4832      	ldr	r0, [pc, #200]	; (8003f78 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003eae:	f7ff fd64 	bl	800397a <_PreparePacket>
 8003eb2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	637b      	str	r3, [r7, #52]	; 0x34
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8003ec0:	e00b      	b.n	8003eda <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec8:	1c59      	adds	r1, r3, #1
 8003eca:	6379      	str	r1, [r7, #52]	; 0x34
 8003ecc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	701a      	strb	r2, [r3, #0]
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed6:	09db      	lsrs	r3, r3, #7
 8003ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	2b7f      	cmp	r3, #127	; 0x7f
 8003ede:	d8f0      	bhi.n	8003ec2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	637a      	str	r2, [r7, #52]	; 0x34
 8003ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ef8:	e00b      	b.n	8003f12 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	1c59      	adds	r1, r3, #1
 8003f02:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003f04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	701a      	strb	r2, [r3, #0]
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	09db      	lsrs	r3, r3, #7
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	2b7f      	cmp	r3, #127	; 0x7f
 8003f16:	d8f0      	bhi.n	8003efa <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	e00b      	b.n	8003f4a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	1c59      	adds	r1, r3, #1
 8003f3a:	6279      	str	r1, [r7, #36]	; 0x24
 8003f3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	09db      	lsrs	r3, r3, #7
 8003f48:	623b      	str	r3, [r7, #32]
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f4e:	d8f0      	bhi.n	8003f32 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	627a      	str	r2, [r7, #36]	; 0x24
 8003f56:	6a3a      	ldr	r2, [r7, #32]
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	6979      	ldr	r1, [r7, #20]
 8003f64:	69b8      	ldr	r0, [r7, #24]
 8003f66:	f7ff fdf9 	bl	8003b5c <_SendPacket>
  RECORD_END();
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f383 8811 	msr	BASEPRI, r3
}
 8003f70:	bf00      	nop
 8003f72:	3738      	adds	r7, #56	; 0x38
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20013364 	.word	0x20013364

08003f7c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b090      	sub	sp, #64	; 0x40
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003f8a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f8e:	f04f 0120 	mov.w	r1, #32
 8003f92:	f381 8811 	msr	BASEPRI, r1
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	4840      	ldr	r0, [pc, #256]	; (800409c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003f9a:	f7ff fcee 	bl	800397a <_PreparePacket>
 8003f9e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fac:	e00b      	b.n	8003fc6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb4:	1c59      	adds	r1, r3, #1
 8003fb6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003fb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	701a      	strb	r2, [r3, #0]
 8003fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc2:	09db      	lsrs	r3, r3, #7
 8003fc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	2b7f      	cmp	r3, #127	; 0x7f
 8003fca:	d8f0      	bhi.n	8003fae <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]
 8003fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8003fe4:	e00b      	b.n	8003ffe <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fec:	1c59      	adds	r1, r3, #1
 8003fee:	6379      	str	r1, [r7, #52]	; 0x34
 8003ff0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	701a      	strb	r2, [r3, #0]
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	09db      	lsrs	r3, r3, #7
 8003ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	2b7f      	cmp	r3, #127	; 0x7f
 8004002:	d8f0      	bhi.n	8003fe6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	637a      	str	r2, [r7, #52]	; 0x34
 800400a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	701a      	strb	r2, [r3, #0]
 8004010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004012:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
 800401c:	e00b      	b.n	8004036 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	b2da      	uxtb	r2, r3
 8004022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004024:	1c59      	adds	r1, r3, #1
 8004026:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004028:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	09db      	lsrs	r3, r3, #7
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	2b7f      	cmp	r3, #127	; 0x7f
 800403a:	d8f0      	bhi.n	800401e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]
 8004048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
 8004050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004052:	623b      	str	r3, [r7, #32]
 8004054:	e00b      	b.n	800406e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	1c59      	adds	r1, r3, #1
 800405e:	6279      	str	r1, [r7, #36]	; 0x24
 8004060:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	701a      	strb	r2, [r3, #0]
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	09db      	lsrs	r3, r3, #7
 800406c:	623b      	str	r3, [r7, #32]
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	2b7f      	cmp	r3, #127	; 0x7f
 8004072:	d8f0      	bhi.n	8004056 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	627a      	str	r2, [r7, #36]	; 0x24
 800407a:	6a3a      	ldr	r2, [r7, #32]
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	6979      	ldr	r1, [r7, #20]
 8004088:	69b8      	ldr	r0, [r7, #24]
 800408a:	f7ff fd67 	bl	8003b5c <_SendPacket>
  RECORD_END();
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f383 8811 	msr	BASEPRI, r3
}
 8004094:	bf00      	nop
 8004096:	3740      	adds	r7, #64	; 0x40
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20013364 	.word	0x20013364

080040a0 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b092      	sub	sp, #72	; 0x48
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 80040ae:	f3ef 8311 	mrs	r3, BASEPRI
 80040b2:	f04f 0120 	mov.w	r1, #32
 80040b6:	f381 8811 	msr	BASEPRI, r1
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	484e      	ldr	r0, [pc, #312]	; (80041f8 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 80040be:	f7ff fc5c 	bl	800397a <_PreparePacket>
 80040c2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	647b      	str	r3, [r7, #68]	; 0x44
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	643b      	str	r3, [r7, #64]	; 0x40
 80040d0:	e00b      	b.n	80040ea <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 80040d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d8:	1c59      	adds	r1, r3, #1
 80040da:	6479      	str	r1, [r7, #68]	; 0x44
 80040dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]
 80040e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e6:	09db      	lsrs	r3, r3, #7
 80040e8:	643b      	str	r3, [r7, #64]	; 0x40
 80040ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ec:	2b7f      	cmp	r3, #127	; 0x7f
 80040ee:	d8f0      	bhi.n	80040d2 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 80040f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	647a      	str	r2, [r7, #68]	; 0x44
 80040f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	63bb      	str	r3, [r7, #56]	; 0x38
 8004108:	e00b      	b.n	8004122 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	b2da      	uxtb	r2, r3
 800410e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004110:	1c59      	adds	r1, r3, #1
 8004112:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004114:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411e:	09db      	lsrs	r3, r3, #7
 8004120:	63bb      	str	r3, [r7, #56]	; 0x38
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	2b7f      	cmp	r3, #127	; 0x7f
 8004126:	d8f0      	bhi.n	800410a <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8004128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800412e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004136:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	633b      	str	r3, [r7, #48]	; 0x30
 8004140:	e00b      	b.n	800415a <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	b2da      	uxtb	r2, r3
 8004146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004148:	1c59      	adds	r1, r3, #1
 800414a:	6379      	str	r1, [r7, #52]	; 0x34
 800414c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	09db      	lsrs	r3, r3, #7
 8004158:	633b      	str	r3, [r7, #48]	; 0x30
 800415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415c:	2b7f      	cmp	r3, #127	; 0x7f
 800415e:	d8f0      	bhi.n	8004142 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8004160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	637a      	str	r2, [r7, #52]	; 0x34
 8004166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]
 800416c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
 8004178:	e00b      	b.n	8004192 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	b2da      	uxtb	r2, r3
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004180:	1c59      	adds	r1, r3, #1
 8004182:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004184:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	701a      	strb	r2, [r3, #0]
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	09db      	lsrs	r3, r3, #7
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	2b7f      	cmp	r3, #127	; 0x7f
 8004196:	d8f0      	bhi.n	800417a <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8004198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800419e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
 80041ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ae:	623b      	str	r3, [r7, #32]
 80041b0:	e00b      	b.n	80041ca <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	1c59      	adds	r1, r3, #1
 80041ba:	6279      	str	r1, [r7, #36]	; 0x24
 80041bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	701a      	strb	r2, [r3, #0]
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	09db      	lsrs	r3, r3, #7
 80041c8:	623b      	str	r3, [r7, #32]
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	2b7f      	cmp	r3, #127	; 0x7f
 80041ce:	d8f0      	bhi.n	80041b2 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	627a      	str	r2, [r7, #36]	; 0x24
 80041d6:	6a3a      	ldr	r2, [r7, #32]
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	6979      	ldr	r1, [r7, #20]
 80041e4:	69b8      	ldr	r0, [r7, #24]
 80041e6:	f7ff fcb9 	bl	8003b5c <_SendPacket>
  RECORD_END();
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f383 8811 	msr	BASEPRI, r3
}
 80041f0:	bf00      	nop
 80041f2:	3748      	adds	r7, #72	; 0x48
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20013364 	.word	0x20013364

080041fc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08c      	sub	sp, #48	; 0x30
 8004200:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004202:	4b58      	ldr	r3, [pc, #352]	; (8004364 <SEGGER_SYSVIEW_Start+0x168>)
 8004204:	2201      	movs	r2, #1
 8004206:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004208:	f3ef 8311 	mrs	r3, BASEPRI
 800420c:	f04f 0120 	mov.w	r1, #32
 8004210:	f381 8811 	msr	BASEPRI, r1
 8004214:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004216:	4b53      	ldr	r3, [pc, #332]	; (8004364 <SEGGER_SYSVIEW_Start+0x168>)
 8004218:	785b      	ldrb	r3, [r3, #1]
 800421a:	220a      	movs	r2, #10
 800421c:	4952      	ldr	r1, [pc, #328]	; (8004368 <SEGGER_SYSVIEW_Start+0x16c>)
 800421e:	4618      	mov	r0, r3
 8004220:	f7fb ffd6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800422a:	200a      	movs	r0, #10
 800422c:	f7ff fd7c 	bl	8003d28 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004230:	f3ef 8311 	mrs	r3, BASEPRI
 8004234:	f04f 0120 	mov.w	r1, #32
 8004238:	f381 8811 	msr	BASEPRI, r1
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	484b      	ldr	r0, [pc, #300]	; (800436c <SEGGER_SYSVIEW_Start+0x170>)
 8004240:	f7ff fb9b 	bl	800397a <_PreparePacket>
 8004244:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800424e:	4b45      	ldr	r3, [pc, #276]	; (8004364 <SEGGER_SYSVIEW_Start+0x168>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	62bb      	str	r3, [r7, #40]	; 0x28
 8004254:	e00b      	b.n	800426e <SEGGER_SYSVIEW_Start+0x72>
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	b2da      	uxtb	r2, r3
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	1c59      	adds	r1, r3, #1
 800425e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004260:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	09db      	lsrs	r3, r3, #7
 800426c:	62bb      	str	r3, [r7, #40]	; 0x28
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	2b7f      	cmp	r3, #127	; 0x7f
 8004272:	d8f0      	bhi.n	8004256 <SEGGER_SYSVIEW_Start+0x5a>
 8004274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	62fa      	str	r2, [r7, #44]	; 0x2c
 800427a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004282:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
 8004288:	4b36      	ldr	r3, [pc, #216]	; (8004364 <SEGGER_SYSVIEW_Start+0x168>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	623b      	str	r3, [r7, #32]
 800428e:	e00b      	b.n	80042a8 <SEGGER_SYSVIEW_Start+0xac>
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	1c59      	adds	r1, r3, #1
 8004298:	6279      	str	r1, [r7, #36]	; 0x24
 800429a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	09db      	lsrs	r3, r3, #7
 80042a6:	623b      	str	r3, [r7, #32]
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	2b7f      	cmp	r3, #127	; 0x7f
 80042ac:	d8f0      	bhi.n	8004290 <SEGGER_SYSVIEW_Start+0x94>
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	627a      	str	r2, [r7, #36]	; 0x24
 80042b4:	6a3a      	ldr	r2, [r7, #32]
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	4b28      	ldr	r3, [pc, #160]	; (8004364 <SEGGER_SYSVIEW_Start+0x168>)
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	e00b      	b.n	80042e2 <SEGGER_SYSVIEW_Start+0xe6>
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	1c59      	adds	r1, r3, #1
 80042d2:	61f9      	str	r1, [r7, #28]
 80042d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	09db      	lsrs	r3, r3, #7
 80042e0:	61bb      	str	r3, [r7, #24]
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b7f      	cmp	r3, #127	; 0x7f
 80042e6:	d8f0      	bhi.n	80042ca <SEGGER_SYSVIEW_Start+0xce>
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	61fa      	str	r2, [r7, #28]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	2300      	movs	r3, #0
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	e00b      	b.n	800431a <SEGGER_SYSVIEW_Start+0x11e>
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	1c59      	adds	r1, r3, #1
 800430a:	6179      	str	r1, [r7, #20]
 800430c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	09db      	lsrs	r3, r3, #7
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b7f      	cmp	r3, #127	; 0x7f
 800431e:	d8f0      	bhi.n	8004302 <SEGGER_SYSVIEW_Start+0x106>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	617a      	str	r2, [r7, #20]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004330:	2218      	movs	r2, #24
 8004332:	6839      	ldr	r1, [r7, #0]
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff fc11 	bl	8003b5c <_SendPacket>
      RECORD_END();
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004340:	4b08      	ldr	r3, [pc, #32]	; (8004364 <SEGGER_SYSVIEW_Start+0x168>)
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004348:	4b06      	ldr	r3, [pc, #24]	; (8004364 <SEGGER_SYSVIEW_Start+0x168>)
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800434e:	f000 f9c7 	bl	80046e0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004352:	f000 f9b1 	bl	80046b8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004356:	f000 fc5f 	bl	8004c18 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800435a:	bf00      	nop
 800435c:	3730      	adds	r7, #48	; 0x30
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20013334 	.word	0x20013334
 8004368:	08006cb4 	.word	0x08006cb4
 800436c:	20013364 	.word	0x20013364

08004370 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004376:	f3ef 8311 	mrs	r3, BASEPRI
 800437a:	f04f 0120 	mov.w	r1, #32
 800437e:	f381 8811 	msr	BASEPRI, r1
 8004382:	607b      	str	r3, [r7, #4]
 8004384:	480b      	ldr	r0, [pc, #44]	; (80043b4 <SEGGER_SYSVIEW_Stop+0x44>)
 8004386:	f7ff faf8 	bl	800397a <_PreparePacket>
 800438a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800438c:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <SEGGER_SYSVIEW_Stop+0x48>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d007      	beq.n	80043a4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004394:	220b      	movs	r2, #11
 8004396:	6839      	ldr	r1, [r7, #0]
 8004398:	6838      	ldr	r0, [r7, #0]
 800439a:	f7ff fbdf 	bl	8003b5c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <SEGGER_SYSVIEW_Stop+0x48>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f383 8811 	msr	BASEPRI, r3
}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20013364 	.word	0x20013364
 80043b8:	20013334 	.word	0x20013334

080043bc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08c      	sub	sp, #48	; 0x30
 80043c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80043c2:	f3ef 8311 	mrs	r3, BASEPRI
 80043c6:	f04f 0120 	mov.w	r1, #32
 80043ca:	f381 8811 	msr	BASEPRI, r1
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	4845      	ldr	r0, [pc, #276]	; (80044e8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80043d2:	f7ff fad2 	bl	800397a <_PreparePacket>
 80043d6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e0:	4b42      	ldr	r3, [pc, #264]	; (80044ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043e6:	e00b      	b.n	8004400 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ee:	1c59      	adds	r1, r3, #1
 80043f0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80043f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	09db      	lsrs	r3, r3, #7
 80043fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	2b7f      	cmp	r3, #127	; 0x7f
 8004404:	d8f0      	bhi.n	80043e8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800440c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
 800441a:	4b34      	ldr	r3, [pc, #208]	; (80044ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	623b      	str	r3, [r7, #32]
 8004420:	e00b      	b.n	800443a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	b2da      	uxtb	r2, r3
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	1c59      	adds	r1, r3, #1
 800442a:	6279      	str	r1, [r7, #36]	; 0x24
 800442c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	09db      	lsrs	r3, r3, #7
 8004438:	623b      	str	r3, [r7, #32]
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	2b7f      	cmp	r3, #127	; 0x7f
 800443e:	d8f0      	bhi.n	8004422 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	627a      	str	r2, [r7, #36]	; 0x24
 8004446:	6a3a      	ldr	r2, [r7, #32]
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	61fb      	str	r3, [r7, #28]
 8004454:	4b25      	ldr	r3, [pc, #148]	; (80044ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e00b      	b.n	8004474 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	b2da      	uxtb	r2, r3
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	1c59      	adds	r1, r3, #1
 8004464:	61f9      	str	r1, [r7, #28]
 8004466:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	09db      	lsrs	r3, r3, #7
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b7f      	cmp	r3, #127	; 0x7f
 8004478:	d8f0      	bhi.n	800445c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	61fa      	str	r2, [r7, #28]
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	2300      	movs	r3, #0
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	e00b      	b.n	80044ac <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	b2da      	uxtb	r2, r3
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	1c59      	adds	r1, r3, #1
 800449c:	6179      	str	r1, [r7, #20]
 800449e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	09db      	lsrs	r3, r3, #7
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b7f      	cmp	r3, #127	; 0x7f
 80044b0:	d8f0      	bhi.n	8004494 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	617a      	str	r2, [r7, #20]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80044c2:	2218      	movs	r2, #24
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	68b8      	ldr	r0, [r7, #8]
 80044c8:	f7ff fb48 	bl	8003b5c <_SendPacket>
  RECORD_END();
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80044da:	4b04      	ldr	r3, [pc, #16]	; (80044ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	4798      	blx	r3
  }
}
 80044e0:	bf00      	nop
 80044e2:	3730      	adds	r7, #48	; 0x30
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20013364 	.word	0x20013364
 80044ec:	20013334 	.word	0x20013334

080044f0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b092      	sub	sp, #72	; 0x48
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80044f8:	f3ef 8311 	mrs	r3, BASEPRI
 80044fc:	f04f 0120 	mov.w	r1, #32
 8004500:	f381 8811 	msr	BASEPRI, r1
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	486a      	ldr	r0, [pc, #424]	; (80046b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004508:	f7ff fa37 	bl	800397a <_PreparePacket>
 800450c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	647b      	str	r3, [r7, #68]	; 0x44
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b66      	ldr	r3, [pc, #408]	; (80046b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	643b      	str	r3, [r7, #64]	; 0x40
 8004522:	e00b      	b.n	800453c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004526:	b2da      	uxtb	r2, r3
 8004528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800452a:	1c59      	adds	r1, r3, #1
 800452c:	6479      	str	r1, [r7, #68]	; 0x44
 800452e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004538:	09db      	lsrs	r3, r3, #7
 800453a:	643b      	str	r3, [r7, #64]	; 0x40
 800453c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800453e:	2b7f      	cmp	r3, #127	; 0x7f
 8004540:	d8f0      	bhi.n	8004524 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	647a      	str	r2, [r7, #68]	; 0x44
 8004548:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004550:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	63bb      	str	r3, [r7, #56]	; 0x38
 800455c:	e00b      	b.n	8004576 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	b2da      	uxtb	r2, r3
 8004562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004564:	1c59      	adds	r1, r3, #1
 8004566:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004568:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	701a      	strb	r2, [r3, #0]
 8004570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004572:	09db      	lsrs	r3, r3, #7
 8004574:	63bb      	str	r3, [r7, #56]	; 0x38
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	2b7f      	cmp	r3, #127	; 0x7f
 800457a:	d8f0      	bhi.n	800455e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800457c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	701a      	strb	r2, [r3, #0]
 8004588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800458a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2220      	movs	r2, #32
 8004592:	4619      	mov	r1, r3
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f7ff f9a3 	bl	80038e0 <_EncodeStr>
 800459a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800459c:	2209      	movs	r2, #9
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	6938      	ldr	r0, [r7, #16]
 80045a2:	f7ff fadb 	bl	8003b5c <_SendPacket>
  //
  pPayload = pPayloadStart;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	637b      	str	r3, [r7, #52]	; 0x34
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4b40      	ldr	r3, [pc, #256]	; (80046b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	633b      	str	r3, [r7, #48]	; 0x30
 80045ba:	e00b      	b.n	80045d4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c2:	1c59      	adds	r1, r3, #1
 80045c4:	6379      	str	r1, [r7, #52]	; 0x34
 80045c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	09db      	lsrs	r3, r3, #7
 80045d2:	633b      	str	r3, [r7, #48]	; 0x30
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	2b7f      	cmp	r3, #127	; 0x7f
 80045d8:	d8f0      	bhi.n	80045bc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80045da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	637a      	str	r2, [r7, #52]	; 0x34
 80045e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045f4:	e00b      	b.n	800460e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	1c59      	adds	r1, r3, #1
 80045fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004600:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	09db      	lsrs	r3, r3, #7
 800460c:	62bb      	str	r3, [r7, #40]	; 0x28
 800460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004610:	2b7f      	cmp	r3, #127	; 0x7f
 8004612:	d8f0      	bhi.n	80045f6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	62fa      	str	r2, [r7, #44]	; 0x2c
 800461a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004622:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	623b      	str	r3, [r7, #32]
 800462e:	e00b      	b.n	8004648 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	b2da      	uxtb	r2, r3
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	1c59      	adds	r1, r3, #1
 8004638:	6279      	str	r1, [r7, #36]	; 0x24
 800463a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	09db      	lsrs	r3, r3, #7
 8004646:	623b      	str	r3, [r7, #32]
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	2b7f      	cmp	r3, #127	; 0x7f
 800464c:	d8f0      	bhi.n	8004630 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	627a      	str	r2, [r7, #36]	; 0x24
 8004654:	6a3a      	ldr	r2, [r7, #32]
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	2300      	movs	r3, #0
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	e00b      	b.n	8004680 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	b2da      	uxtb	r2, r3
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	1c59      	adds	r1, r3, #1
 8004670:	61f9      	str	r1, [r7, #28]
 8004672:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	09db      	lsrs	r3, r3, #7
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	2b7f      	cmp	r3, #127	; 0x7f
 8004684:	d8f0      	bhi.n	8004668 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	61fa      	str	r2, [r7, #28]
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004696:	2215      	movs	r2, #21
 8004698:	68f9      	ldr	r1, [r7, #12]
 800469a:	6938      	ldr	r0, [r7, #16]
 800469c:	f7ff fa5e 	bl	8003b5c <_SendPacket>
  RECORD_END();
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f383 8811 	msr	BASEPRI, r3
}
 80046a6:	bf00      	nop
 80046a8:	3748      	adds	r7, #72	; 0x48
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20013364 	.word	0x20013364
 80046b4:	20013334 	.word	0x20013334

080046b8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80046bc:	4b07      	ldr	r3, [pc, #28]	; (80046dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80046ce:	4b03      	ldr	r3, [pc, #12]	; (80046dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	4798      	blx	r3
  }
}
 80046d6:	bf00      	nop
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20013334 	.word	0x20013334

080046e0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80046e6:	4b15      	ldr	r3, [pc, #84]	; (800473c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d01a      	beq.n	8004724 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80046ee:	4b13      	ldr	r3, [pc, #76]	; (800473c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d015      	beq.n	8004724 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80046f8:	4b10      	ldr	r3, [pc, #64]	; (800473c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4798      	blx	r3
 8004700:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004704:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004706:	e9d7 0100 	ldrd	r0, r1, [r7]
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	000a      	movs	r2, r1
 8004714:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004716:	4613      	mov	r3, r2
 8004718:	461a      	mov	r2, r3
 800471a:	4621      	mov	r1, r4
 800471c:	200d      	movs	r0, #13
 800471e:	f7ff fb5d 	bl	8003ddc <SEGGER_SYSVIEW_RecordU32x2>
 8004722:	e006      	b.n	8004732 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004724:	4b06      	ldr	r3, [pc, #24]	; (8004740 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4619      	mov	r1, r3
 800472a:	200c      	movs	r0, #12
 800472c:	f7ff fb1a 	bl	8003d64 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	bd90      	pop	{r4, r7, pc}
 800473a:	bf00      	nop
 800473c:	20013334 	.word	0x20013334
 8004740:	e0001004 	.word	0xe0001004

08004744 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800474a:	f3ef 8311 	mrs	r3, BASEPRI
 800474e:	f04f 0120 	mov.w	r1, #32
 8004752:	f381 8811 	msr	BASEPRI, r1
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	4819      	ldr	r0, [pc, #100]	; (80047c0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800475a:	f7ff f90e 	bl	800397a <_PreparePacket>
 800475e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004764:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	e00b      	b.n	8004790 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	b2da      	uxtb	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	1c59      	adds	r1, r3, #1
 8004780:	6179      	str	r1, [r7, #20]
 8004782:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	09db      	lsrs	r3, r3, #7
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	2b7f      	cmp	r3, #127	; 0x7f
 8004794:	d8f0      	bhi.n	8004778 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	617a      	str	r2, [r7, #20]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80047a6:	2202      	movs	r2, #2
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	68b8      	ldr	r0, [r7, #8]
 80047ac:	f7ff f9d6 	bl	8003b5c <_SendPacket>
  RECORD_END();
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f383 8811 	msr	BASEPRI, r3
}
 80047b6:	bf00      	nop
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20013364 	.word	0x20013364
 80047c4:	e000ed04 	.word	0xe000ed04

080047c8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80047ce:	f3ef 8311 	mrs	r3, BASEPRI
 80047d2:	f04f 0120 	mov.w	r1, #32
 80047d6:	f381 8811 	msr	BASEPRI, r1
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	4807      	ldr	r0, [pc, #28]	; (80047fc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80047de:	f7ff f8cc 	bl	800397a <_PreparePacket>
 80047e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80047e4:	2203      	movs	r2, #3
 80047e6:	6839      	ldr	r1, [r7, #0]
 80047e8:	6838      	ldr	r0, [r7, #0]
 80047ea:	f7ff f9b7 	bl	8003b5c <_SendPacket>
  RECORD_END();
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f383 8811 	msr	BASEPRI, r3
}
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	20013364 	.word	0x20013364

08004800 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004806:	f3ef 8311 	mrs	r3, BASEPRI
 800480a:	f04f 0120 	mov.w	r1, #32
 800480e:	f381 8811 	msr	BASEPRI, r1
 8004812:	607b      	str	r3, [r7, #4]
 8004814:	4807      	ldr	r0, [pc, #28]	; (8004834 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004816:	f7ff f8b0 	bl	800397a <_PreparePacket>
 800481a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800481c:	2212      	movs	r2, #18
 800481e:	6839      	ldr	r1, [r7, #0]
 8004820:	6838      	ldr	r0, [r7, #0]
 8004822:	f7ff f99b 	bl	8003b5c <_SendPacket>
  RECORD_END();
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f383 8811 	msr	BASEPRI, r3
}
 800482c:	bf00      	nop
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20013364 	.word	0x20013364

08004838 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800483e:	f3ef 8311 	mrs	r3, BASEPRI
 8004842:	f04f 0120 	mov.w	r1, #32
 8004846:	f381 8811 	msr	BASEPRI, r1
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	4807      	ldr	r0, [pc, #28]	; (800486c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800484e:	f7ff f894 	bl	800397a <_PreparePacket>
 8004852:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004854:	2211      	movs	r2, #17
 8004856:	6839      	ldr	r1, [r7, #0]
 8004858:	6838      	ldr	r0, [r7, #0]
 800485a:	f7ff f97f 	bl	8003b5c <_SendPacket>
  RECORD_END();
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f383 8811 	msr	BASEPRI, r3
}
 8004864:	bf00      	nop
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20013364 	.word	0x20013364

08004870 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004878:	f3ef 8311 	mrs	r3, BASEPRI
 800487c:	f04f 0120 	mov.w	r1, #32
 8004880:	f381 8811 	msr	BASEPRI, r1
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	4819      	ldr	r0, [pc, #100]	; (80048ec <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004888:	f7ff f877 	bl	800397a <_PreparePacket>
 800488c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004892:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	61bb      	str	r3, [r7, #24]
 80048a4:	e00b      	b.n	80048be <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	1c59      	adds	r1, r3, #1
 80048ae:	61f9      	str	r1, [r7, #28]
 80048b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	701a      	strb	r2, [r3, #0]
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	09db      	lsrs	r3, r3, #7
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b7f      	cmp	r3, #127	; 0x7f
 80048c2:	d8f0      	bhi.n	80048a6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	61fa      	str	r2, [r7, #28]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80048d4:	2208      	movs	r2, #8
 80048d6:	68f9      	ldr	r1, [r7, #12]
 80048d8:	6938      	ldr	r0, [r7, #16]
 80048da:	f7ff f93f 	bl	8003b5c <_SendPacket>
  RECORD_END();
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f383 8811 	msr	BASEPRI, r3
}
 80048e4:	bf00      	nop
 80048e6:	3720      	adds	r7, #32
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20013364 	.word	0x20013364
 80048f0:	20013334 	.word	0x20013334

080048f4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80048fc:	f3ef 8311 	mrs	r3, BASEPRI
 8004900:	f04f 0120 	mov.w	r1, #32
 8004904:	f381 8811 	msr	BASEPRI, r1
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	4819      	ldr	r0, [pc, #100]	; (8004970 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800490c:	f7ff f835 	bl	800397a <_PreparePacket>
 8004910:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004916:	4b17      	ldr	r3, [pc, #92]	; (8004974 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	61bb      	str	r3, [r7, #24]
 8004928:	e00b      	b.n	8004942 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	b2da      	uxtb	r2, r3
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	1c59      	adds	r1, r3, #1
 8004932:	61f9      	str	r1, [r7, #28]
 8004934:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	701a      	strb	r2, [r3, #0]
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	09db      	lsrs	r3, r3, #7
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b7f      	cmp	r3, #127	; 0x7f
 8004946:	d8f0      	bhi.n	800492a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	61fa      	str	r2, [r7, #28]
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	701a      	strb	r2, [r3, #0]
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004958:	2204      	movs	r2, #4
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	6938      	ldr	r0, [r7, #16]
 800495e:	f7ff f8fd 	bl	8003b5c <_SendPacket>
  RECORD_END();
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f383 8811 	msr	BASEPRI, r3
}
 8004968:	bf00      	nop
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20013364 	.word	0x20013364
 8004974:	20013334 	.word	0x20013334

08004978 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004980:	f3ef 8311 	mrs	r3, BASEPRI
 8004984:	f04f 0120 	mov.w	r1, #32
 8004988:	f381 8811 	msr	BASEPRI, r1
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	4819      	ldr	r0, [pc, #100]	; (80049f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004990:	f7fe fff3 	bl	800397a <_PreparePacket>
 8004994:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800499a:	4b17      	ldr	r3, [pc, #92]	; (80049f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	61bb      	str	r3, [r7, #24]
 80049ac:	e00b      	b.n	80049c6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	1c59      	adds	r1, r3, #1
 80049b6:	61f9      	str	r1, [r7, #28]
 80049b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	09db      	lsrs	r3, r3, #7
 80049c4:	61bb      	str	r3, [r7, #24]
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b7f      	cmp	r3, #127	; 0x7f
 80049ca:	d8f0      	bhi.n	80049ae <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	61fa      	str	r2, [r7, #28]
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80049dc:	2206      	movs	r2, #6
 80049de:	68f9      	ldr	r1, [r7, #12]
 80049e0:	6938      	ldr	r0, [r7, #16]
 80049e2:	f7ff f8bb 	bl	8003b5c <_SendPacket>
  RECORD_END();
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f383 8811 	msr	BASEPRI, r3
}
 80049ec:	bf00      	nop
 80049ee:	3720      	adds	r7, #32
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20013364 	.word	0x20013364
 80049f8:	20013334 	.word	0x20013334

080049fc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08a      	sub	sp, #40	; 0x28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004a06:	f3ef 8311 	mrs	r3, BASEPRI
 8004a0a:	f04f 0120 	mov.w	r1, #32
 8004a0e:	f381 8811 	msr	BASEPRI, r1
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	4827      	ldr	r0, [pc, #156]	; (8004ab4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004a16:	f7fe ffb0 	bl	800397a <_PreparePacket>
 8004a1a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004a20:	4b25      	ldr	r3, [pc, #148]	; (8004ab8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	623b      	str	r3, [r7, #32]
 8004a32:	e00b      	b.n	8004a4c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	1c59      	adds	r1, r3, #1
 8004a3c:	6279      	str	r1, [r7, #36]	; 0x24
 8004a3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	09db      	lsrs	r3, r3, #7
 8004a4a:	623b      	str	r3, [r7, #32]
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a50:	d8f0      	bhi.n	8004a34 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	627a      	str	r2, [r7, #36]	; 0x24
 8004a58:	6a3a      	ldr	r2, [r7, #32]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	e00b      	b.n	8004a84 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	1c59      	adds	r1, r3, #1
 8004a74:	61f9      	str	r1, [r7, #28]
 8004a76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	09db      	lsrs	r3, r3, #7
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b7f      	cmp	r3, #127	; 0x7f
 8004a88:	d8f0      	bhi.n	8004a6c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	61fa      	str	r2, [r7, #28]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004a9a:	2207      	movs	r2, #7
 8004a9c:	68f9      	ldr	r1, [r7, #12]
 8004a9e:	6938      	ldr	r0, [r7, #16]
 8004aa0:	f7ff f85c 	bl	8003b5c <_SendPacket>
  RECORD_END();
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f383 8811 	msr	BASEPRI, r3
}
 8004aaa:	bf00      	nop
 8004aac:	3728      	adds	r7, #40	; 0x28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20013364 	.word	0x20013364
 8004ab8:	20013334 	.word	0x20013334

08004abc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004ac4:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	1ad3      	subs	r3, r2, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	20013334 	.word	0x20013334

08004adc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08c      	sub	sp, #48	; 0x30
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004ae6:	4b3b      	ldr	r3, [pc, #236]	; (8004bd4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d06d      	beq.n	8004bca <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004aee:	4b39      	ldr	r3, [pc, #228]	; (8004bd4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004af4:	2300      	movs	r3, #0
 8004af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af8:	e008      	b.n	8004b0c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	3301      	adds	r3, #1
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d3f2      	bcc.n	8004afa <SEGGER_SYSVIEW_SendModule+0x1e>
 8004b14:	e000      	b.n	8004b18 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004b16:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d055      	beq.n	8004bca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004b1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b22:	f04f 0120 	mov.w	r1, #32
 8004b26:	f381 8811 	msr	BASEPRI, r1
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	482a      	ldr	r0, [pc, #168]	; (8004bd8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004b2e:	f7fe ff24 	bl	800397a <_PreparePacket>
 8004b32:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	623b      	str	r3, [r7, #32]
 8004b40:	e00b      	b.n	8004b5a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	1c59      	adds	r1, r3, #1
 8004b4a:	6279      	str	r1, [r7, #36]	; 0x24
 8004b4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	09db      	lsrs	r3, r3, #7
 8004b58:	623b      	str	r3, [r7, #32]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b5e:	d8f0      	bhi.n	8004b42 <SEGGER_SYSVIEW_SendModule+0x66>
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	627a      	str	r2, [r7, #36]	; 0x24
 8004b66:	6a3a      	ldr	r2, [r7, #32]
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	701a      	strb	r2, [r3, #0]
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	61fb      	str	r3, [r7, #28]
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	e00b      	b.n	8004b94 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	1c59      	adds	r1, r3, #1
 8004b84:	61f9      	str	r1, [r7, #28]
 8004b86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	09db      	lsrs	r3, r3, #7
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b7f      	cmp	r3, #127	; 0x7f
 8004b98:	d8f0      	bhi.n	8004b7c <SEGGER_SYSVIEW_SendModule+0xa0>
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	61fa      	str	r2, [r7, #28]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2280      	movs	r2, #128	; 0x80
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f7fe fe94 	bl	80038e0 <_EncodeStr>
 8004bb8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004bba:	2216      	movs	r2, #22
 8004bbc:	68f9      	ldr	r1, [r7, #12]
 8004bbe:	6938      	ldr	r0, [r7, #16]
 8004bc0:	f7fe ffcc 	bl	8003b5c <_SendPacket>
      RECORD_END();
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004bca:	bf00      	nop
 8004bcc:	3730      	adds	r7, #48	; 0x30
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	2001335c 	.word	0x2001335c
 8004bd8:	20013364 	.word	0x20013364

08004bdc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004be2:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00f      	beq.n	8004c0a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004bea:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f2      	bne.n	8004bf0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	2001335c 	.word	0x2001335c

08004c18 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004c1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c22:	f04f 0120 	mov.w	r1, #32
 8004c26:	f381 8811 	msr	BASEPRI, r1
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	4817      	ldr	r0, [pc, #92]	; (8004c8c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004c2e:	f7fe fea4 	bl	800397a <_PreparePacket>
 8004c32:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	e00b      	b.n	8004c5c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	1c59      	adds	r1, r3, #1
 8004c4c:	6179      	str	r1, [r7, #20]
 8004c4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	09db      	lsrs	r3, r3, #7
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c60:	d8f0      	bhi.n	8004c44 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	617a      	str	r2, [r7, #20]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004c72:	221b      	movs	r2, #27
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	68b8      	ldr	r0, [r7, #8]
 8004c78:	f7fe ff70 	bl	8003b5c <_SendPacket>
  RECORD_END();
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f383 8811 	msr	BASEPRI, r3
}
 8004c82:	bf00      	nop
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20013364 	.word	0x20013364
 8004c90:	20013360 	.word	0x20013360

08004c94 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	; 0x28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004ca0:	f04f 0120 	mov.w	r1, #32
 8004ca4:	f381 8811 	msr	BASEPRI, r1
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	4827      	ldr	r0, [pc, #156]	; (8004d48 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004cac:	f7fe fe65 	bl	800397a <_PreparePacket>
 8004cb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004cb2:	2280      	movs	r2, #128	; 0x80
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	6938      	ldr	r0, [r7, #16]
 8004cb8:	f7fe fe12 	bl	80038e0 <_EncodeStr>
 8004cbc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	623b      	str	r3, [r7, #32]
 8004cc6:	e00b      	b.n	8004ce0 <SEGGER_SYSVIEW_Warn+0x4c>
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	1c59      	adds	r1, r3, #1
 8004cd0:	6279      	str	r1, [r7, #36]	; 0x24
 8004cd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	09db      	lsrs	r3, r3, #7
 8004cde:	623b      	str	r3, [r7, #32]
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ce4:	d8f0      	bhi.n	8004cc8 <SEGGER_SYSVIEW_Warn+0x34>
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	627a      	str	r2, [r7, #36]	; 0x24
 8004cec:	6a3a      	ldr	r2, [r7, #32]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	e00b      	b.n	8004d18 <SEGGER_SYSVIEW_Warn+0x84>
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	1c59      	adds	r1, r3, #1
 8004d08:	61f9      	str	r1, [r7, #28]
 8004d0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	09db      	lsrs	r3, r3, #7
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d1c:	d8f0      	bhi.n	8004d00 <SEGGER_SYSVIEW_Warn+0x6c>
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	61fa      	str	r2, [r7, #28]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004d2e:	221a      	movs	r2, #26
 8004d30:	68f9      	ldr	r1, [r7, #12]
 8004d32:	6938      	ldr	r0, [r7, #16]
 8004d34:	f7fe ff12 	bl	8003b5c <_SendPacket>
  RECORD_END();
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f383 8811 	msr	BASEPRI, r3
}
 8004d3e:	bf00      	nop
 8004d40:	3728      	adds	r7, #40	; 0x28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20013364 	.word	0x20013364

08004d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d52:	f000 fc61 	bl	8005618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d56:	f000 f88f 	bl	8004e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d5a:	f000 f8f7 	bl	8004f4c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 8004d5e:	4b38      	ldr	r3, [pc, #224]	; (8004e40 <main+0xf4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a37      	ldr	r2, [pc, #220]	; (8004e40 <main+0xf4>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	6013      	str	r3, [r2, #0]


  status = xTaskCreate(led_green_handler, "green let task", 200, NULL, 3, &task1_handle);
 8004d6a:	4b36      	ldr	r3, [pc, #216]	; (8004e44 <main+0xf8>)
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	2303      	movs	r3, #3
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	2300      	movs	r3, #0
 8004d74:	22c8      	movs	r2, #200	; 0xc8
 8004d76:	4934      	ldr	r1, [pc, #208]	; (8004e48 <main+0xfc>)
 8004d78:	4834      	ldr	r0, [pc, #208]	; (8004e4c <main+0x100>)
 8004d7a:	f7fc fa03 	bl	8001184 <xTaskCreate>
 8004d7e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d00a      	beq.n	8004d9c <main+0x50>
        __asm volatile
 8004d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	613b      	str	r3, [r7, #16]
    }
 8004d98:	bf00      	nop
 8004d9a:	e7fe      	b.n	8004d9a <main+0x4e>
  next_task_handle = task1_handle;
 8004d9c:	4b29      	ldr	r3, [pc, #164]	; (8004e44 <main+0xf8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a2b      	ldr	r2, [pc, #172]	; (8004e50 <main+0x104>)
 8004da2:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_red_handler, "red let task", 200, NULL, 2, &task2_handle);
 8004da4:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <main+0x108>)
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	2302      	movs	r3, #2
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	2300      	movs	r3, #0
 8004dae:	22c8      	movs	r2, #200	; 0xc8
 8004db0:	4929      	ldr	r1, [pc, #164]	; (8004e58 <main+0x10c>)
 8004db2:	482a      	ldr	r0, [pc, #168]	; (8004e5c <main+0x110>)
 8004db4:	f7fc f9e6 	bl	8001184 <xTaskCreate>
 8004db8:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d00a      	beq.n	8004dd6 <main+0x8a>
        __asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	60fb      	str	r3, [r7, #12]
    }
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <main+0x88>

  status = xTaskCreate(led_orange_handler, "orange let task", 200, NULL, 1, &task3_handle);
 8004dd6:	4b22      	ldr	r3, [pc, #136]	; (8004e60 <main+0x114>)
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	2301      	movs	r3, #1
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	2300      	movs	r3, #0
 8004de0:	22c8      	movs	r2, #200	; 0xc8
 8004de2:	4920      	ldr	r1, [pc, #128]	; (8004e64 <main+0x118>)
 8004de4:	4820      	ldr	r0, [pc, #128]	; (8004e68 <main+0x11c>)
 8004de6:	f7fc f9cd 	bl	8001184 <xTaskCreate>
 8004dea:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d00a      	beq.n	8004e08 <main+0xbc>
        __asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	60bb      	str	r3, [r7, #8]
    }
 8004e04:	bf00      	nop
 8004e06:	e7fe      	b.n	8004e06 <main+0xba>

  status = xTaskCreate(button_handler, "button handler", 200, NULL, 4, &btn_handle);
 8004e08:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <main+0x120>)
 8004e0a:	9301      	str	r3, [sp, #4]
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2300      	movs	r3, #0
 8004e12:	22c8      	movs	r2, #200	; 0xc8
 8004e14:	4916      	ldr	r1, [pc, #88]	; (8004e70 <main+0x124>)
 8004e16:	4817      	ldr	r0, [pc, #92]	; (8004e74 <main+0x128>)
 8004e18:	f7fc f9b4 	bl	8001184 <xTaskCreate>
 8004e1c:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d00a      	beq.n	8004e3a <main+0xee>
        __asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	607b      	str	r3, [r7, #4]
    }
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <main+0xec>

  vTaskStartScheduler();
 8004e3a:	f7fc fbe9 	bl	8001610 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004e3e:	e7fe      	b.n	8004e3e <main+0xf2>
 8004e40:	e0001000 	.word	0xe0001000
 8004e44:	20013448 	.word	0x20013448
 8004e48:	08006c74 	.word	0x08006c74
 8004e4c:	08005269 	.word	0x08005269
 8004e50:	20013458 	.word	0x20013458
 8004e54:	2001344c 	.word	0x2001344c
 8004e58:	08006c84 	.word	0x08006c84
 8004e5c:	080052c5 	.word	0x080052c5
 8004e60:	20013450 	.word	0x20013450
 8004e64:	08006c94 	.word	0x08006c94
 8004e68:	08005321 	.word	0x08005321
 8004e6c:	20013454 	.word	0x20013454
 8004e70:	08006ca4 	.word	0x08006ca4
 8004e74:	08005385 	.word	0x08005385

08004e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b094      	sub	sp, #80	; 0x50
 8004e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e7e:	f107 0320 	add.w	r3, r7, #32
 8004e82:	2230      	movs	r2, #48	; 0x30
 8004e84:	2100      	movs	r1, #0
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 fe9c 	bl	8006bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e8c:	f107 030c 	add.w	r3, r7, #12
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	609a      	str	r2, [r3, #8]
 8004e98:	60da      	str	r2, [r3, #12]
 8004e9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60bb      	str	r3, [r7, #8]
 8004ea0:	4b28      	ldr	r3, [pc, #160]	; (8004f44 <SystemClock_Config+0xcc>)
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	4a27      	ldr	r2, [pc, #156]	; (8004f44 <SystemClock_Config+0xcc>)
 8004ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8004eac:	4b25      	ldr	r3, [pc, #148]	; (8004f44 <SystemClock_Config+0xcc>)
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eb8:	2300      	movs	r3, #0
 8004eba:	607b      	str	r3, [r7, #4]
 8004ebc:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <SystemClock_Config+0xd0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a21      	ldr	r2, [pc, #132]	; (8004f48 <SystemClock_Config+0xd0>)
 8004ec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	4b1f      	ldr	r3, [pc, #124]	; (8004f48 <SystemClock_Config+0xd0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed0:	607b      	str	r3, [r7, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004edc:	2310      	movs	r3, #16
 8004ede:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004ee8:	2308      	movs	r3, #8
 8004eea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8004eec:	2332      	movs	r3, #50	; 0x32
 8004eee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004ef4:	2307      	movs	r3, #7
 8004ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ef8:	f107 0320 	add.w	r3, r7, #32
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 febb 	bl	8005c78 <HAL_RCC_OscConfig>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004f08:	f000 fa76 	bl	80053f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f0c:	230f      	movs	r3, #15
 8004f0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f10:	2302      	movs	r3, #2
 8004f12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004f18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004f1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004f24:	f107 030c 	add.w	r3, r7, #12
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f001 f91c 	bl	8006168 <HAL_RCC_ClockConfig>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004f36:	f000 fa5f 	bl	80053f8 <Error_Handler>
  }
}
 8004f3a:	bf00      	nop
 8004f3c:	3750      	adds	r7, #80	; 0x50
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40007000 	.word	0x40007000

08004f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08c      	sub	sp, #48	; 0x30
 8004f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f52:	f107 031c 	add.w	r3, r7, #28
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	605a      	str	r2, [r3, #4]
 8004f5c:	609a      	str	r2, [r3, #8]
 8004f5e:	60da      	str	r2, [r3, #12]
 8004f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	4ba6      	ldr	r3, [pc, #664]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	4aa5      	ldr	r2, [pc, #660]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004f6c:	f043 0310 	orr.w	r3, r3, #16
 8004f70:	6313      	str	r3, [r2, #48]	; 0x30
 8004f72:	4ba3      	ldr	r3, [pc, #652]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	61bb      	str	r3, [r7, #24]
 8004f7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	4b9f      	ldr	r3, [pc, #636]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	4a9e      	ldr	r2, [pc, #632]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004f88:	f043 0304 	orr.w	r3, r3, #4
 8004f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8e:	4b9c      	ldr	r3, [pc, #624]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	4b98      	ldr	r3, [pc, #608]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	4a97      	ldr	r2, [pc, #604]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8004faa:	4b95      	ldr	r3, [pc, #596]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	4b91      	ldr	r3, [pc, #580]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	4a90      	ldr	r2, [pc, #576]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fc6:	4b8e      	ldr	r3, [pc, #568]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	4b8a      	ldr	r3, [pc, #552]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	4a89      	ldr	r2, [pc, #548]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004fdc:	f043 0302 	orr.w	r3, r3, #2
 8004fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fe2:	4b87      	ldr	r3, [pc, #540]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	4b83      	ldr	r3, [pc, #524]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	4a82      	ldr	r2, [pc, #520]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8004ff8:	f043 0308 	orr.w	r3, r3, #8
 8004ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ffe:	4b80      	ldr	r3, [pc, #512]	; (8005200 <MX_GPIO_Init+0x2b4>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800500a:	2200      	movs	r2, #0
 800500c:	2108      	movs	r1, #8
 800500e:	487d      	ldr	r0, [pc, #500]	; (8005204 <MX_GPIO_Init+0x2b8>)
 8005010:	f000 fdda 	bl	8005bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8005014:	2201      	movs	r2, #1
 8005016:	2101      	movs	r1, #1
 8005018:	487b      	ldr	r0, [pc, #492]	; (8005208 <MX_GPIO_Init+0x2bc>)
 800501a:	f000 fdd5 	bl	8005bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800501e:	2200      	movs	r2, #0
 8005020:	f24f 0110 	movw	r1, #61456	; 0xf010
 8005024:	4879      	ldr	r0, [pc, #484]	; (800520c <MX_GPIO_Init+0x2c0>)
 8005026:	f000 fdcf 	bl	8005bc8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800502a:	2308      	movs	r3, #8
 800502c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800502e:	2301      	movs	r3, #1
 8005030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005032:	2300      	movs	r3, #0
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005036:	2300      	movs	r3, #0
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800503a:	f107 031c 	add.w	r3, r7, #28
 800503e:	4619      	mov	r1, r3
 8005040:	4870      	ldr	r0, [pc, #448]	; (8005204 <MX_GPIO_Init+0x2b8>)
 8005042:	f000 fc0d 	bl	8005860 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8005046:	2301      	movs	r3, #1
 8005048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800504a:	2301      	movs	r3, #1
 800504c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504e:	2300      	movs	r3, #0
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005052:	2300      	movs	r3, #0
 8005054:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005056:	f107 031c 	add.w	r3, r7, #28
 800505a:	4619      	mov	r1, r3
 800505c:	486a      	ldr	r0, [pc, #424]	; (8005208 <MX_GPIO_Init+0x2bc>)
 800505e:	f000 fbff 	bl	8005860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8005062:	2308      	movs	r3, #8
 8005064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005066:	2302      	movs	r3, #2
 8005068:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506a:	2300      	movs	r3, #0
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800506e:	2300      	movs	r3, #0
 8005070:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005072:	2305      	movs	r3, #5
 8005074:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8005076:	f107 031c 	add.w	r3, r7, #28
 800507a:	4619      	mov	r1, r3
 800507c:	4862      	ldr	r0, [pc, #392]	; (8005208 <MX_GPIO_Init+0x2bc>)
 800507e:	f000 fbef 	bl	8005860 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005082:	2301      	movs	r3, #1
 8005084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005086:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800508a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508c:	2300      	movs	r3, #0
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005090:	f107 031c 	add.w	r3, r7, #28
 8005094:	4619      	mov	r1, r3
 8005096:	485e      	ldr	r0, [pc, #376]	; (8005210 <MX_GPIO_Init+0x2c4>)
 8005098:	f000 fbe2 	bl	8005860 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800509c:	2310      	movs	r3, #16
 800509e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a0:	2302      	movs	r3, #2
 80050a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a8:	2300      	movs	r3, #0
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80050ac:	2306      	movs	r3, #6
 80050ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80050b0:	f107 031c 	add.w	r3, r7, #28
 80050b4:	4619      	mov	r1, r3
 80050b6:	4856      	ldr	r0, [pc, #344]	; (8005210 <MX_GPIO_Init+0x2c4>)
 80050b8:	f000 fbd2 	bl	8005860 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80050bc:	23e0      	movs	r3, #224	; 0xe0
 80050be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c0:	2302      	movs	r3, #2
 80050c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c8:	2300      	movs	r3, #0
 80050ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80050cc:	2305      	movs	r3, #5
 80050ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d0:	f107 031c 	add.w	r3, r7, #28
 80050d4:	4619      	mov	r1, r3
 80050d6:	484e      	ldr	r0, [pc, #312]	; (8005210 <MX_GPIO_Init+0x2c4>)
 80050d8:	f000 fbc2 	bl	8005860 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80050dc:	2304      	movs	r3, #4
 80050de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050e0:	2300      	movs	r3, #0
 80050e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80050e8:	f107 031c 	add.w	r3, r7, #28
 80050ec:	4619      	mov	r1, r3
 80050ee:	4849      	ldr	r0, [pc, #292]	; (8005214 <MX_GPIO_Init+0x2c8>)
 80050f0:	f000 fbb6 	bl	8005860 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80050f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fa:	2302      	movs	r3, #2
 80050fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005102:	2300      	movs	r3, #0
 8005104:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005106:	2305      	movs	r3, #5
 8005108:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800510a:	f107 031c 	add.w	r3, r7, #28
 800510e:	4619      	mov	r1, r3
 8005110:	4840      	ldr	r0, [pc, #256]	; (8005214 <MX_GPIO_Init+0x2c8>)
 8005112:	f000 fba5 	bl	8005860 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8005116:	f24f 0310 	movw	r3, #61456	; 0xf010
 800511a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800511c:	2301      	movs	r3, #1
 800511e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005120:	2300      	movs	r3, #0
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005124:	2300      	movs	r3, #0
 8005126:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005128:	f107 031c 	add.w	r3, r7, #28
 800512c:	4619      	mov	r1, r3
 800512e:	4837      	ldr	r0, [pc, #220]	; (800520c <MX_GPIO_Init+0x2c0>)
 8005130:	f000 fb96 	bl	8005860 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8005134:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8005138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513a:	2302      	movs	r3, #2
 800513c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800513e:	2300      	movs	r3, #0
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005142:	2300      	movs	r3, #0
 8005144:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005146:	2306      	movs	r3, #6
 8005148:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800514a:	f107 031c 	add.w	r3, r7, #28
 800514e:	4619      	mov	r1, r3
 8005150:	482d      	ldr	r0, [pc, #180]	; (8005208 <MX_GPIO_Init+0x2bc>)
 8005152:	f000 fb85 	bl	8005860 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800515a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800515c:	2300      	movs	r3, #0
 800515e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005160:	2300      	movs	r3, #0
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005164:	f107 031c 	add.w	r3, r7, #28
 8005168:	4619      	mov	r1, r3
 800516a:	4829      	ldr	r0, [pc, #164]	; (8005210 <MX_GPIO_Init+0x2c4>)
 800516c:	f000 fb78 	bl	8005860 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005170:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005176:	2302      	movs	r3, #2
 8005178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517a:	2300      	movs	r3, #0
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800517e:	2300      	movs	r3, #0
 8005180:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005182:	230a      	movs	r3, #10
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005186:	f107 031c 	add.w	r3, r7, #28
 800518a:	4619      	mov	r1, r3
 800518c:	4820      	ldr	r0, [pc, #128]	; (8005210 <MX_GPIO_Init+0x2c4>)
 800518e:	f000 fb67 	bl	8005860 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8005192:	2320      	movs	r3, #32
 8005194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005196:	2300      	movs	r3, #0
 8005198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519a:	2300      	movs	r3, #0
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800519e:	f107 031c 	add.w	r3, r7, #28
 80051a2:	4619      	mov	r1, r3
 80051a4:	4819      	ldr	r0, [pc, #100]	; (800520c <MX_GPIO_Init+0x2c0>)
 80051a6:	f000 fb5b 	bl	8005860 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80051aa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80051ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051b0:	2312      	movs	r3, #18
 80051b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b8:	2300      	movs	r3, #0
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051bc:	2304      	movs	r3, #4
 80051be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c0:	f107 031c 	add.w	r3, r7, #28
 80051c4:	4619      	mov	r1, r3
 80051c6:	4813      	ldr	r0, [pc, #76]	; (8005214 <MX_GPIO_Init+0x2c8>)
 80051c8:	f000 fb4a 	bl	8005860 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80051cc:	2302      	movs	r3, #2
 80051ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80051d0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80051d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80051da:	f107 031c 	add.w	r3, r7, #28
 80051de:	4619      	mov	r1, r3
 80051e0:	4808      	ldr	r0, [pc, #32]	; (8005204 <MX_GPIO_Init+0x2b8>)
 80051e2:	f000 fb3d 	bl	8005860 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80051e6:	2200      	movs	r2, #0
 80051e8:	2106      	movs	r1, #6
 80051ea:	2006      	movs	r0, #6
 80051ec:	f000 fb0e 	bl	800580c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80051f0:	2006      	movs	r0, #6
 80051f2:	f000 fb27 	bl	8005844 <HAL_NVIC_EnableIRQ>

}
 80051f6:	bf00      	nop
 80051f8:	3730      	adds	r7, #48	; 0x30
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40023800 	.word	0x40023800
 8005204:	40021000 	.word	0x40021000
 8005208:	40020800 	.word	0x40020800
 800520c:	40020c00 	.word	0x40020c00
 8005210:	40020000 	.word	0x40020000
 8005214:	40020400 	.word	0x40020400

08005218 <button_interrupt_Handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_Handler(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken ;
	pxHigherPriorityTaskWoken = pdFALSE;
 800521e:	2300      	movs	r3, #0
 8005220:	607b      	str	r3, [r7, #4]

	xTaskNotifyFromISR(next_task_handle, 0, eNoAction, &pxHigherPriorityTaskWoken);
 8005222:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <button_interrupt_Handler+0x48>)
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	1d3b      	adds	r3, r7, #4
 8005228:	9301      	str	r3, [sp, #4]
 800522a:	2300      	movs	r3, #0
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	2300      	movs	r3, #0
 8005230:	2200      	movs	r2, #0
 8005232:	2100      	movs	r1, #0
 8005234:	f7fd f83c 	bl	80022b0 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <button_interrupt_Handler+0x3c>
 800523e:	f7ff fadf 	bl	8004800 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8005242:	4b08      	ldr	r3, [pc, #32]	; (8005264 <button_interrupt_Handler+0x4c>)
 8005244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	f3bf 8f6f 	isb	sy

}
 8005252:	e001      	b.n	8005258 <button_interrupt_Handler+0x40>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8005254:	f7ff fab8 	bl	80047c8 <SEGGER_SYSVIEW_RecordExitISR>
}
 8005258:	bf00      	nop
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20013458 	.word	0x20013458
 8005264:	e000ed04 	.word	0xe000ed04

08005268 <led_green_handler>:

static void led_green_handler( void * parameters)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af02      	add	r7, sp, #8
 800526e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while (1)
	{
		//
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8005270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005274:	4810      	ldr	r0, [pc, #64]	; (80052b8 <led_green_handler+0x50>)
 8005276:	f000 fcc0 	bl	8005bfa <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 800527a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	2300      	movs	r3, #0
 8005282:	2200      	movs	r2, #0
 8005284:	2100      	movs	r1, #0
 8005286:	2000      	movs	r0, #0
 8005288:	f7fc fe98 	bl	8001fbc <xTaskGenericNotifyWait>
 800528c:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d1ed      	bne.n	8005270 <led_green_handler+0x8>
		{	portENTER_CRITICAL();
 8005294:	f7fd fdd8 	bl	8002e48 <vPortEnterCritical>
			//vTaskSuspendAll();
		next_task_handle = task2_handle;
 8005298:	4b08      	ldr	r3, [pc, #32]	; (80052bc <led_green_handler+0x54>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a08      	ldr	r2, [pc, #32]	; (80052c0 <led_green_handler+0x58>)
 800529e:	6013      	str	r3, [r2, #0]
			//xTaskResumeAll();
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN,GPIO_PIN_SET);
 80052a0:	2201      	movs	r2, #1
 80052a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052a6:	4804      	ldr	r0, [pc, #16]	; (80052b8 <led_green_handler+0x50>)
 80052a8:	f000 fc8e 	bl	8005bc8 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 80052ac:	f7fd fdfc 	bl	8002ea8 <vPortExitCritical>
			vTaskDelete(NULL);
 80052b0:	2000      	movs	r0, #0
 80052b2:	f7fc f8cb 	bl	800144c <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80052b6:	e7db      	b.n	8005270 <led_green_handler+0x8>
 80052b8:	40020c00 	.word	0x40020c00
 80052bc:	2001344c 	.word	0x2001344c
 80052c0:	20013458 	.word	0x20013458

080052c4 <led_red_handler>:
		//vTaskDelay(pdMS_TO_TICKS(1000));
	}

}
static void led_red_handler( void * parameters)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while (1)
	{
		//HAL_Delay(800);
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 80052cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052d0:	4810      	ldr	r0, [pc, #64]	; (8005314 <led_red_handler+0x50>)
 80052d2:	f000 fc92 	bl	8005bfa <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(500));
 80052d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	2300      	movs	r3, #0
 80052de:	2200      	movs	r2, #0
 80052e0:	2100      	movs	r1, #0
 80052e2:	2000      	movs	r0, #0
 80052e4:	f7fc fe6a 	bl	8001fbc <xTaskGenericNotifyWait>
 80052e8:	60f8      	str	r0, [r7, #12]
				if(status == pdTRUE)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d1ed      	bne.n	80052cc <led_red_handler+0x8>
				{	portENTER_CRITICAL();
 80052f0:	f7fd fdaa 	bl	8002e48 <vPortEnterCritical>
					//vTaskSuspendAll();
					next_task_handle = task3_handle;
 80052f4:	4b08      	ldr	r3, [pc, #32]	; (8005318 <led_red_handler+0x54>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a08      	ldr	r2, [pc, #32]	; (800531c <led_red_handler+0x58>)
 80052fa:	6013      	str	r3, [r2, #0]
					//xTaskResumeAll();
					HAL_GPIO_WritePin(GPIOD, LED_RED_PIN,GPIO_PIN_SET);
 80052fc:	2201      	movs	r2, #1
 80052fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005302:	4804      	ldr	r0, [pc, #16]	; (8005314 <led_red_handler+0x50>)
 8005304:	f000 fc60 	bl	8005bc8 <HAL_GPIO_WritePin>
					portEXIT_CRITICAL();
 8005308:	f7fd fdce 	bl	8002ea8 <vPortExitCritical>
					vTaskDelete(NULL);
 800530c:	2000      	movs	r0, #0
 800530e:	f7fc f89d 	bl	800144c <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8005312:	e7db      	b.n	80052cc <led_red_handler+0x8>
 8005314:	40020c00 	.word	0x40020c00
 8005318:	20013450 	.word	0x20013450
 800531c:	20013458 	.word	0x20013458

08005320 <led_orange_handler>:
		//vTaskDelay(pdMS_TO_TICKS(800));
	}

}
static void led_orange_handler( void * parameters)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af02      	add	r7, sp, #8
 8005326:	6078      	str	r0, [r7, #4]
	while (1)
	{
		BaseType_t status;
		//HAL_Delay(500);
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8005328:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800532c:	4812      	ldr	r0, [pc, #72]	; (8005378 <led_orange_handler+0x58>)
 800532e:	f000 fc64 	bl	8005bfa <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(200));
 8005332:	23c8      	movs	r3, #200	; 0xc8
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	2300      	movs	r3, #0
 8005338:	2200      	movs	r2, #0
 800533a:	2100      	movs	r1, #0
 800533c:	2000      	movs	r0, #0
 800533e:	f7fc fe3d 	bl	8001fbc <xTaskGenericNotifyWait>
 8005342:	60f8      	str	r0, [r7, #12]
				if(status == pdTRUE)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d1ee      	bne.n	8005328 <led_orange_handler+0x8>
				{	portENTER_CRITICAL();
 800534a:	f7fd fd7d 	bl	8002e48 <vPortEnterCritical>
					//vTaskSuspendAll();
					next_task_handle = NULL;
 800534e:	4b0b      	ldr	r3, [pc, #44]	; (800537c <led_orange_handler+0x5c>)
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
					//xTaskResumeAll();
					HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN,GPIO_PIN_SET);
 8005354:	2201      	movs	r2, #1
 8005356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800535a:	4807      	ldr	r0, [pc, #28]	; (8005378 <led_orange_handler+0x58>)
 800535c:	f000 fc34 	bl	8005bc8 <HAL_GPIO_WritePin>
					portEXIT_CRITICAL();
 8005360:	f7fd fda2 	bl	8002ea8 <vPortExitCritical>
					vTaskDelete(btn_handle);
 8005364:	4b06      	ldr	r3, [pc, #24]	; (8005380 <led_orange_handler+0x60>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4618      	mov	r0, r3
 800536a:	f7fc f86f 	bl	800144c <vTaskDelete>
					vTaskDelete(NULL);
 800536e:	2000      	movs	r0, #0
 8005370:	f7fc f86c 	bl	800144c <vTaskDelete>
	{
 8005374:	e7d8      	b.n	8005328 <led_orange_handler+0x8>
 8005376:	bf00      	nop
 8005378:	40020c00 	.word	0x40020c00
 800537c:	20013458 	.word	0x20013458
 8005380:	20013454 	.word	0x20013454

08005384 <button_handler>:
	}

}

static void button_handler( void * parameters)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af02      	add	r7, sp, #8
 800538a:	6078      	str	r0, [r7, #4]
	uint8_t btn_read =0;
 800538c:	2300      	movs	r3, #0
 800538e:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read =0;
 8005390:	2300      	movs	r3, #0
 8005392:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8005394:	2101      	movs	r1, #1
 8005396:	480d      	ldr	r0, [pc, #52]	; (80053cc <button_handler+0x48>)
 8005398:	f000 fbfe 	bl	8005b98 <HAL_GPIO_ReadPin>
 800539c:	4603      	mov	r3, r0
 800539e:	73bb      	strb	r3, [r7, #14]
		if(btn_read)
 80053a0:	7bbb      	ldrb	r3, [r7, #14]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00b      	beq.n	80053be <button_handler+0x3a>
		{
			if(! prev_read)
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d108      	bne.n	80053be <button_handler+0x3a>
				xTaskNotify(next_task_handle, 0, eNoAction);
 80053ac:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <button_handler+0x4c>)
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	2300      	movs	r3, #0
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	2200      	movs	r2, #0
 80053b8:	2100      	movs	r1, #0
 80053ba:	f7fc fe87 	bl	80020cc <xTaskGenericNotify>

		}
		prev_read = btn_read;
 80053be:	7bbb      	ldrb	r3, [r7, #14]
 80053c0:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 80053c2:	200a      	movs	r0, #10
 80053c4:	f7fc f8ec 	bl	80015a0 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80053c8:	e7e4      	b.n	8005394 <button_handler+0x10>
 80053ca:	bf00      	nop
 80053cc:	40020000 	.word	0x40020000
 80053d0:	20013458 	.word	0x20013458

080053d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d101      	bne.n	80053ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80053e6:	f000 f939 	bl	800565c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80053ea:	bf00      	nop
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40001000 	.word	0x40001000

080053f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80053fc:	b672      	cpsid	i
}
 80053fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005400:	e7fe      	b.n	8005400 <Error_Handler+0x8>
	...

08005404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800540a:	2300      	movs	r3, #0
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	4b10      	ldr	r3, [pc, #64]	; (8005450 <HAL_MspInit+0x4c>)
 8005410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005412:	4a0f      	ldr	r2, [pc, #60]	; (8005450 <HAL_MspInit+0x4c>)
 8005414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005418:	6453      	str	r3, [r2, #68]	; 0x44
 800541a:	4b0d      	ldr	r3, [pc, #52]	; (8005450 <HAL_MspInit+0x4c>)
 800541c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005422:	607b      	str	r3, [r7, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005426:	2300      	movs	r3, #0
 8005428:	603b      	str	r3, [r7, #0]
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <HAL_MspInit+0x4c>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	4a08      	ldr	r2, [pc, #32]	; (8005450 <HAL_MspInit+0x4c>)
 8005430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005434:	6413      	str	r3, [r2, #64]	; 0x40
 8005436:	4b06      	ldr	r3, [pc, #24]	; (8005450 <HAL_MspInit+0x4c>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40023800 	.word	0x40023800

08005454 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08e      	sub	sp, #56	; 0x38
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	4b33      	ldr	r3, [pc, #204]	; (8005538 <HAL_InitTick+0xe4>)
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	4a32      	ldr	r2, [pc, #200]	; (8005538 <HAL_InitTick+0xe4>)
 800546e:	f043 0310 	orr.w	r3, r3, #16
 8005472:	6413      	str	r3, [r2, #64]	; 0x40
 8005474:	4b30      	ldr	r3, [pc, #192]	; (8005538 <HAL_InitTick+0xe4>)
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005480:	f107 0210 	add.w	r2, r7, #16
 8005484:	f107 0314 	add.w	r3, r7, #20
 8005488:	4611      	mov	r1, r2
 800548a:	4618      	mov	r0, r3
 800548c:	f001 f878 	bl	8006580 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800549a:	f001 f85d 	bl	8006558 <HAL_RCC_GetPCLK1Freq>
 800549e:	6378      	str	r0, [r7, #52]	; 0x34
 80054a0:	e004      	b.n	80054ac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80054a2:	f001 f859 	bl	8006558 <HAL_RCC_GetPCLK1Freq>
 80054a6:	4603      	mov	r3, r0
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	4a23      	ldr	r2, [pc, #140]	; (800553c <HAL_InitTick+0xe8>)
 80054b0:	fba2 2303 	umull	r2, r3, r2, r3
 80054b4:	0c9b      	lsrs	r3, r3, #18
 80054b6:	3b01      	subs	r3, #1
 80054b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80054ba:	4b21      	ldr	r3, [pc, #132]	; (8005540 <HAL_InitTick+0xec>)
 80054bc:	4a21      	ldr	r2, [pc, #132]	; (8005544 <HAL_InitTick+0xf0>)
 80054be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80054c0:	4b1f      	ldr	r3, [pc, #124]	; (8005540 <HAL_InitTick+0xec>)
 80054c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80054c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80054c8:	4a1d      	ldr	r2, [pc, #116]	; (8005540 <HAL_InitTick+0xec>)
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80054ce:	4b1c      	ldr	r3, [pc, #112]	; (8005540 <HAL_InitTick+0xec>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054d4:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <HAL_InitTick+0xec>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054da:	4b19      	ldr	r3, [pc, #100]	; (8005540 <HAL_InitTick+0xec>)
 80054dc:	2200      	movs	r2, #0
 80054de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80054e0:	4817      	ldr	r0, [pc, #92]	; (8005540 <HAL_InitTick+0xec>)
 80054e2:	f001 f87f 	bl	80065e4 <HAL_TIM_Base_Init>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80054ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d11b      	bne.n	800552c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80054f4:	4812      	ldr	r0, [pc, #72]	; (8005540 <HAL_InitTick+0xec>)
 80054f6:	f001 f8cf 	bl	8006698 <HAL_TIM_Base_Start_IT>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8005500:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005504:	2b00      	cmp	r3, #0
 8005506:	d111      	bne.n	800552c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005508:	2036      	movs	r0, #54	; 0x36
 800550a:	f000 f99b 	bl	8005844 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b0f      	cmp	r3, #15
 8005512:	d808      	bhi.n	8005526 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005514:	2200      	movs	r2, #0
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	2036      	movs	r0, #54	; 0x36
 800551a:	f000 f977 	bl	800580c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800551e:	4a0a      	ldr	r2, [pc, #40]	; (8005548 <HAL_InitTick+0xf4>)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	e002      	b.n	800552c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800552c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005530:	4618      	mov	r0, r3
 8005532:	3738      	adds	r7, #56	; 0x38
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40023800 	.word	0x40023800
 800553c:	431bde83 	.word	0x431bde83
 8005540:	2001345c 	.word	0x2001345c
 8005544:	40001000 	.word	0x40001000
 8005548:	2000000c 	.word	0x2000000c

0800554c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005550:	e7fe      	b.n	8005550 <NMI_Handler+0x4>

08005552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005552:	b480      	push	{r7}
 8005554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005556:	e7fe      	b.n	8005556 <HardFault_Handler+0x4>

08005558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800555c:	e7fe      	b.n	800555c <MemManage_Handler+0x4>

0800555e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800555e:	b480      	push	{r7}
 8005560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005562:	e7fe      	b.n	8005562 <BusFault_Handler+0x4>

08005564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005568:	e7fe      	b.n	8005568 <UsageFault_Handler+0x4>

0800556a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800556a:	b480      	push	{r7}
 800556c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800556e:	bf00      	nop
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	button_interrupt_Handler();
 800557c:	f7ff fe4c 	bl	8005218 <button_interrupt_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005580:	2001      	movs	r0, #1
 8005582:	f000 fb55 	bl	8005c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005586:	bf00      	nop
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005590:	4802      	ldr	r0, [pc, #8]	; (800559c <TIM6_DAC_IRQHandler+0x10>)
 8005592:	f001 f8f1 	bl	8006778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005596:	bf00      	nop
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	2001345c 	.word	0x2001345c

080055a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055a4:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <SystemInit+0x20>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	4a05      	ldr	r2, [pc, #20]	; (80055c0 <SystemInit+0x20>)
 80055ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055b4:	bf00      	nop
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	e000ed00 	.word	0xe000ed00

080055c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80055c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055c8:	480d      	ldr	r0, [pc, #52]	; (8005600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80055ca:	490e      	ldr	r1, [pc, #56]	; (8005604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80055cc:	4a0e      	ldr	r2, [pc, #56]	; (8005608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055d0:	e002      	b.n	80055d8 <LoopCopyDataInit>

080055d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055d6:	3304      	adds	r3, #4

080055d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055dc:	d3f9      	bcc.n	80055d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055de:	4a0b      	ldr	r2, [pc, #44]	; (800560c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055e0:	4c0b      	ldr	r4, [pc, #44]	; (8005610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80055e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055e4:	e001      	b.n	80055ea <LoopFillZerobss>

080055e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055e8:	3204      	adds	r2, #4

080055ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055ec:	d3fb      	bcc.n	80055e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80055ee:	f7ff ffd7 	bl	80055a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055f2:	f001 faa5 	bl	8006b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055f6:	f7ff fba9 	bl	8004d4c <main>
  bx  lr    
 80055fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80055fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005604:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8005608:	08006ce8 	.word	0x08006ce8
  ldr r2, =_sbss
 800560c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8005610:	200134a8 	.word	0x200134a8

08005614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005614:	e7fe      	b.n	8005614 <ADC_IRQHandler>
	...

08005618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800561c:	4b0e      	ldr	r3, [pc, #56]	; (8005658 <HAL_Init+0x40>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a0d      	ldr	r2, [pc, #52]	; (8005658 <HAL_Init+0x40>)
 8005622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <HAL_Init+0x40>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a0a      	ldr	r2, [pc, #40]	; (8005658 <HAL_Init+0x40>)
 800562e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005634:	4b08      	ldr	r3, [pc, #32]	; (8005658 <HAL_Init+0x40>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a07      	ldr	r2, [pc, #28]	; (8005658 <HAL_Init+0x40>)
 800563a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005640:	2003      	movs	r0, #3
 8005642:	f000 f8d8 	bl	80057f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005646:	200f      	movs	r0, #15
 8005648:	f7ff ff04 	bl	8005454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800564c:	f7ff feda 	bl	8005404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	40023c00 	.word	0x40023c00

0800565c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <HAL_IncTick+0x20>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	4b06      	ldr	r3, [pc, #24]	; (8005680 <HAL_IncTick+0x24>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4413      	add	r3, r2
 800566c:	4a04      	ldr	r2, [pc, #16]	; (8005680 <HAL_IncTick+0x24>)
 800566e:	6013      	str	r3, [r2, #0]
}
 8005670:	bf00      	nop
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20000010 	.word	0x20000010
 8005680:	200134a4 	.word	0x200134a4

08005684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  return uwTick;
 8005688:	4b03      	ldr	r3, [pc, #12]	; (8005698 <HAL_GetTick+0x14>)
 800568a:	681b      	ldr	r3, [r3, #0]
}
 800568c:	4618      	mov	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	200134a4 	.word	0x200134a4

0800569c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056ac:	4b0c      	ldr	r3, [pc, #48]	; (80056e0 <__NVIC_SetPriorityGrouping+0x44>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056b8:	4013      	ands	r3, r2
 80056ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056ce:	4a04      	ldr	r2, [pc, #16]	; (80056e0 <__NVIC_SetPriorityGrouping+0x44>)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	60d3      	str	r3, [r2, #12]
}
 80056d4:	bf00      	nop
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	e000ed00 	.word	0xe000ed00

080056e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056e8:	4b04      	ldr	r3, [pc, #16]	; (80056fc <__NVIC_GetPriorityGrouping+0x18>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	0a1b      	lsrs	r3, r3, #8
 80056ee:	f003 0307 	and.w	r3, r3, #7
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	e000ed00 	.word	0xe000ed00

08005700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800570a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800570e:	2b00      	cmp	r3, #0
 8005710:	db0b      	blt.n	800572a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	f003 021f 	and.w	r2, r3, #31
 8005718:	4907      	ldr	r1, [pc, #28]	; (8005738 <__NVIC_EnableIRQ+0x38>)
 800571a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571e:	095b      	lsrs	r3, r3, #5
 8005720:	2001      	movs	r0, #1
 8005722:	fa00 f202 	lsl.w	r2, r0, r2
 8005726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	e000e100 	.word	0xe000e100

0800573c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	6039      	str	r1, [r7, #0]
 8005746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574c:	2b00      	cmp	r3, #0
 800574e:	db0a      	blt.n	8005766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	b2da      	uxtb	r2, r3
 8005754:	490c      	ldr	r1, [pc, #48]	; (8005788 <__NVIC_SetPriority+0x4c>)
 8005756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575a:	0112      	lsls	r2, r2, #4
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	440b      	add	r3, r1
 8005760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005764:	e00a      	b.n	800577c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	b2da      	uxtb	r2, r3
 800576a:	4908      	ldr	r1, [pc, #32]	; (800578c <__NVIC_SetPriority+0x50>)
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	3b04      	subs	r3, #4
 8005774:	0112      	lsls	r2, r2, #4
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	440b      	add	r3, r1
 800577a:	761a      	strb	r2, [r3, #24]
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	e000e100 	.word	0xe000e100
 800578c:	e000ed00 	.word	0xe000ed00

08005790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005790:	b480      	push	{r7}
 8005792:	b089      	sub	sp, #36	; 0x24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	f1c3 0307 	rsb	r3, r3, #7
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	bf28      	it	cs
 80057ae:	2304      	movcs	r3, #4
 80057b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	3304      	adds	r3, #4
 80057b6:	2b06      	cmp	r3, #6
 80057b8:	d902      	bls.n	80057c0 <NVIC_EncodePriority+0x30>
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	3b03      	subs	r3, #3
 80057be:	e000      	b.n	80057c2 <NVIC_EncodePriority+0x32>
 80057c0:	2300      	movs	r3, #0
 80057c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057c4:	f04f 32ff 	mov.w	r2, #4294967295
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	fa02 f303 	lsl.w	r3, r2, r3
 80057ce:	43da      	mvns	r2, r3
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	401a      	ands	r2, r3
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057d8:	f04f 31ff 	mov.w	r1, #4294967295
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	fa01 f303 	lsl.w	r3, r1, r3
 80057e2:	43d9      	mvns	r1, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057e8:	4313      	orrs	r3, r2
         );
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3724      	adds	r7, #36	; 0x24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff ff4c 	bl	800569c <__NVIC_SetPriorityGrouping>
}
 8005804:	bf00      	nop
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	4603      	mov	r3, r0
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800581e:	f7ff ff61 	bl	80056e4 <__NVIC_GetPriorityGrouping>
 8005822:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	6978      	ldr	r0, [r7, #20]
 800582a:	f7ff ffb1 	bl	8005790 <NVIC_EncodePriority>
 800582e:	4602      	mov	r2, r0
 8005830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005834:	4611      	mov	r1, r2
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff ff80 	bl	800573c <__NVIC_SetPriority>
}
 800583c:	bf00      	nop
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800584e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff ff54 	bl	8005700 <__NVIC_EnableIRQ>
}
 8005858:	bf00      	nop
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005860:	b480      	push	{r7}
 8005862:	b089      	sub	sp, #36	; 0x24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005872:	2300      	movs	r3, #0
 8005874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005876:	2300      	movs	r3, #0
 8005878:	61fb      	str	r3, [r7, #28]
 800587a:	e16b      	b.n	8005b54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800587c:	2201      	movs	r2, #1
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4013      	ands	r3, r2
 800588e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	429a      	cmp	r2, r3
 8005896:	f040 815a 	bne.w	8005b4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d005      	beq.n	80058b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d130      	bne.n	8005914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	2203      	movs	r2, #3
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	43db      	mvns	r3, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4013      	ands	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	4313      	orrs	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058e8:	2201      	movs	r2, #1
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	091b      	lsrs	r3, r3, #4
 80058fe:	f003 0201 	and.w	r2, r3, #1
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4313      	orrs	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	2b03      	cmp	r3, #3
 800591e:	d017      	beq.n	8005950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	2203      	movs	r2, #3
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	43db      	mvns	r3, r3
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4013      	ands	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	4313      	orrs	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d123      	bne.n	80059a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	08da      	lsrs	r2, r3, #3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	3208      	adds	r2, #8
 8005964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	220f      	movs	r2, #15
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4313      	orrs	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	08da      	lsrs	r2, r3, #3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3208      	adds	r2, #8
 800599e:	69b9      	ldr	r1, [r7, #24]
 80059a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	2203      	movs	r2, #3
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	43db      	mvns	r3, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4013      	ands	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f003 0203 	and.w	r2, r3, #3
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	fa02 f303 	lsl.w	r3, r2, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 80b4 	beq.w	8005b4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	4b60      	ldr	r3, [pc, #384]	; (8005b6c <HAL_GPIO_Init+0x30c>)
 80059ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ee:	4a5f      	ldr	r2, [pc, #380]	; (8005b6c <HAL_GPIO_Init+0x30c>)
 80059f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059f4:	6453      	str	r3, [r2, #68]	; 0x44
 80059f6:	4b5d      	ldr	r3, [pc, #372]	; (8005b6c <HAL_GPIO_Init+0x30c>)
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a02:	4a5b      	ldr	r2, [pc, #364]	; (8005b70 <HAL_GPIO_Init+0x310>)
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	089b      	lsrs	r3, r3, #2
 8005a08:	3302      	adds	r3, #2
 8005a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	220f      	movs	r2, #15
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4013      	ands	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a52      	ldr	r2, [pc, #328]	; (8005b74 <HAL_GPIO_Init+0x314>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d02b      	beq.n	8005a86 <HAL_GPIO_Init+0x226>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a51      	ldr	r2, [pc, #324]	; (8005b78 <HAL_GPIO_Init+0x318>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d025      	beq.n	8005a82 <HAL_GPIO_Init+0x222>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a50      	ldr	r2, [pc, #320]	; (8005b7c <HAL_GPIO_Init+0x31c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d01f      	beq.n	8005a7e <HAL_GPIO_Init+0x21e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a4f      	ldr	r2, [pc, #316]	; (8005b80 <HAL_GPIO_Init+0x320>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d019      	beq.n	8005a7a <HAL_GPIO_Init+0x21a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a4e      	ldr	r2, [pc, #312]	; (8005b84 <HAL_GPIO_Init+0x324>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d013      	beq.n	8005a76 <HAL_GPIO_Init+0x216>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a4d      	ldr	r2, [pc, #308]	; (8005b88 <HAL_GPIO_Init+0x328>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00d      	beq.n	8005a72 <HAL_GPIO_Init+0x212>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a4c      	ldr	r2, [pc, #304]	; (8005b8c <HAL_GPIO_Init+0x32c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d007      	beq.n	8005a6e <HAL_GPIO_Init+0x20e>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a4b      	ldr	r2, [pc, #300]	; (8005b90 <HAL_GPIO_Init+0x330>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d101      	bne.n	8005a6a <HAL_GPIO_Init+0x20a>
 8005a66:	2307      	movs	r3, #7
 8005a68:	e00e      	b.n	8005a88 <HAL_GPIO_Init+0x228>
 8005a6a:	2308      	movs	r3, #8
 8005a6c:	e00c      	b.n	8005a88 <HAL_GPIO_Init+0x228>
 8005a6e:	2306      	movs	r3, #6
 8005a70:	e00a      	b.n	8005a88 <HAL_GPIO_Init+0x228>
 8005a72:	2305      	movs	r3, #5
 8005a74:	e008      	b.n	8005a88 <HAL_GPIO_Init+0x228>
 8005a76:	2304      	movs	r3, #4
 8005a78:	e006      	b.n	8005a88 <HAL_GPIO_Init+0x228>
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e004      	b.n	8005a88 <HAL_GPIO_Init+0x228>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	e002      	b.n	8005a88 <HAL_GPIO_Init+0x228>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e000      	b.n	8005a88 <HAL_GPIO_Init+0x228>
 8005a86:	2300      	movs	r3, #0
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	f002 0203 	and.w	r2, r2, #3
 8005a8e:	0092      	lsls	r2, r2, #2
 8005a90:	4093      	lsls	r3, r2
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a98:	4935      	ldr	r1, [pc, #212]	; (8005b70 <HAL_GPIO_Init+0x310>)
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	089b      	lsrs	r3, r3, #2
 8005a9e:	3302      	adds	r3, #2
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005aa6:	4b3b      	ldr	r3, [pc, #236]	; (8005b94 <HAL_GPIO_Init+0x334>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005aca:	4a32      	ldr	r2, [pc, #200]	; (8005b94 <HAL_GPIO_Init+0x334>)
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ad0:	4b30      	ldr	r3, [pc, #192]	; (8005b94 <HAL_GPIO_Init+0x334>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	43db      	mvns	r3, r3
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	4013      	ands	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005af4:	4a27      	ldr	r2, [pc, #156]	; (8005b94 <HAL_GPIO_Init+0x334>)
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005afa:	4b26      	ldr	r3, [pc, #152]	; (8005b94 <HAL_GPIO_Init+0x334>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	43db      	mvns	r3, r3
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	4013      	ands	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b1e:	4a1d      	ldr	r2, [pc, #116]	; (8005b94 <HAL_GPIO_Init+0x334>)
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b24:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <HAL_GPIO_Init+0x334>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	43db      	mvns	r3, r3
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	4013      	ands	r3, r2
 8005b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b48:	4a12      	ldr	r2, [pc, #72]	; (8005b94 <HAL_GPIO_Init+0x334>)
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	3301      	adds	r3, #1
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	2b0f      	cmp	r3, #15
 8005b58:	f67f ae90 	bls.w	800587c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
 8005b60:	3724      	adds	r7, #36	; 0x24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	40013800 	.word	0x40013800
 8005b74:	40020000 	.word	0x40020000
 8005b78:	40020400 	.word	0x40020400
 8005b7c:	40020800 	.word	0x40020800
 8005b80:	40020c00 	.word	0x40020c00
 8005b84:	40021000 	.word	0x40021000
 8005b88:	40021400 	.word	0x40021400
 8005b8c:	40021800 	.word	0x40021800
 8005b90:	40021c00 	.word	0x40021c00
 8005b94:	40013c00 	.word	0x40013c00

08005b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	887b      	ldrh	r3, [r7, #2]
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	73fb      	strb	r3, [r7, #15]
 8005bb4:	e001      	b.n	8005bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	807b      	strh	r3, [r7, #2]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bd8:	787b      	ldrb	r3, [r7, #1]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bde:	887a      	ldrh	r2, [r7, #2]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005be4:	e003      	b.n	8005bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005be6:	887b      	ldrh	r3, [r7, #2]
 8005be8:	041a      	lsls	r2, r3, #16
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	619a      	str	r2, [r3, #24]
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	460b      	mov	r3, r1
 8005c04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c0c:	887a      	ldrh	r2, [r7, #2]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4013      	ands	r3, r2
 8005c12:	041a      	lsls	r2, r3, #16
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	43d9      	mvns	r1, r3
 8005c18:	887b      	ldrh	r3, [r7, #2]
 8005c1a:	400b      	ands	r3, r1
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	619a      	str	r2, [r3, #24]
}
 8005c22:	bf00      	nop
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	4603      	mov	r3, r0
 8005c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c3a:	4b08      	ldr	r3, [pc, #32]	; (8005c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c3c:	695a      	ldr	r2, [r3, #20]
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d006      	beq.n	8005c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c46:	4a05      	ldr	r2, [pc, #20]	; (8005c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c48:	88fb      	ldrh	r3, [r7, #6]
 8005c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f806 	bl	8005c60 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c54:	bf00      	nop
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40013c00 	.word	0x40013c00

08005c60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e267      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d075      	beq.n	8005d82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c96:	4b88      	ldr	r3, [pc, #544]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 030c 	and.w	r3, r3, #12
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d00c      	beq.n	8005cbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ca2:	4b85      	ldr	r3, [pc, #532]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005caa:	2b08      	cmp	r3, #8
 8005cac:	d112      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cae:	4b82      	ldr	r3, [pc, #520]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cba:	d10b      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cbc:	4b7e      	ldr	r3, [pc, #504]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d05b      	beq.n	8005d80 <HAL_RCC_OscConfig+0x108>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d157      	bne.n	8005d80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e242      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cdc:	d106      	bne.n	8005cec <HAL_RCC_OscConfig+0x74>
 8005cde:	4b76      	ldr	r3, [pc, #472]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a75      	ldr	r2, [pc, #468]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	e01d      	b.n	8005d28 <HAL_RCC_OscConfig+0xb0>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cf4:	d10c      	bne.n	8005d10 <HAL_RCC_OscConfig+0x98>
 8005cf6:	4b70      	ldr	r3, [pc, #448]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a6f      	ldr	r2, [pc, #444]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	4b6d      	ldr	r3, [pc, #436]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a6c      	ldr	r2, [pc, #432]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	e00b      	b.n	8005d28 <HAL_RCC_OscConfig+0xb0>
 8005d10:	4b69      	ldr	r3, [pc, #420]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a68      	ldr	r2, [pc, #416]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	4b66      	ldr	r3, [pc, #408]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a65      	ldr	r2, [pc, #404]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d013      	beq.n	8005d58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d30:	f7ff fca8 	bl	8005684 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d38:	f7ff fca4 	bl	8005684 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b64      	cmp	r3, #100	; 0x64
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e207      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d4a:	4b5b      	ldr	r3, [pc, #364]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0f0      	beq.n	8005d38 <HAL_RCC_OscConfig+0xc0>
 8005d56:	e014      	b.n	8005d82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d58:	f7ff fc94 	bl	8005684 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d60:	f7ff fc90 	bl	8005684 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b64      	cmp	r3, #100	; 0x64
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e1f3      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d72:	4b51      	ldr	r3, [pc, #324]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <HAL_RCC_OscConfig+0xe8>
 8005d7e:	e000      	b.n	8005d82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d063      	beq.n	8005e56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d8e:	4b4a      	ldr	r3, [pc, #296]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 030c 	and.w	r3, r3, #12
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00b      	beq.n	8005db2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d9a:	4b47      	ldr	r3, [pc, #284]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d11c      	bne.n	8005de0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005da6:	4b44      	ldr	r3, [pc, #272]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d116      	bne.n	8005de0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005db2:	4b41      	ldr	r3, [pc, #260]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_RCC_OscConfig+0x152>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d001      	beq.n	8005dca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e1c7      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dca:	4b3b      	ldr	r3, [pc, #236]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4937      	ldr	r1, [pc, #220]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dde:	e03a      	b.n	8005e56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d020      	beq.n	8005e2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005de8:	4b34      	ldr	r3, [pc, #208]	; (8005ebc <HAL_RCC_OscConfig+0x244>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dee:	f7ff fc49 	bl	8005684 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005df6:	f7ff fc45 	bl	8005684 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e1a8      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e08:	4b2b      	ldr	r3, [pc, #172]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0f0      	beq.n	8005df6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e14:	4b28      	ldr	r3, [pc, #160]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	4925      	ldr	r1, [pc, #148]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	600b      	str	r3, [r1, #0]
 8005e28:	e015      	b.n	8005e56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e2a:	4b24      	ldr	r3, [pc, #144]	; (8005ebc <HAL_RCC_OscConfig+0x244>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e30:	f7ff fc28 	bl	8005684 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e38:	f7ff fc24 	bl	8005684 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e187      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e4a:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f0      	bne.n	8005e38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d036      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d016      	beq.n	8005e98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e6a:	4b15      	ldr	r3, [pc, #84]	; (8005ec0 <HAL_RCC_OscConfig+0x248>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e70:	f7ff fc08 	bl	8005684 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e78:	f7ff fc04 	bl	8005684 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e167      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e8a:	4b0b      	ldr	r3, [pc, #44]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f0      	beq.n	8005e78 <HAL_RCC_OscConfig+0x200>
 8005e96:	e01b      	b.n	8005ed0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e98:	4b09      	ldr	r3, [pc, #36]	; (8005ec0 <HAL_RCC_OscConfig+0x248>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e9e:	f7ff fbf1 	bl	8005684 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ea4:	e00e      	b.n	8005ec4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ea6:	f7ff fbed 	bl	8005684 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d907      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e150      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	42470000 	.word	0x42470000
 8005ec0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ec4:	4b88      	ldr	r3, [pc, #544]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1ea      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 8097 	beq.w	800600c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ee2:	4b81      	ldr	r3, [pc, #516]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10f      	bne.n	8005f0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	4b7d      	ldr	r3, [pc, #500]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	4a7c      	ldr	r2, [pc, #496]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efc:	6413      	str	r3, [r2, #64]	; 0x40
 8005efe:	4b7a      	ldr	r3, [pc, #488]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f06:	60bb      	str	r3, [r7, #8]
 8005f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f0e:	4b77      	ldr	r3, [pc, #476]	; (80060ec <HAL_RCC_OscConfig+0x474>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d118      	bne.n	8005f4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f1a:	4b74      	ldr	r3, [pc, #464]	; (80060ec <HAL_RCC_OscConfig+0x474>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a73      	ldr	r2, [pc, #460]	; (80060ec <HAL_RCC_OscConfig+0x474>)
 8005f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f26:	f7ff fbad 	bl	8005684 <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f2e:	f7ff fba9 	bl	8005684 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e10c      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f40:	4b6a      	ldr	r3, [pc, #424]	; (80060ec <HAL_RCC_OscConfig+0x474>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0f0      	beq.n	8005f2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d106      	bne.n	8005f62 <HAL_RCC_OscConfig+0x2ea>
 8005f54:	4b64      	ldr	r3, [pc, #400]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f58:	4a63      	ldr	r2, [pc, #396]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f60:	e01c      	b.n	8005f9c <HAL_RCC_OscConfig+0x324>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d10c      	bne.n	8005f84 <HAL_RCC_OscConfig+0x30c>
 8005f6a:	4b5f      	ldr	r3, [pc, #380]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6e:	4a5e      	ldr	r2, [pc, #376]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f70:	f043 0304 	orr.w	r3, r3, #4
 8005f74:	6713      	str	r3, [r2, #112]	; 0x70
 8005f76:	4b5c      	ldr	r3, [pc, #368]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7a:	4a5b      	ldr	r2, [pc, #364]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	6713      	str	r3, [r2, #112]	; 0x70
 8005f82:	e00b      	b.n	8005f9c <HAL_RCC_OscConfig+0x324>
 8005f84:	4b58      	ldr	r3, [pc, #352]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f88:	4a57      	ldr	r2, [pc, #348]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f8a:	f023 0301 	bic.w	r3, r3, #1
 8005f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f90:	4b55      	ldr	r3, [pc, #340]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	4a54      	ldr	r2, [pc, #336]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f96:	f023 0304 	bic.w	r3, r3, #4
 8005f9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d015      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa4:	f7ff fb6e 	bl	8005684 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005faa:	e00a      	b.n	8005fc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fac:	f7ff fb6a 	bl	8005684 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e0cb      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc2:	4b49      	ldr	r3, [pc, #292]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0ee      	beq.n	8005fac <HAL_RCC_OscConfig+0x334>
 8005fce:	e014      	b.n	8005ffa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fd0:	f7ff fb58 	bl	8005684 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fd6:	e00a      	b.n	8005fee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fd8:	f7ff fb54 	bl	8005684 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e0b5      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fee:	4b3e      	ldr	r3, [pc, #248]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1ee      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d105      	bne.n	800600c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006000:	4b39      	ldr	r3, [pc, #228]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	4a38      	ldr	r2, [pc, #224]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8006006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800600a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 80a1 	beq.w	8006158 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006016:	4b34      	ldr	r3, [pc, #208]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	2b08      	cmp	r3, #8
 8006020:	d05c      	beq.n	80060dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	2b02      	cmp	r3, #2
 8006028:	d141      	bne.n	80060ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800602a:	4b31      	ldr	r3, [pc, #196]	; (80060f0 <HAL_RCC_OscConfig+0x478>)
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006030:	f7ff fb28 	bl	8005684 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006038:	f7ff fb24 	bl	8005684 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e087      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800604a:	4b27      	ldr	r3, [pc, #156]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f0      	bne.n	8006038 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69da      	ldr	r2, [r3, #28]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	019b      	lsls	r3, r3, #6
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	3b01      	subs	r3, #1
 8006070:	041b      	lsls	r3, r3, #16
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	061b      	lsls	r3, r3, #24
 800607a:	491b      	ldr	r1, [pc, #108]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 800607c:	4313      	orrs	r3, r2
 800607e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006080:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <HAL_RCC_OscConfig+0x478>)
 8006082:	2201      	movs	r2, #1
 8006084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006086:	f7ff fafd 	bl	8005684 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800608c:	e008      	b.n	80060a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800608e:	f7ff faf9 	bl	8005684 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e05c      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a0:	4b11      	ldr	r3, [pc, #68]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0f0      	beq.n	800608e <HAL_RCC_OscConfig+0x416>
 80060ac:	e054      	b.n	8006158 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ae:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <HAL_RCC_OscConfig+0x478>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b4:	f7ff fae6 	bl	8005684 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060bc:	f7ff fae2 	bl	8005684 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e045      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ce:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f0      	bne.n	80060bc <HAL_RCC_OscConfig+0x444>
 80060da:	e03d      	b.n	8006158 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d107      	bne.n	80060f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e038      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
 80060e8:	40023800 	.word	0x40023800
 80060ec:	40007000 	.word	0x40007000
 80060f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060f4:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <HAL_RCC_OscConfig+0x4ec>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d028      	beq.n	8006154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800610c:	429a      	cmp	r2, r3
 800610e:	d121      	bne.n	8006154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611a:	429a      	cmp	r2, r3
 800611c:	d11a      	bne.n	8006154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006124:	4013      	ands	r3, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800612a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800612c:	4293      	cmp	r3, r2
 800612e:	d111      	bne.n	8006154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	3b01      	subs	r3, #1
 800613e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006140:	429a      	cmp	r2, r3
 8006142:	d107      	bne.n	8006154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006150:	429a      	cmp	r2, r3
 8006152:	d001      	beq.n	8006158 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e000      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	40023800 	.word	0x40023800

08006168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e0cc      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800617c:	4b68      	ldr	r3, [pc, #416]	; (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d90c      	bls.n	80061a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618a:	4b65      	ldr	r3, [pc, #404]	; (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006192:	4b63      	ldr	r3, [pc, #396]	; (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d001      	beq.n	80061a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0b8      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d020      	beq.n	80061f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061bc:	4b59      	ldr	r3, [pc, #356]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	4a58      	ldr	r2, [pc, #352]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061d4:	4b53      	ldr	r3, [pc, #332]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4a52      	ldr	r2, [pc, #328]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e0:	4b50      	ldr	r3, [pc, #320]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	494d      	ldr	r1, [pc, #308]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d044      	beq.n	8006288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d107      	bne.n	8006216 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006206:	4b47      	ldr	r3, [pc, #284]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d119      	bne.n	8006246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e07f      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d003      	beq.n	8006226 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006222:	2b03      	cmp	r3, #3
 8006224:	d107      	bne.n	8006236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006226:	4b3f      	ldr	r3, [pc, #252]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d109      	bne.n	8006246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e06f      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006236:	4b3b      	ldr	r3, [pc, #236]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e067      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006246:	4b37      	ldr	r3, [pc, #220]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f023 0203 	bic.w	r2, r3, #3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	4934      	ldr	r1, [pc, #208]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006254:	4313      	orrs	r3, r2
 8006256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006258:	f7ff fa14 	bl	8005684 <HAL_GetTick>
 800625c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625e:	e00a      	b.n	8006276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006260:	f7ff fa10 	bl	8005684 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	f241 3288 	movw	r2, #5000	; 0x1388
 800626e:	4293      	cmp	r3, r2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e04f      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006276:	4b2b      	ldr	r3, [pc, #172]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 020c 	and.w	r2, r3, #12
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	429a      	cmp	r2, r3
 8006286:	d1eb      	bne.n	8006260 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006288:	4b25      	ldr	r3, [pc, #148]	; (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d20c      	bcs.n	80062b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006296:	4b22      	ldr	r3, [pc, #136]	; (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800629e:	4b20      	ldr	r3, [pc, #128]	; (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d001      	beq.n	80062b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e032      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d008      	beq.n	80062ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062bc:	4b19      	ldr	r3, [pc, #100]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	4916      	ldr	r1, [pc, #88]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d009      	beq.n	80062ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062da:	4b12      	ldr	r3, [pc, #72]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	490e      	ldr	r1, [pc, #56]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062ee:	f000 f821 	bl	8006334 <HAL_RCC_GetSysClockFreq>
 80062f2:	4602      	mov	r2, r0
 80062f4:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	091b      	lsrs	r3, r3, #4
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	490a      	ldr	r1, [pc, #40]	; (8006328 <HAL_RCC_ClockConfig+0x1c0>)
 8006300:	5ccb      	ldrb	r3, [r1, r3]
 8006302:	fa22 f303 	lsr.w	r3, r2, r3
 8006306:	4a09      	ldr	r2, [pc, #36]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 8006308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800630a:	4b09      	ldr	r3, [pc, #36]	; (8006330 <HAL_RCC_ClockConfig+0x1c8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff f8a0 	bl	8005454 <HAL_InitTick>

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	40023c00 	.word	0x40023c00
 8006324:	40023800 	.word	0x40023800
 8006328:	08006cc0 	.word	0x08006cc0
 800632c:	20000008 	.word	0x20000008
 8006330:	2000000c 	.word	0x2000000c

08006334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006338:	b094      	sub	sp, #80	; 0x50
 800633a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	647b      	str	r3, [r7, #68]	; 0x44
 8006340:	2300      	movs	r3, #0
 8006342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006344:	2300      	movs	r3, #0
 8006346:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800634c:	4b79      	ldr	r3, [pc, #484]	; (8006534 <HAL_RCC_GetSysClockFreq+0x200>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f003 030c 	and.w	r3, r3, #12
 8006354:	2b08      	cmp	r3, #8
 8006356:	d00d      	beq.n	8006374 <HAL_RCC_GetSysClockFreq+0x40>
 8006358:	2b08      	cmp	r3, #8
 800635a:	f200 80e1 	bhi.w	8006520 <HAL_RCC_GetSysClockFreq+0x1ec>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <HAL_RCC_GetSysClockFreq+0x34>
 8006362:	2b04      	cmp	r3, #4
 8006364:	d003      	beq.n	800636e <HAL_RCC_GetSysClockFreq+0x3a>
 8006366:	e0db      	b.n	8006520 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006368:	4b73      	ldr	r3, [pc, #460]	; (8006538 <HAL_RCC_GetSysClockFreq+0x204>)
 800636a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800636c:	e0db      	b.n	8006526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800636e:	4b73      	ldr	r3, [pc, #460]	; (800653c <HAL_RCC_GetSysClockFreq+0x208>)
 8006370:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006372:	e0d8      	b.n	8006526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006374:	4b6f      	ldr	r3, [pc, #444]	; (8006534 <HAL_RCC_GetSysClockFreq+0x200>)
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800637c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800637e:	4b6d      	ldr	r3, [pc, #436]	; (8006534 <HAL_RCC_GetSysClockFreq+0x200>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d063      	beq.n	8006452 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800638a:	4b6a      	ldr	r3, [pc, #424]	; (8006534 <HAL_RCC_GetSysClockFreq+0x200>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	099b      	lsrs	r3, r3, #6
 8006390:	2200      	movs	r2, #0
 8006392:	63bb      	str	r3, [r7, #56]	; 0x38
 8006394:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639c:	633b      	str	r3, [r7, #48]	; 0x30
 800639e:	2300      	movs	r3, #0
 80063a0:	637b      	str	r3, [r7, #52]	; 0x34
 80063a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80063a6:	4622      	mov	r2, r4
 80063a8:	462b      	mov	r3, r5
 80063aa:	f04f 0000 	mov.w	r0, #0
 80063ae:	f04f 0100 	mov.w	r1, #0
 80063b2:	0159      	lsls	r1, r3, #5
 80063b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063b8:	0150      	lsls	r0, r2, #5
 80063ba:	4602      	mov	r2, r0
 80063bc:	460b      	mov	r3, r1
 80063be:	4621      	mov	r1, r4
 80063c0:	1a51      	subs	r1, r2, r1
 80063c2:	6139      	str	r1, [r7, #16]
 80063c4:	4629      	mov	r1, r5
 80063c6:	eb63 0301 	sbc.w	r3, r3, r1
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063d8:	4659      	mov	r1, fp
 80063da:	018b      	lsls	r3, r1, #6
 80063dc:	4651      	mov	r1, sl
 80063de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063e2:	4651      	mov	r1, sl
 80063e4:	018a      	lsls	r2, r1, #6
 80063e6:	4651      	mov	r1, sl
 80063e8:	ebb2 0801 	subs.w	r8, r2, r1
 80063ec:	4659      	mov	r1, fp
 80063ee:	eb63 0901 	sbc.w	r9, r3, r1
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006406:	4690      	mov	r8, r2
 8006408:	4699      	mov	r9, r3
 800640a:	4623      	mov	r3, r4
 800640c:	eb18 0303 	adds.w	r3, r8, r3
 8006410:	60bb      	str	r3, [r7, #8]
 8006412:	462b      	mov	r3, r5
 8006414:	eb49 0303 	adc.w	r3, r9, r3
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006426:	4629      	mov	r1, r5
 8006428:	024b      	lsls	r3, r1, #9
 800642a:	4621      	mov	r1, r4
 800642c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006430:	4621      	mov	r1, r4
 8006432:	024a      	lsls	r2, r1, #9
 8006434:	4610      	mov	r0, r2
 8006436:	4619      	mov	r1, r3
 8006438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800643a:	2200      	movs	r2, #0
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28
 800643e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006440:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006444:	f7f9 ff0e 	bl	8000264 <__aeabi_uldivmod>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4613      	mov	r3, r2
 800644e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006450:	e058      	b.n	8006504 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006452:	4b38      	ldr	r3, [pc, #224]	; (8006534 <HAL_RCC_GetSysClockFreq+0x200>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	099b      	lsrs	r3, r3, #6
 8006458:	2200      	movs	r2, #0
 800645a:	4618      	mov	r0, r3
 800645c:	4611      	mov	r1, r2
 800645e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006462:	623b      	str	r3, [r7, #32]
 8006464:	2300      	movs	r3, #0
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
 8006468:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800646c:	4642      	mov	r2, r8
 800646e:	464b      	mov	r3, r9
 8006470:	f04f 0000 	mov.w	r0, #0
 8006474:	f04f 0100 	mov.w	r1, #0
 8006478:	0159      	lsls	r1, r3, #5
 800647a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800647e:	0150      	lsls	r0, r2, #5
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4641      	mov	r1, r8
 8006486:	ebb2 0a01 	subs.w	sl, r2, r1
 800648a:	4649      	mov	r1, r9
 800648c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800649c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064a4:	ebb2 040a 	subs.w	r4, r2, sl
 80064a8:	eb63 050b 	sbc.w	r5, r3, fp
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	00eb      	lsls	r3, r5, #3
 80064b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064ba:	00e2      	lsls	r2, r4, #3
 80064bc:	4614      	mov	r4, r2
 80064be:	461d      	mov	r5, r3
 80064c0:	4643      	mov	r3, r8
 80064c2:	18e3      	adds	r3, r4, r3
 80064c4:	603b      	str	r3, [r7, #0]
 80064c6:	464b      	mov	r3, r9
 80064c8:	eb45 0303 	adc.w	r3, r5, r3
 80064cc:	607b      	str	r3, [r7, #4]
 80064ce:	f04f 0200 	mov.w	r2, #0
 80064d2:	f04f 0300 	mov.w	r3, #0
 80064d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064da:	4629      	mov	r1, r5
 80064dc:	028b      	lsls	r3, r1, #10
 80064de:	4621      	mov	r1, r4
 80064e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064e4:	4621      	mov	r1, r4
 80064e6:	028a      	lsls	r2, r1, #10
 80064e8:	4610      	mov	r0, r2
 80064ea:	4619      	mov	r1, r3
 80064ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ee:	2200      	movs	r2, #0
 80064f0:	61bb      	str	r3, [r7, #24]
 80064f2:	61fa      	str	r2, [r7, #28]
 80064f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064f8:	f7f9 feb4 	bl	8000264 <__aeabi_uldivmod>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4613      	mov	r3, r2
 8006502:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006504:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <HAL_RCC_GetSysClockFreq+0x200>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	0c1b      	lsrs	r3, r3, #16
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	3301      	adds	r3, #1
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006514:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800651e:	e002      	b.n	8006526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006520:	4b05      	ldr	r3, [pc, #20]	; (8006538 <HAL_RCC_GetSysClockFreq+0x204>)
 8006522:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006528:	4618      	mov	r0, r3
 800652a:	3750      	adds	r7, #80	; 0x50
 800652c:	46bd      	mov	sp, r7
 800652e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006532:	bf00      	nop
 8006534:	40023800 	.word	0x40023800
 8006538:	00f42400 	.word	0x00f42400
 800653c:	007a1200 	.word	0x007a1200

08006540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006544:	4b03      	ldr	r3, [pc, #12]	; (8006554 <HAL_RCC_GetHCLKFreq+0x14>)
 8006546:	681b      	ldr	r3, [r3, #0]
}
 8006548:	4618      	mov	r0, r3
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20000008 	.word	0x20000008

08006558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800655c:	f7ff fff0 	bl	8006540 <HAL_RCC_GetHCLKFreq>
 8006560:	4602      	mov	r2, r0
 8006562:	4b05      	ldr	r3, [pc, #20]	; (8006578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	0a9b      	lsrs	r3, r3, #10
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	4903      	ldr	r1, [pc, #12]	; (800657c <HAL_RCC_GetPCLK1Freq+0x24>)
 800656e:	5ccb      	ldrb	r3, [r1, r3]
 8006570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006574:	4618      	mov	r0, r3
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40023800 	.word	0x40023800
 800657c:	08006cd0 	.word	0x08006cd0

08006580 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	220f      	movs	r2, #15
 800658e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006590:	4b12      	ldr	r3, [pc, #72]	; (80065dc <HAL_RCC_GetClockConfig+0x5c>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f003 0203 	and.w	r2, r3, #3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800659c:	4b0f      	ldr	r3, [pc, #60]	; (80065dc <HAL_RCC_GetClockConfig+0x5c>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80065a8:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <HAL_RCC_GetClockConfig+0x5c>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80065b4:	4b09      	ldr	r3, [pc, #36]	; (80065dc <HAL_RCC_GetClockConfig+0x5c>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	08db      	lsrs	r3, r3, #3
 80065ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80065c2:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <HAL_RCC_GetClockConfig+0x60>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0207 	and.w	r2, r3, #7
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	601a      	str	r2, [r3, #0]
}
 80065ce:	bf00      	nop
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40023800 	.word	0x40023800
 80065e0:	40023c00 	.word	0x40023c00

080065e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e041      	b.n	800667a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f839 	bl	8006682 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3304      	adds	r3, #4
 8006620:	4619      	mov	r1, r3
 8006622:	4610      	mov	r0, r2
 8006624:	f000 f9d8 	bl	80069d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
	...

08006698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d001      	beq.n	80066b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e04e      	b.n	800674e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0201 	orr.w	r2, r2, #1
 80066c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a23      	ldr	r2, [pc, #140]	; (800675c <HAL_TIM_Base_Start_IT+0xc4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d022      	beq.n	8006718 <HAL_TIM_Base_Start_IT+0x80>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066da:	d01d      	beq.n	8006718 <HAL_TIM_Base_Start_IT+0x80>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1f      	ldr	r2, [pc, #124]	; (8006760 <HAL_TIM_Base_Start_IT+0xc8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d018      	beq.n	8006718 <HAL_TIM_Base_Start_IT+0x80>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1e      	ldr	r2, [pc, #120]	; (8006764 <HAL_TIM_Base_Start_IT+0xcc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d013      	beq.n	8006718 <HAL_TIM_Base_Start_IT+0x80>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1c      	ldr	r2, [pc, #112]	; (8006768 <HAL_TIM_Base_Start_IT+0xd0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00e      	beq.n	8006718 <HAL_TIM_Base_Start_IT+0x80>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1b      	ldr	r2, [pc, #108]	; (800676c <HAL_TIM_Base_Start_IT+0xd4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d009      	beq.n	8006718 <HAL_TIM_Base_Start_IT+0x80>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a19      	ldr	r2, [pc, #100]	; (8006770 <HAL_TIM_Base_Start_IT+0xd8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d004      	beq.n	8006718 <HAL_TIM_Base_Start_IT+0x80>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a18      	ldr	r2, [pc, #96]	; (8006774 <HAL_TIM_Base_Start_IT+0xdc>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d111      	bne.n	800673c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b06      	cmp	r3, #6
 8006728:	d010      	beq.n	800674c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f042 0201 	orr.w	r2, r2, #1
 8006738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800673a:	e007      	b.n	800674c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0201 	orr.w	r2, r2, #1
 800674a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40010000 	.word	0x40010000
 8006760:	40000400 	.word	0x40000400
 8006764:	40000800 	.word	0x40000800
 8006768:	40000c00 	.word	0x40000c00
 800676c:	40010400 	.word	0x40010400
 8006770:	40014000 	.word	0x40014000
 8006774:	40001800 	.word	0x40001800

08006778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b02      	cmp	r3, #2
 800678c:	d122      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b02      	cmp	r3, #2
 800679a:	d11b      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f06f 0202 	mvn.w	r2, #2
 80067a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f8ee 	bl	800699c <HAL_TIM_IC_CaptureCallback>
 80067c0:	e005      	b.n	80067ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f8e0 	bl	8006988 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f8f1 	bl	80069b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d122      	bne.n	8006828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d11b      	bne.n	8006828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f06f 0204 	mvn.w	r2, #4
 80067f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2202      	movs	r2, #2
 80067fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f8c4 	bl	800699c <HAL_TIM_IC_CaptureCallback>
 8006814:	e005      	b.n	8006822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f8b6 	bl	8006988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 f8c7 	bl	80069b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b08      	cmp	r3, #8
 8006834:	d122      	bne.n	800687c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b08      	cmp	r3, #8
 8006842:	d11b      	bne.n	800687c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0208 	mvn.w	r2, #8
 800684c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2204      	movs	r2, #4
 8006852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f89a 	bl	800699c <HAL_TIM_IC_CaptureCallback>
 8006868:	e005      	b.n	8006876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f88c 	bl	8006988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f89d 	bl	80069b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0310 	and.w	r3, r3, #16
 8006886:	2b10      	cmp	r3, #16
 8006888:	d122      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	2b10      	cmp	r3, #16
 8006896:	d11b      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0210 	mvn.w	r2, #16
 80068a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2208      	movs	r2, #8
 80068a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f870 	bl	800699c <HAL_TIM_IC_CaptureCallback>
 80068bc:	e005      	b.n	80068ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f862 	bl	8006988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f873 	bl	80069b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d10e      	bne.n	80068fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d107      	bne.n	80068fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0201 	mvn.w	r2, #1
 80068f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7fe fd6c 	bl	80053d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006906:	2b80      	cmp	r3, #128	; 0x80
 8006908:	d10e      	bne.n	8006928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006914:	2b80      	cmp	r3, #128	; 0x80
 8006916:	d107      	bne.n	8006928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f902 	bl	8006b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006932:	2b40      	cmp	r3, #64	; 0x40
 8006934:	d10e      	bne.n	8006954 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b40      	cmp	r3, #64	; 0x40
 8006942:	d107      	bne.n	8006954 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800694c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f838 	bl	80069c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b20      	cmp	r3, #32
 8006960:	d10e      	bne.n	8006980 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f003 0320 	and.w	r3, r3, #32
 800696c:	2b20      	cmp	r3, #32
 800696e:	d107      	bne.n	8006980 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0220 	mvn.w	r2, #32
 8006978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f8cc 	bl	8006b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006980:	bf00      	nop
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a40      	ldr	r2, [pc, #256]	; (8006aec <TIM_Base_SetConfig+0x114>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d013      	beq.n	8006a18 <TIM_Base_SetConfig+0x40>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f6:	d00f      	beq.n	8006a18 <TIM_Base_SetConfig+0x40>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a3d      	ldr	r2, [pc, #244]	; (8006af0 <TIM_Base_SetConfig+0x118>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00b      	beq.n	8006a18 <TIM_Base_SetConfig+0x40>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a3c      	ldr	r2, [pc, #240]	; (8006af4 <TIM_Base_SetConfig+0x11c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d007      	beq.n	8006a18 <TIM_Base_SetConfig+0x40>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a3b      	ldr	r2, [pc, #236]	; (8006af8 <TIM_Base_SetConfig+0x120>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d003      	beq.n	8006a18 <TIM_Base_SetConfig+0x40>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a3a      	ldr	r2, [pc, #232]	; (8006afc <TIM_Base_SetConfig+0x124>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d108      	bne.n	8006a2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a2f      	ldr	r2, [pc, #188]	; (8006aec <TIM_Base_SetConfig+0x114>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d02b      	beq.n	8006a8a <TIM_Base_SetConfig+0xb2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a38:	d027      	beq.n	8006a8a <TIM_Base_SetConfig+0xb2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a2c      	ldr	r2, [pc, #176]	; (8006af0 <TIM_Base_SetConfig+0x118>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d023      	beq.n	8006a8a <TIM_Base_SetConfig+0xb2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a2b      	ldr	r2, [pc, #172]	; (8006af4 <TIM_Base_SetConfig+0x11c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d01f      	beq.n	8006a8a <TIM_Base_SetConfig+0xb2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a2a      	ldr	r2, [pc, #168]	; (8006af8 <TIM_Base_SetConfig+0x120>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d01b      	beq.n	8006a8a <TIM_Base_SetConfig+0xb2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a29      	ldr	r2, [pc, #164]	; (8006afc <TIM_Base_SetConfig+0x124>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d017      	beq.n	8006a8a <TIM_Base_SetConfig+0xb2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a28      	ldr	r2, [pc, #160]	; (8006b00 <TIM_Base_SetConfig+0x128>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d013      	beq.n	8006a8a <TIM_Base_SetConfig+0xb2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a27      	ldr	r2, [pc, #156]	; (8006b04 <TIM_Base_SetConfig+0x12c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00f      	beq.n	8006a8a <TIM_Base_SetConfig+0xb2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a26      	ldr	r2, [pc, #152]	; (8006b08 <TIM_Base_SetConfig+0x130>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d00b      	beq.n	8006a8a <TIM_Base_SetConfig+0xb2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a25      	ldr	r2, [pc, #148]	; (8006b0c <TIM_Base_SetConfig+0x134>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d007      	beq.n	8006a8a <TIM_Base_SetConfig+0xb2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a24      	ldr	r2, [pc, #144]	; (8006b10 <TIM_Base_SetConfig+0x138>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d003      	beq.n	8006a8a <TIM_Base_SetConfig+0xb2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a23      	ldr	r2, [pc, #140]	; (8006b14 <TIM_Base_SetConfig+0x13c>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d108      	bne.n	8006a9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a0a      	ldr	r2, [pc, #40]	; (8006aec <TIM_Base_SetConfig+0x114>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d003      	beq.n	8006ad0 <TIM_Base_SetConfig+0xf8>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a0c      	ldr	r2, [pc, #48]	; (8006afc <TIM_Base_SetConfig+0x124>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d103      	bne.n	8006ad8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	691a      	ldr	r2, [r3, #16]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	615a      	str	r2, [r3, #20]
}
 8006ade:	bf00      	nop
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40010000 	.word	0x40010000
 8006af0:	40000400 	.word	0x40000400
 8006af4:	40000800 	.word	0x40000800
 8006af8:	40000c00 	.word	0x40000c00
 8006afc:	40010400 	.word	0x40010400
 8006b00:	40014000 	.word	0x40014000
 8006b04:	40014400 	.word	0x40014400
 8006b08:	40014800 	.word	0x40014800
 8006b0c:	40001800 	.word	0x40001800
 8006b10:	40001c00 	.word	0x40001c00
 8006b14:	40002000 	.word	0x40002000

08006b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <__libc_init_array>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	4d0d      	ldr	r5, [pc, #52]	; (8006b78 <__libc_init_array+0x38>)
 8006b44:	4c0d      	ldr	r4, [pc, #52]	; (8006b7c <__libc_init_array+0x3c>)
 8006b46:	1b64      	subs	r4, r4, r5
 8006b48:	10a4      	asrs	r4, r4, #2
 8006b4a:	2600      	movs	r6, #0
 8006b4c:	42a6      	cmp	r6, r4
 8006b4e:	d109      	bne.n	8006b64 <__libc_init_array+0x24>
 8006b50:	4d0b      	ldr	r5, [pc, #44]	; (8006b80 <__libc_init_array+0x40>)
 8006b52:	4c0c      	ldr	r4, [pc, #48]	; (8006b84 <__libc_init_array+0x44>)
 8006b54:	f000 f83e 	bl	8006bd4 <_init>
 8006b58:	1b64      	subs	r4, r4, r5
 8006b5a:	10a4      	asrs	r4, r4, #2
 8006b5c:	2600      	movs	r6, #0
 8006b5e:	42a6      	cmp	r6, r4
 8006b60:	d105      	bne.n	8006b6e <__libc_init_array+0x2e>
 8006b62:	bd70      	pop	{r4, r5, r6, pc}
 8006b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b68:	4798      	blx	r3
 8006b6a:	3601      	adds	r6, #1
 8006b6c:	e7ee      	b.n	8006b4c <__libc_init_array+0xc>
 8006b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b72:	4798      	blx	r3
 8006b74:	3601      	adds	r6, #1
 8006b76:	e7f2      	b.n	8006b5e <__libc_init_array+0x1e>
 8006b78:	08006ce0 	.word	0x08006ce0
 8006b7c:	08006ce0 	.word	0x08006ce0
 8006b80:	08006ce0 	.word	0x08006ce0
 8006b84:	08006ce4 	.word	0x08006ce4

08006b88 <memcmp>:
 8006b88:	b510      	push	{r4, lr}
 8006b8a:	3901      	subs	r1, #1
 8006b8c:	4402      	add	r2, r0
 8006b8e:	4290      	cmp	r0, r2
 8006b90:	d101      	bne.n	8006b96 <memcmp+0xe>
 8006b92:	2000      	movs	r0, #0
 8006b94:	e005      	b.n	8006ba2 <memcmp+0x1a>
 8006b96:	7803      	ldrb	r3, [r0, #0]
 8006b98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d001      	beq.n	8006ba4 <memcmp+0x1c>
 8006ba0:	1b18      	subs	r0, r3, r4
 8006ba2:	bd10      	pop	{r4, pc}
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	e7f2      	b.n	8006b8e <memcmp+0x6>

08006ba8 <memcpy>:
 8006ba8:	440a      	add	r2, r1
 8006baa:	4291      	cmp	r1, r2
 8006bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bb0:	d100      	bne.n	8006bb4 <memcpy+0xc>
 8006bb2:	4770      	bx	lr
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bbe:	4291      	cmp	r1, r2
 8006bc0:	d1f9      	bne.n	8006bb6 <memcpy+0xe>
 8006bc2:	bd10      	pop	{r4, pc}

08006bc4 <memset>:
 8006bc4:	4402      	add	r2, r0
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d100      	bne.n	8006bce <memset+0xa>
 8006bcc:	4770      	bx	lr
 8006bce:	f803 1b01 	strb.w	r1, [r3], #1
 8006bd2:	e7f9      	b.n	8006bc8 <memset+0x4>

08006bd4 <_init>:
 8006bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd6:	bf00      	nop
 8006bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bda:	bc08      	pop	{r3}
 8006bdc:	469e      	mov	lr, r3
 8006bde:	4770      	bx	lr

08006be0 <_fini>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	bf00      	nop
 8006be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be6:	bc08      	pop	{r3}
 8006be8:	469e      	mov	lr, r3
 8006bea:	4770      	bx	lr
